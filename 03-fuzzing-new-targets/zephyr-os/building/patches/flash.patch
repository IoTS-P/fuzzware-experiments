diff --git a/samples/bluetooth/peripheral/src/main.c b/samples/bluetooth/peripheral/src/main.c
index 649393af9f..2ce2787943 100644
--- a/samples/bluetooth/peripheral/src/main.c
+++ b/samples/bluetooth/peripheral/src/main.c
@@ -26,18 +26,104 @@
 
 #include "cts.h"
 
+// flash ram test
+#include <drivers/flash.h>
+#include <kernel.h>
+#include <kernel_structs.h>
+#include <sys/types.h>
+#include <init.h>
+
+u32_t get_lr(void)
+{
+	u32_t lr_value;
+	__asm__ volatile("MOV %0, LR" : "=r"(lr_value));
+	return lr_value;
+}
+// TODO: use flash region which is not been used
+#define FLASH_OFFSET DT_FLASH_AREA_IMAGE_1_OFFSET
+static int iva_store_ram()
+{
+	u32_t lr_value = get_lr();
+	printk("LR: 0x%x\n", lr_value);
+	uint32_t time_start = k_cycle_get_32();
+	extern uint32_t _image_ram_start[];
+	extern uint32_t _image_ram_end[];
+
+	const uint32_t ram_start = (uint32_t)_image_ram_start;
+	const uint32_t ram_end = (uint32_t)_image_ram_end;
+
+	struct device *flash_dev;
+	uint32_t size_to_collect = ram_end - ram_start;
+
+	printk("store size: %d\n", size_to_collect);
+
+	flash_dev = device_get_binding(DT_FLASH_DEV_NAME);
+
+	if (!flash_dev) {
+		return -ENODEV;
+	}
+
+	flash_write_protection_set(flash_dev, false);
+	// test if flash is write
+	uint32_t buf_word = 0U;
+	if (flash_read(flash_dev, FLASH_OFFSET, &buf_word, sizeof(uint32_t)) !=
+	    0) {
+		printk("iva: flash read failed\n");
+		return -EIO;
+	}
+
+	if (buf_word != 0xFFFFFFFF) {
+		printk("iva: flash region not null\n");
+	}
+
+	// if (flash_erase(flash_dev, FLASH_OFFSET, size_to_collect) != 0) {
+	//	printk("iva: flash erase failed\n");
+	//	return -EIO;
+	//}
+
+	if (flash_write(flash_dev, FLASH_OFFSET, (void *)ram_start,
+			size_to_collect) != 0) {
+		printk("iva: flash write failed\n");
+		return -EIO;
+	}
+	uint32_t time_end = k_cycle_get_32();
+	uint32_t run_time = time_end - time_start;
+	uint32_t time_ms = SYS_CLOCK_HW_CYCLES_TO_NS(run_time) /
+			   (NSEC_PER_USEC * USEC_PER_MSEC);
+	printk("IVA_STORE_RAM ms: %d\n", time_ms);
+
+	bool ram_cache_print = false;
+	if (ram_cache_print) {
+		u8_t ram_value[20] = { 0 };
+		for (size_t i = 0; i < size_to_collect; i += 20) {
+			if (flash_read(flash_dev, FLASH_OFFSET + i, &ram_value,
+				       20) != 0)
+				printk("iva: flash read failed \n");
+
+			for (size_t j = 0; j < 20; j++) {
+				printk("%x ", ram_value[j]);
+			}
+			printk("\n");
+		}
+	}
+
+	flash_write_protection_set(flash_dev, true);
+	return 0;
+}
+// flash ram test end
+
 /* Custom Service Variables */
-static struct bt_uuid_128 vnd_uuid = BT_UUID_INIT_128(
-	0xf0, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12,
-	0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12);
+static struct bt_uuid_128 vnd_uuid =
+	BT_UUID_INIT_128(0xf0, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12, 0x78,
+			 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12);
 
-static struct bt_uuid_128 vnd_enc_uuid = BT_UUID_INIT_128(
-	0xf1, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12,
-	0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12);
+static struct bt_uuid_128 vnd_enc_uuid =
+	BT_UUID_INIT_128(0xf1, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12, 0x78,
+			 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12);
 
-static struct bt_uuid_128 vnd_auth_uuid = BT_UUID_INIT_128(
-	0xf2, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12,
-	0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12);
+static struct bt_uuid_128 vnd_auth_uuid =
+	BT_UUID_INIT_128(0xf2, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12, 0x78,
+			 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12);
 
 static u8_t vnd_value[] = { 'V', 'e', 'n', 'd', 'o', 'r' };
 
@@ -51,8 +137,7 @@ static ssize_t read_vnd(struct bt_conn *conn, const struct bt_gatt_attr *attr,
 }
 
 static ssize_t write_vnd(struct bt_conn *conn, const struct bt_gatt_attr *attr,
-			 const void *buf, u16_t len, u16_t offset,
-			 u8_t flags)
+			 const void *buf, u16_t len, u16_t offset, u8_t flags)
 {
 	u8_t *value = attr->user_data;
 
@@ -83,13 +168,13 @@ static void indicate_cb(struct bt_conn *conn, const struct bt_gatt_attr *attr,
 
 #define MAX_DATA 74
 static u8_t vnd_long_value[] = {
-		  'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '1',
-		  'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '2',
-		  'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '3',
-		  'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '4',
-		  'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '5',
-		  'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '6',
-		  '.', ' ' };
+	'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '1', 'V',
+	'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '2', 'V', 'e',
+	'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '3', 'V', 'e', 'n',
+	'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '4', 'V', 'e', 'n', 'd',
+	'o', 'r', ' ', 'd', 'a', 't', 'a', '5', 'V', 'e', 'n', 'd', 'o',
+	'r', ' ', 'd', 'a', 't', 'a', '6', '.', ' '
+};
 
 static ssize_t read_long_vnd(struct bt_conn *conn,
 			     const struct bt_gatt_attr *attr, void *buf,
@@ -120,9 +205,9 @@ static ssize_t write_long_vnd(struct bt_conn *conn,
 	return len;
 }
 
-static const struct bt_uuid_128 vnd_long_uuid = BT_UUID_INIT_128(
-	0xf3, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12,
-	0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12);
+static const struct bt_uuid_128 vnd_long_uuid =
+	BT_UUID_INIT_128(0xf3, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12, 0x78,
+			 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12);
 
 static struct bt_gatt_cep vnd_long_cep = {
 	.properties = BT_GATT_CEP_RELIABLE_WRITE,
@@ -130,8 +215,9 @@ static struct bt_gatt_cep vnd_long_cep = {
 
 static int signed_value;
 
-static ssize_t read_signed(struct bt_conn *conn, const struct bt_gatt_attr *attr,
-			   void *buf, u16_t len, u16_t offset)
+static ssize_t read_signed(struct bt_conn *conn,
+			   const struct bt_gatt_attr *attr, void *buf,
+			   u16_t len, u16_t offset)
 {
 	const char *value = attr->user_data;
 
@@ -139,9 +225,9 @@ static ssize_t read_signed(struct bt_conn *conn, const struct bt_gatt_attr *attr
 				 sizeof(signed_value));
 }
 
-static ssize_t write_signed(struct bt_conn *conn, const struct bt_gatt_attr *attr,
-			    const void *buf, u16_t len, u16_t offset,
-			    u8_t flags)
+static ssize_t write_signed(struct bt_conn *conn,
+			    const struct bt_gatt_attr *attr, const void *buf,
+			    u16_t len, u16_t offset, u8_t flags)
 {
 	u8_t *value = attr->user_data;
 
@@ -154,13 +240,13 @@ static ssize_t write_signed(struct bt_conn *conn, const struct bt_gatt_attr *att
 	return len;
 }
 
-static const struct bt_uuid_128 vnd_signed_uuid = BT_UUID_INIT_128(
-	0xf3, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x13,
-	0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x13);
+static const struct bt_uuid_128 vnd_signed_uuid =
+	BT_UUID_INIT_128(0xf3, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x13, 0x78,
+			 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x13);
 
-static const struct bt_uuid_128 vnd_write_cmd_uuid = BT_UUID_INIT_128(
-	0xf4, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12,
-	0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12);
+static const struct bt_uuid_128 vnd_write_cmd_uuid =
+	BT_UUID_INIT_128(0xf4, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12, 0x78,
+			 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12);
 
 static ssize_t write_without_rsp_vnd(struct bt_conn *conn,
 				     const struct bt_gatt_attr *attr,
@@ -186,44 +272,44 @@ static ssize_t write_without_rsp_vnd(struct bt_conn *conn,
 }
 
 /* Vendor Primary Service Declaration */
-BT_GATT_SERVICE_DEFINE(vnd_svc,
-	BT_GATT_PRIMARY_SERVICE(&vnd_uuid),
+BT_GATT_SERVICE_DEFINE(
+	vnd_svc, BT_GATT_PRIMARY_SERVICE(&vnd_uuid),
 	BT_GATT_CHARACTERISTIC(&vnd_enc_uuid.uuid,
 			       BT_GATT_CHRC_READ | BT_GATT_CHRC_WRITE |
-			       BT_GATT_CHRC_INDICATE,
+				       BT_GATT_CHRC_INDICATE,
 			       BT_GATT_PERM_READ_ENCRYPT |
-			       BT_GATT_PERM_WRITE_ENCRYPT,
+				       BT_GATT_PERM_WRITE_ENCRYPT,
 			       read_vnd, write_vnd, vnd_value),
 	BT_GATT_CCC(vnd_ccc_cfg_changed,
 		    BT_GATT_PERM_READ | BT_GATT_PERM_WRITE_ENCRYPT),
 	BT_GATT_CHARACTERISTIC(&vnd_auth_uuid.uuid,
 			       BT_GATT_CHRC_READ | BT_GATT_CHRC_WRITE,
 			       BT_GATT_PERM_READ_AUTHEN |
-			       BT_GATT_PERM_WRITE_AUTHEN,
+				       BT_GATT_PERM_WRITE_AUTHEN,
 			       read_vnd, write_vnd, vnd_value),
-	BT_GATT_CHARACTERISTIC(&vnd_long_uuid.uuid, BT_GATT_CHRC_READ |
-			       BT_GATT_CHRC_WRITE | BT_GATT_CHRC_EXT_PROP,
+	BT_GATT_CHARACTERISTIC(&vnd_long_uuid.uuid,
+			       BT_GATT_CHRC_READ | BT_GATT_CHRC_WRITE |
+				       BT_GATT_CHRC_EXT_PROP,
 			       BT_GATT_PERM_READ | BT_GATT_PERM_WRITE |
-			       BT_GATT_PERM_PREPARE_WRITE,
+				       BT_GATT_PERM_PREPARE_WRITE,
 			       read_long_vnd, write_long_vnd, &vnd_long_value),
 	BT_GATT_CEP(&vnd_long_cep),
-	BT_GATT_CHARACTERISTIC(&vnd_signed_uuid.uuid, BT_GATT_CHRC_READ |
-			       BT_GATT_CHRC_WRITE | BT_GATT_CHRC_AUTH,
+	BT_GATT_CHARACTERISTIC(&vnd_signed_uuid.uuid,
+			       BT_GATT_CHRC_READ | BT_GATT_CHRC_WRITE |
+				       BT_GATT_CHRC_AUTH,
 			       BT_GATT_PERM_READ | BT_GATT_PERM_WRITE,
 			       read_signed, write_signed, &signed_value),
 	BT_GATT_CHARACTERISTIC(&vnd_write_cmd_uuid.uuid,
 			       BT_GATT_CHRC_WRITE_WITHOUT_RESP,
-			       BT_GATT_PERM_WRITE, NULL,
-			       write_without_rsp_vnd, &vnd_value),
-);
+			       BT_GATT_PERM_WRITE, NULL, write_without_rsp_vnd,
+			       &vnd_value), );
 
 static const struct bt_data ad[] = {
 	BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),
-	BT_DATA_BYTES(BT_DATA_UUID16_ALL,
-		      0x0d, 0x18, 0x0f, 0x18, 0x05, 0x18),
-	BT_DATA_BYTES(BT_DATA_UUID128_ALL,
-		      0xf0, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x12,
-		      0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12),
+	BT_DATA_BYTES(BT_DATA_UUID16_ALL, 0x0d, 0x18, 0x0f, 0x18, 0x05, 0x18),
+	BT_DATA_BYTES(BT_DATA_UUID128_ALL, 0xf0, 0xde, 0xbc, 0x9a, 0x78, 0x56,
+		      0x34, 0x12, 0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34,
+		      0x12),
 };
 
 static void connected(struct bt_conn *conn, u8_t err)
@@ -363,3 +449,5 @@ void main(void)
 		}
 	}
 }
+
+SYS_INIT(iva_store_ram, APPLICATION, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT);
