From 81dda59781523c704618749c13221405ced40e56 Mon Sep 17 00:00:00 2001
From: Ruibo Lu <reaperlu@hust.edu.cn>
Date: Fri, 26 Jul 2024 21:46:15 +0800
Subject: [PATCH] Add SmartThings SDK based Smart Light

Signed-off-by: Ruibo Lu <reaperlu@hust.edu.cn>
---
 examples/Smart_Switch/Makefile                |  23 +
 examples/Smart_Switch/README.md               |  46 +
 .../arch/cpu/cc2538/builtin-sensors.c         |  82 ++
 .../arch/cpu/cc2538/builtin-sensors.h         |  42 +
 .../arch/cpu/cc26x0-cc13x0/builtin-sensors.c  |  82 ++
 .../arch/cpu/cc26x0-cc13x0/builtin-sensors.h  |  42 +
 .../arch/platform/cc2538dk/Makefile.cc2538dk  |   1 +
 .../arch/platform/cc2538dk/als-extend.c       |  61 ++
 .../arch/platform/cc2538dk/als-extend.h       |  41 +
 .../arch/platform/cc2538dk/module-macros.h    |  34 +
 .../cc2538dk/mqtt-client-extensions.c         |  41 +
 .../cc26x0-cc13x0/Makefile.cc26x0-cc13x0      |   1 +
 .../platform/cc26x0-cc13x0/module-macros.h    |  34 +
 .../cc26x0-cc13x0/mqtt-client-extensions.c    |  40 +
 .../arch/platform/openmote/Makefile.openmote  |   1 +
 .../arch/platform/openmote/module-macros.h    |  34 +
 .../openmote/mqtt-client-extensions.c         |  39 +
 .../arch/platform/zoul/Makefile.zoul          |   1 +
 .../arch/platform/zoul/module-macros.h        |  34 +
 .../platform/zoul/mqtt-client-extensions.c    |  39 +
 examples/Smart_Switch/mqtt-client.c           | 962 ++++++++++++++++++
 examples/Smart_Switch/mqtt-client.h           |  53 +
 examples/Smart_Switch/project-conf.h          |  81 ++
 examples/Smart_Switch/sdkconfig.h             |  35 +
 .../Smart_Switch/st/caps/iot_caps_helper.h    |  46 +
 .../caps/iot_caps_helper_accelerationSensor.h |  60 ++
 .../iot_caps_helper_activityLightingMode.h    |  80 ++
 .../caps/iot_caps_helper_airQualitySensor.h   |  61 ++
 .../st/caps/iot_caps_helper_alarm.h           |  74 ++
 .../st/caps/iot_caps_helper_audioMute.h       |  66 ++
 .../st/caps/iot_caps_helper_audioVolume.h     |  67 ++
 .../st/caps/iot_caps_helper_battery.h         |  61 ++
 ...iot_caps_helper_bodyMassIndexMeasurement.h |  59 ++
 .../iot_caps_helper_bodyWeightMeasurement.h   |  65 ++
 .../st/caps/iot_caps_helper_button.h          | 189 ++++
 ...t_caps_helper_carbonDioxideHealthConcern.h |  72 ++
 ...iot_caps_helper_carbonDioxideMeasurement.h |  61 ++
 .../iot_caps_helper_carbonMonoxideDetector.h  |  63 ++
 ...ot_caps_helper_carbonMonoxideMeasurement.h |  61 ++
 .../st/caps/iot_caps_helper_colorControl.h    |  80 ++
 .../caps/iot_caps_helper_colorTemperature.h   |  63 ++
 .../st/caps/iot_caps_helper_contactSensor.h   |  60 ++
 ...iot_caps_helper_dishwasherOperatingState.h | 143 +++
 .../st/caps/iot_caps_helper_doorControl.h     |  73 ++
 .../iot_caps_helper_dryerOperatingState.h     | 146 +++
 .../caps/iot_caps_helper_dustHealthConcern.h  |  72 ++
 .../st/caps/iot_caps_helper_dustSensor.h      |  80 ++
 .../st/caps/iot_caps_helper_energyMeter.h     |  70 ++
 ...elper_equivalentCarbonDioxideMeasurement.h |  61 ++
 .../st/caps/iot_caps_helper_execute.h         |  50 +
 .../caps/iot_caps_helper_fanOscillationMode.h | 149 +++
 .../st/caps/iot_caps_helper_fanSpeed.h        |  52 +
 .../st/caps/iot_caps_helper_filterStatus.h    |  60 ++
 .../iot_caps_helper_fineDustHealthConcern.h   |  72 ++
 .../st/caps/iot_caps_helper_fineDustSensor.h  |  59 ++
 .../st/caps/iot_caps_helper_firmwareUpdate.h  | 126 +++
 .../iot_caps_helper_formaldehydeMeasurement.h |  64 ++
 .../caps/iot_caps_helper_garageDoorControl.h  |  73 ++
 .../st/caps/iot_caps_helper_gasMeter.h        | 124 +++
 .../iot_caps_helper_illuminanceMeasurement.h  |  61 ++
 .../st/caps/iot_caps_helper_imageCapture.h    |  70 ++
 .../st/caps/iot_caps_helper_lock.h            |  70 ++
 .../caps/iot_caps_helper_mediaInputSource.h   | 159 +++
 .../st/caps/iot_caps_helper_mediaPlayback.h   | 104 ++
 .../iot_caps_helper_mediaPlaybackRepeat.h     |  65 ++
 .../iot_caps_helper_mediaPlaybackShuffle.h    |  62 ++
 .../st/caps/iot_caps_helper_mode.h            |  60 ++
 .../caps/iot_caps_helper_moldHealthConcern.h  |  72 ++
 .../st/caps/iot_caps_helper_momentary.h       |  40 +
 .../st/caps/iot_caps_helper_motionSensor.h    |  60 ++
 .../st/caps/iot_caps_helper_objectDetection.h |  60 ++
 .../st/caps/iot_caps_helper_odorSensor.h      |  50 +
 .../st/caps/iot_caps_helper_operatingState.h  |  84 ++
 .../caps/iot_caps_helper_ovenOperatingState.h | 200 ++++
 .../st/caps/iot_caps_helper_ovenSetpoint.h    |  52 +
 .../st/caps/iot_caps_helper_pHMeasurement.h   |  61 ++
 .../st/caps/iot_caps_helper_panicAlarm.h      |  60 ++
 .../st/caps/iot_caps_helper_powerMeter.h      |  59 ++
 .../st/caps/iot_caps_helper_powerSource.h     |  66 ++
 .../st/caps/iot_caps_helper_presenceSensor.h  |  60 ++
 .../caps/iot_caps_helper_radonHealthConcern.h |  72 ++
 .../st/caps/iot_caps_helper_rapidCooling.h    |  62 ++
 .../st/caps/iot_caps_helper_refresh.h         |  40 +
 ..._caps_helper_relativeHumidityMeasurement.h |  61 ++
 .../iot_caps_helper_remoteControlStatus.h     |  60 ++
 .../iot_caps_helper_robotCleanerMovement.h    |  86 ++
 .../iot_caps_helper_robotCleanerTurboMode.h   |  65 ++
 .../st/caps/iot_caps_helper_samsungTV.h       | 186 ++++
 .../st/caps/iot_caps_helper_securitySystem.h  |  81 ++
 .../st/caps/iot_caps_helper_signalStrength.h  |  75 ++
 .../st/caps/iot_caps_helper_sleepSensor.h     |  60 ++
 .../st/caps/iot_caps_helper_smokeDetector.h   |  63 ++
 .../caps/iot_caps_helper_soundPressureLevel.h |  61 ++
 .../st/caps/iot_caps_helper_soundSensor.h     |  60 ++
 .../st/caps/iot_caps_helper_switch.h          |  64 ++
 .../st/caps/iot_caps_helper_switchLevel.h     |  63 ++
 .../st/caps/iot_caps_helper_tamperAlert.h     |  60 ++
 .../caps/iot_caps_helper_temperatureAlarm.h   |  66 ++
 .../iot_caps_helper_temperatureMeasurement.h  |  64 ++
 ...ot_caps_helper_thermostatCoolingSetpoint.h |  66 ++
 .../caps/iot_caps_helper_thermostatFanMode.h  |  95 ++
 ...ot_caps_helper_thermostatHeatingSetpoint.h |  66 ++
 .../st/caps/iot_caps_helper_thermostatMode.h  | 264 +++++
 ...iot_caps_helper_thermostatOperatingState.h |  75 ++
 .../caps/iot_caps_helper_thermostatSetpoint.h |  64 ++
 .../st/caps/iot_caps_helper_threeAxis.h       |  61 ++
 .../st/caps/iot_caps_helper_timedSession.h    |  86 ++
 .../st/caps/iot_caps_helper_tone.h            |  40 +
 .../caps/iot_caps_helper_tvocHealthConcern.h  |  72 ++
 .../st/caps/iot_caps_helper_tvocMeasurement.h |  61 ++
 .../caps/iot_caps_helper_ultravioletIndex.h   |  52 +
 .../st/caps/iot_caps_helper_valve.h           |  64 ++
 ...ot_caps_helper_veryFineDustHealthConcern.h |  72 ++
 .../caps/iot_caps_helper_veryFineDustSensor.h |  59 ++
 .../caps/iot_caps_helper_voltageMeasurement.h |  59 ++
 .../st/caps/iot_caps_helper_waterSensor.h     |  60 ++
 .../st/caps/iot_caps_helper_windowShade.h     |  97 ++
 examples/Smart_Switch/st/caps_switch.c        | 158 +++
 examples/Smart_Switch/st/caps_switch.h        |  47 +
 examples/Smart_Switch/st/component.mk         |   5 +
 examples/Smart_Switch/st/device_control.c     | 165 +++
 examples/Smart_Switch/st/device_control.h     |  70 ++
 examples/Smart_Switch/st/device_info.json     |   8 +
 examples/Smart_Switch/st/mqtt_head.h          |   5 +
 .../Smart_Switch/st/onboarding_config.json    |  16 +
 examples/Smart_Switch/st/st_dev.c             | 323 ++++++
 examples/Smart_Switch/st/st_dev.h             | 360 +++++++
 examples/Smart_Switch/st/switch_main.c        | 272 +++++
 examples/Smart_Switch/usr_config.mk           |  13 +
 129 files changed, 10390 insertions(+)
 create mode 100644 examples/Smart_Switch/Makefile
 create mode 100644 examples/Smart_Switch/README.md
 create mode 100644 examples/Smart_Switch/arch/cpu/cc2538/builtin-sensors.c
 create mode 100644 examples/Smart_Switch/arch/cpu/cc2538/builtin-sensors.h
 create mode 100644 examples/Smart_Switch/arch/cpu/cc26x0-cc13x0/builtin-sensors.c
 create mode 100644 examples/Smart_Switch/arch/cpu/cc26x0-cc13x0/builtin-sensors.h
 create mode 100644 examples/Smart_Switch/arch/platform/cc2538dk/Makefile.cc2538dk
 create mode 100644 examples/Smart_Switch/arch/platform/cc2538dk/als-extend.c
 create mode 100644 examples/Smart_Switch/arch/platform/cc2538dk/als-extend.h
 create mode 100644 examples/Smart_Switch/arch/platform/cc2538dk/module-macros.h
 create mode 100644 examples/Smart_Switch/arch/platform/cc2538dk/mqtt-client-extensions.c
 create mode 100644 examples/Smart_Switch/arch/platform/cc26x0-cc13x0/Makefile.cc26x0-cc13x0
 create mode 100644 examples/Smart_Switch/arch/platform/cc26x0-cc13x0/module-macros.h
 create mode 100644 examples/Smart_Switch/arch/platform/cc26x0-cc13x0/mqtt-client-extensions.c
 create mode 100644 examples/Smart_Switch/arch/platform/openmote/Makefile.openmote
 create mode 100644 examples/Smart_Switch/arch/platform/openmote/module-macros.h
 create mode 100644 examples/Smart_Switch/arch/platform/openmote/mqtt-client-extensions.c
 create mode 100644 examples/Smart_Switch/arch/platform/zoul/Makefile.zoul
 create mode 100644 examples/Smart_Switch/arch/platform/zoul/module-macros.h
 create mode 100644 examples/Smart_Switch/arch/platform/zoul/mqtt-client-extensions.c
 create mode 100644 examples/Smart_Switch/mqtt-client.c
 create mode 100644 examples/Smart_Switch/mqtt-client.h
 create mode 100644 examples/Smart_Switch/project-conf.h
 create mode 100644 examples/Smart_Switch/sdkconfig.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_accelerationSensor.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_activityLightingMode.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_airQualitySensor.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_alarm.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_audioMute.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_audioVolume.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_battery.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_bodyMassIndexMeasurement.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_bodyWeightMeasurement.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_button.h
 create mode 100755 examples/Smart_Switch/st/caps/iot_caps_helper_carbonDioxideHealthConcern.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_carbonDioxideMeasurement.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_carbonMonoxideDetector.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_carbonMonoxideMeasurement.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_colorControl.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_colorTemperature.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_contactSensor.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_dishwasherOperatingState.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_doorControl.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_dryerOperatingState.h
 create mode 100755 examples/Smart_Switch/st/caps/iot_caps_helper_dustHealthConcern.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_dustSensor.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_energyMeter.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_equivalentCarbonDioxideMeasurement.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_execute.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_fanOscillationMode.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_fanSpeed.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_filterStatus.h
 create mode 100755 examples/Smart_Switch/st/caps/iot_caps_helper_fineDustHealthConcern.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_fineDustSensor.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_firmwareUpdate.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_formaldehydeMeasurement.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_garageDoorControl.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_gasMeter.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_illuminanceMeasurement.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_imageCapture.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_lock.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_mediaInputSource.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_mediaPlayback.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_mediaPlaybackRepeat.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_mediaPlaybackShuffle.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_mode.h
 create mode 100755 examples/Smart_Switch/st/caps/iot_caps_helper_moldHealthConcern.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_momentary.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_motionSensor.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_objectDetection.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_odorSensor.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_operatingState.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_ovenOperatingState.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_ovenSetpoint.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_pHMeasurement.h
 create mode 100755 examples/Smart_Switch/st/caps/iot_caps_helper_panicAlarm.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_powerMeter.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_powerSource.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_presenceSensor.h
 create mode 100755 examples/Smart_Switch/st/caps/iot_caps_helper_radonHealthConcern.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_rapidCooling.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_refresh.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_relativeHumidityMeasurement.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_remoteControlStatus.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_robotCleanerMovement.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_robotCleanerTurboMode.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_samsungTV.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_securitySystem.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_signalStrength.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_sleepSensor.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_smokeDetector.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_soundPressureLevel.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_soundSensor.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_switch.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_switchLevel.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_tamperAlert.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_temperatureAlarm.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_temperatureMeasurement.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_thermostatCoolingSetpoint.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_thermostatFanMode.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_thermostatHeatingSetpoint.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_thermostatMode.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_thermostatOperatingState.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_thermostatSetpoint.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_threeAxis.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_timedSession.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_tone.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_tvocHealthConcern.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_tvocMeasurement.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_ultravioletIndex.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_valve.h
 create mode 100755 examples/Smart_Switch/st/caps/iot_caps_helper_veryFineDustHealthConcern.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_veryFineDustSensor.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_voltageMeasurement.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_waterSensor.h
 create mode 100644 examples/Smart_Switch/st/caps/iot_caps_helper_windowShade.h
 create mode 100644 examples/Smart_Switch/st/caps_switch.c
 create mode 100644 examples/Smart_Switch/st/caps_switch.h
 create mode 100644 examples/Smart_Switch/st/component.mk
 create mode 100644 examples/Smart_Switch/st/device_control.c
 create mode 100644 examples/Smart_Switch/st/device_control.h
 create mode 100644 examples/Smart_Switch/st/device_info.json
 create mode 100644 examples/Smart_Switch/st/mqtt_head.h
 create mode 100644 examples/Smart_Switch/st/onboarding_config.json
 create mode 100644 examples/Smart_Switch/st/st_dev.c
 create mode 100644 examples/Smart_Switch/st/st_dev.h
 create mode 100644 examples/Smart_Switch/st/switch_main.c
 create mode 100644 examples/Smart_Switch/usr_config.mk

diff --git a/examples/Smart_Switch/Makefile b/examples/Smart_Switch/Makefile
new file mode 100644
index 000000000..3ad46c5ac
--- /dev/null
+++ b/examples/Smart_Switch/Makefile
@@ -0,0 +1,23 @@
+CONTIKI_PROJECT = mqtt-client
+all: $(CONTIKI_PROJECT)
+
+CONTIKI = ../..
+
+include $(CONTIKI)/Makefile.dir-variables
+MODULES += $(CONTIKI_NG_APP_LAYER_DIR)/mqtt
+
+include $(CONTIKI)/Makefile.identify-target
+
+MODULES_REL += arch/platform/$(TARGET)
+
+# Add for SmartThings build
+MODULES_REL += st
+CFLAGS += -Wno-unused-function
+
+# Fuzzware: use BLE / BLE's l2cap as MAC layer
+MAKE_MAC = MAKE_MAC_BLE
+CFLAGS += -g
+
+PLATFORMS_ONLY = cc26x0-cc13x0 cc2538dk openmote zoul native simplelink cooja
+
+include $(CONTIKI)/Makefile.include
diff --git a/examples/Smart_Switch/README.md b/examples/Smart_Switch/README.md
new file mode 100644
index 000000000..025c46e8c
--- /dev/null
+++ b/examples/Smart_Switch/README.md
@@ -0,0 +1,46 @@
+# SmartThings SDK for Direct Connected Devices for C - Switch Example
+
+## Introduction
+
+SmartThings direct-connected device is Wi-Fi enabled device that uses the SmartThings cloud as its primary cloud infrastructure. And this device will use the MQTT protocol for communication.
+
+## Getting started
+
+For information on detailed workflow, please refer to the [Getting Started](../../../doc/getting_started.md)
+
+## Components and Capabilities
+
+SmartThings Device is defined using components and capabilities. Capabilities define the features of the device, and capabilities are grouped into components.
+Components and Capabilities are contained in device profile. You can create a device profile in Developer Workspace and associate it with an integration.
+
+This example assumes the following component and capabilities are used. :  
+
+'main' component  
+- 'healthCheck' capability  
+- 'switch' capability  
+
+('healthCheck' capability is automatically added by Developer Workspace. It doesn't need handler at device side)
+
+## SmartThings SDK for Direct Connected Devices - Config
+If you want to use specific SmartThings Device SDK build options, you can directly modify the build configuration file. For this example, SmartThings Device SDK config is saved in 'sdkconfig.h' file. If you want to change this, please execute the following :
+```sh
+$ cd ~/st-device-sdk-c-ref
+$ vim apps/rtl8195/switch_example/sdkconfig.h
+```
+
+## Test device schematics
+This example uses RTL8195 GPIO like below.
+Please refer below picture for __Ameba RTL8195AM__.
+> Note: If your device's schematics doesn't match with belows.
+> Please modify GPIO defines for your device at [device_control.h](main/device_control.h)
+> ```c
+> #define GPIO_OUTPUT_MAINLED             PC_2
+> #define GPIO_OUTPUT_MAINLED_0           PC_5
+> #define GPIO_OUTPUT_NOTIFICATION_LED    PC_4
+> #define GPIO_INPUT_BUTTON               PC_1
+> ```
+
+### Ameba RTL8195AM
+| Ameba RTL8195AM                                                       |
+|-----------------------------------------------------------------------|
+|![Ameba RTL8195AM](../../../doc/res/Switch_Example_AMEBA_RTL8195AM.png) |
diff --git a/examples/Smart_Switch/arch/cpu/cc2538/builtin-sensors.c b/examples/Smart_Switch/arch/cpu/cc2538/builtin-sensors.c
new file mode 100644
index 000000000..ff6597ccc
--- /dev/null
+++ b/examples/Smart_Switch/arch/cpu/cc2538/builtin-sensors.c
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2017, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "dev/cc2538-sensors.h"
+#include "mqtt-client.h"
+
+#include <string.h>
+#include <stdio.h>
+/*---------------------------------------------------------------------------*/
+#define TMP_BUF_SZ 32
+/*---------------------------------------------------------------------------*/
+static char tmp_buf[TMP_BUF_SZ];
+/*---------------------------------------------------------------------------*/
+static char *
+temp_reading(void)
+{
+  memset(tmp_buf, 0, TMP_BUF_SZ);
+  snprintf(tmp_buf, TMP_BUF_SZ, "\"On-Chip Temp (mC)\":%d",
+           cc2538_temp_sensor.value(CC2538_SENSORS_VALUE_TYPE_CONVERTED));
+  return tmp_buf;
+}
+/*---------------------------------------------------------------------------*/
+static void
+temp_init(void)
+{
+  SENSORS_ACTIVATE(cc2538_temp_sensor);
+}
+/*---------------------------------------------------------------------------*/
+const mqtt_client_extension_t builtin_sensors_cc2538_temp = {
+  temp_init,
+  temp_reading,
+};
+/*---------------------------------------------------------------------------*/
+static char *
+vdd3_reading(void)
+{
+  memset(tmp_buf, 0, TMP_BUF_SZ);
+  snprintf(tmp_buf, TMP_BUF_SZ, "\"VDD3 (mV)\":%d",
+           vdd3_sensor.value(CC2538_SENSORS_VALUE_TYPE_CONVERTED));
+  return tmp_buf;
+}
+/*---------------------------------------------------------------------------*/
+static void
+vdd3_init(void)
+{
+  SENSORS_ACTIVATE(vdd3_sensor);
+}
+/*---------------------------------------------------------------------------*/
+const mqtt_client_extension_t builtin_sensors_vdd3 = {
+  vdd3_init,
+  vdd3_reading,
+};
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/cpu/cc2538/builtin-sensors.h b/examples/Smart_Switch/arch/cpu/cc2538/builtin-sensors.h
new file mode 100644
index 000000000..50a765b52
--- /dev/null
+++ b/examples/Smart_Switch/arch/cpu/cc2538/builtin-sensors.h
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) 2017, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#ifndef BUILTIN_SENSORS_H_
+#define BUILTIN_SENSORS_H_
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "mqtt-client.h"
+/*---------------------------------------------------------------------------*/
+extern const mqtt_client_extension_t builtin_sensors_vdd3;
+extern const mqtt_client_extension_t builtin_sensors_cc2538_temp;
+/*---------------------------------------------------------------------------*/
+#endif /* BUILTIN_SENSORS_H_ */
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/cpu/cc26x0-cc13x0/builtin-sensors.c b/examples/Smart_Switch/arch/cpu/cc26x0-cc13x0/builtin-sensors.c
new file mode 100644
index 000000000..1a3610cd4
--- /dev/null
+++ b/examples/Smart_Switch/arch/cpu/cc26x0-cc13x0/builtin-sensors.c
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2017, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "batmon-sensor.h"
+#include "mqtt-client.h"
+
+#include <string.h>
+#include <stdio.h>
+/*---------------------------------------------------------------------------*/
+#define TMP_BUF_SZ 32
+/*---------------------------------------------------------------------------*/
+static char tmp_buf[TMP_BUF_SZ];
+/*---------------------------------------------------------------------------*/
+static char *
+temp_reading(void)
+{
+  memset(tmp_buf, 0, TMP_BUF_SZ);
+  snprintf(tmp_buf, TMP_BUF_SZ, "\"On-Chip Temp (mC)\":%d",
+           batmon_sensor.value(BATMON_SENSOR_TYPE_TEMP));
+  return tmp_buf;
+}
+/*---------------------------------------------------------------------------*/
+static void
+temp_init(void)
+{
+  SENSORS_ACTIVATE(batmon_sensor);
+}
+/*---------------------------------------------------------------------------*/
+const mqtt_client_extension_t builtin_sensors_batmon_temp = {
+  temp_init,
+  temp_reading,
+};
+/*---------------------------------------------------------------------------*/
+static char *
+volt_reading(void)
+{
+  memset(tmp_buf, 0, TMP_BUF_SZ);
+  snprintf(tmp_buf, TMP_BUF_SZ, "\"Volt (mV)\":%d",
+           (batmon_sensor.value(BATMON_SENSOR_TYPE_VOLT) * 125) >> 5);
+  return tmp_buf;
+}
+/*---------------------------------------------------------------------------*/
+static void
+volt_init(void)
+{
+  SENSORS_ACTIVATE(batmon_sensor);
+}
+/*---------------------------------------------------------------------------*/
+const mqtt_client_extension_t builtin_sensors_batmon_volt = {
+  volt_init,
+  volt_reading,
+};
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/cpu/cc26x0-cc13x0/builtin-sensors.h b/examples/Smart_Switch/arch/cpu/cc26x0-cc13x0/builtin-sensors.h
new file mode 100644
index 000000000..38af3f62a
--- /dev/null
+++ b/examples/Smart_Switch/arch/cpu/cc26x0-cc13x0/builtin-sensors.h
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) 2017, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#ifndef BUILTIN_SENSORS_H_
+#define BUILTIN_SENSORS_H_
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "mqtt-client.h"
+/*---------------------------------------------------------------------------*/
+extern const mqtt_client_extension_t builtin_sensors_batmon_temp;
+extern const mqtt_client_extension_t builtin_sensors_batmon_volt;
+/*---------------------------------------------------------------------------*/
+#endif /* BUILTIN_SENSORS_H_ */
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/platform/cc2538dk/Makefile.cc2538dk b/examples/Smart_Switch/arch/platform/cc2538dk/Makefile.cc2538dk
new file mode 100644
index 000000000..fcdd0583a
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/cc2538dk/Makefile.cc2538dk
@@ -0,0 +1 @@
+MODULES_REL += arch/cpu/cc2538
diff --git a/examples/Smart_Switch/arch/platform/cc2538dk/als-extend.c b/examples/Smart_Switch/arch/platform/cc2538dk/als-extend.c
new file mode 100644
index 000000000..071ee0d8a
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/cc2538dk/als-extend.c
@@ -0,0 +1,61 @@
+/*
+ * Copyright (c) 2018, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "als-extend.h"
+#include "dev/als-sensor.h"
+
+#include <string.h>
+#include <stdio.h>
+/*---------------------------------------------------------------------------*/
+#define TMP_BUF_SZ 32
+/*---------------------------------------------------------------------------*/
+static char tmp_buf[TMP_BUF_SZ];
+/*---------------------------------------------------------------------------*/
+static void
+als_init(void)
+{
+  SENSORS_ACTIVATE(als_sensor);
+}
+/*---------------------------------------------------------------------------*/
+static char *
+als_reading(void)
+{
+  memset(tmp_buf, 0, TMP_BUF_SZ);
+  snprintf(tmp_buf, TMP_BUF_SZ, "\"ALS (raw)\":%d", als_sensor.value(0));
+  return tmp_buf;
+}
+/*---------------------------------------------------------------------------*/
+const mqtt_client_extension_t als_extend = {
+  als_init,
+  als_reading,
+};
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/platform/cc2538dk/als-extend.h b/examples/Smart_Switch/arch/platform/cc2538dk/als-extend.h
new file mode 100644
index 000000000..f9b8dc9b0
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/cc2538dk/als-extend.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2018, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#ifndef ALS_EXTEND_H_
+#define ALS_EXTEND_H_
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "mqtt-client.h"
+/*---------------------------------------------------------------------------*/
+extern const mqtt_client_extension_t als_extend;
+/*---------------------------------------------------------------------------*/
+#endif /* ALS_EXTEND_H_ */
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/platform/cc2538dk/module-macros.h b/examples/Smart_Switch/arch/platform/cc2538dk/module-macros.h
new file mode 100644
index 000000000..6f0bce121
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/cc2538dk/module-macros.h
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2018, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+/* Enable MQTT client extensions */
+#define MQTT_CLIENT_CONF_WITH_EXTENSIONS 1
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/platform/cc2538dk/mqtt-client-extensions.c b/examples/Smart_Switch/arch/platform/cc2538dk/mqtt-client-extensions.c
new file mode 100644
index 000000000..835b95fa6
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/cc2538dk/mqtt-client-extensions.c
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2017, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "builtin-sensors.h"
+#include "als-extend.h"
+#include "mqtt-client.h"
+
+#include <string.h>
+/*---------------------------------------------------------------------------*/
+MQTT_CLIENT_EXTENSIONS(&builtin_sensors_vdd3, &builtin_sensors_cc2538_temp,
+                       &als_extend);
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/platform/cc26x0-cc13x0/Makefile.cc26x0-cc13x0 b/examples/Smart_Switch/arch/platform/cc26x0-cc13x0/Makefile.cc26x0-cc13x0
new file mode 100644
index 000000000..7c74123c6
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/cc26x0-cc13x0/Makefile.cc26x0-cc13x0
@@ -0,0 +1 @@
+MODULES_REL += arch/cpu/cc26x0-cc13x0
diff --git a/examples/Smart_Switch/arch/platform/cc26x0-cc13x0/module-macros.h b/examples/Smart_Switch/arch/platform/cc26x0-cc13x0/module-macros.h
new file mode 100644
index 000000000..6f0bce121
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/cc26x0-cc13x0/module-macros.h
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2018, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+/* Enable MQTT client extensions */
+#define MQTT_CLIENT_CONF_WITH_EXTENSIONS 1
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/platform/cc26x0-cc13x0/mqtt-client-extensions.c b/examples/Smart_Switch/arch/platform/cc26x0-cc13x0/mqtt-client-extensions.c
new file mode 100644
index 000000000..559a4ee9b
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/cc26x0-cc13x0/mqtt-client-extensions.c
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2017, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "builtin-sensors.h"
+#include "mqtt-client.h"
+
+#include <string.h>
+/*---------------------------------------------------------------------------*/
+MQTT_CLIENT_EXTENSIONS(&builtin_sensors_batmon_temp,
+                       &builtin_sensors_batmon_volt);
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/platform/openmote/Makefile.openmote b/examples/Smart_Switch/arch/platform/openmote/Makefile.openmote
new file mode 100644
index 000000000..fcdd0583a
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/openmote/Makefile.openmote
@@ -0,0 +1 @@
+MODULES_REL += arch/cpu/cc2538
diff --git a/examples/Smart_Switch/arch/platform/openmote/module-macros.h b/examples/Smart_Switch/arch/platform/openmote/module-macros.h
new file mode 100644
index 000000000..097c26dd8
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/openmote/module-macros.h
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2017, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+/* Enable MQTT client extensions */
+#define MQTT_CLIENT_CONF_WITH_EXTENSIONS 1
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/platform/openmote/mqtt-client-extensions.c b/examples/Smart_Switch/arch/platform/openmote/mqtt-client-extensions.c
new file mode 100644
index 000000000..022c28e84
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/openmote/mqtt-client-extensions.c
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2017, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "builtin-sensors.h"
+#include "mqtt-client.h"
+
+#include <string.h>
+/*---------------------------------------------------------------------------*/
+MQTT_CLIENT_EXTENSIONS(&builtin_sensors_vdd3, &builtin_sensors_cc2538_temp);
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/platform/zoul/Makefile.zoul b/examples/Smart_Switch/arch/platform/zoul/Makefile.zoul
new file mode 100644
index 000000000..fcdd0583a
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/zoul/Makefile.zoul
@@ -0,0 +1 @@
+MODULES_REL += arch/cpu/cc2538
diff --git a/examples/Smart_Switch/arch/platform/zoul/module-macros.h b/examples/Smart_Switch/arch/platform/zoul/module-macros.h
new file mode 100644
index 000000000..6f0bce121
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/zoul/module-macros.h
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2018, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+/* Enable MQTT client extensions */
+#define MQTT_CLIENT_CONF_WITH_EXTENSIONS 1
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/arch/platform/zoul/mqtt-client-extensions.c b/examples/Smart_Switch/arch/platform/zoul/mqtt-client-extensions.c
new file mode 100644
index 000000000..022c28e84
--- /dev/null
+++ b/examples/Smart_Switch/arch/platform/zoul/mqtt-client-extensions.c
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2017, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "builtin-sensors.h"
+#include "mqtt-client.h"
+
+#include <string.h>
+/*---------------------------------------------------------------------------*/
+MQTT_CLIENT_EXTENSIONS(&builtin_sensors_vdd3, &builtin_sensors_cc2538_temp);
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/mqtt-client.c b/examples/Smart_Switch/mqtt-client.c
new file mode 100644
index 000000000..15fe5e004
--- /dev/null
+++ b/examples/Smart_Switch/mqtt-client.c
@@ -0,0 +1,967 @@
+/*
+ * Copyright (c) 2014, Texas Instruments Incorporated - http://www.ti.com/
+ * Copyright (c) 2017, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "net/routing/routing.h"
+#include "mqtt.h"
+#include "mqtt-prop.h"
+#include "net/ipv6/uip.h"
+#include "net/ipv6/uip-icmp6.h"
+#include "net/ipv6/sicslowpan.h"
+#include "sys/etimer.h"
+#include "sys/ctimer.h"
+#include "lib/sensors.h"
+#include "dev/button-hal.h"
+#include "dev/leds.h"
+#include "os/sys/log.h"
+#include "mqtt-client.h"
+
+#include <string.h>
+#include <strings.h>
+#include <stdarg.h>
+
+void hardfault_handler(void)
+{
+	printf("HARD FAULT\n");
+	*(uint32_t *)(0x400db3fc) ^= 1;
+}
+/*---------------------------------------------------------------------------*/
+#define LOG_MODULE "mqtt-client"
+#ifdef MQTT_CLIENT_CONF_LOG_LEVEL
+#define LOG_LEVEL MQTT_CLIENT_CONF_LOG_LEVEL
+#else
+#define LOG_LEVEL LOG_LEVEL_NONE
+#endif
+/*---------------------------------------------------------------------------*/
+/* Controls whether the example will work in IBM Watson IoT platform mode */
+#ifdef MQTT_CLIENT_CONF_WITH_IBM_WATSON
+#define MQTT_CLIENT_WITH_IBM_WATSON MQTT_CLIENT_CONF_WITH_IBM_WATSON
+#else
+#define MQTT_CLIENT_WITH_IBM_WATSON 0
+#endif
+/*---------------------------------------------------------------------------*/
+/* MQTT broker address. Ignored in Watson mode */
+#ifdef MQTT_CLIENT_CONF_BROKER_IP_ADDR
+#define MQTT_CLIENT_BROKER_IP_ADDR MQTT_CLIENT_CONF_BROKER_IP_ADDR
+#else
+#define MQTT_CLIENT_BROKER_IP_ADDR "fd00::1"
+#endif
+/*---------------------------------------------------------------------------*/
+/*
+ * MQTT Org ID.
+ *
+ * If it equals "quickstart", the client will connect without authentication.
+ * In all other cases, the client will connect with authentication mode.
+ *
+ * In Watson mode, the username will be "use-token-auth". In non-Watson mode
+ * the username will be MQTT_CLIENT_USERNAME.
+ *
+ * In all cases, the password will be MQTT_CLIENT_AUTH_TOKEN.
+ */
+#ifdef MQTT_CLIENT_CONF_ORG_ID
+#define MQTT_CLIENT_ORG_ID MQTT_CLIENT_CONF_ORG_ID
+#else
+#define MQTT_CLIENT_ORG_ID "quickstart"
+#endif
+/*---------------------------------------------------------------------------*/
+/* MQTT token */
+#ifdef MQTT_CLIENT_CONF_AUTH_TOKEN
+#define MQTT_CLIENT_AUTH_TOKEN MQTT_CLIENT_CONF_AUTH_TOKEN
+#else
+#define MQTT_CLIENT_AUTH_TOKEN "AUTHTOKEN"
+#endif
+/*---------------------------------------------------------------------------*/
+#if MQTT_CLIENT_WITH_IBM_WATSON
+/* With IBM Watson support */
+static const char *broker_ip = "0064:ff9b:0000:0000:0000:0000:b8ac:7cbd";
+#define MQTT_CLIENT_USERNAME "use-token-auth"
+
+#else /* MQTT_CLIENT_WITH_IBM_WATSON */
+/* Without IBM Watson support. To be used with other brokers, e.g. Mosquitto */
+static const char *broker_ip = MQTT_CLIENT_BROKER_IP_ADDR;
+
+#ifdef MQTT_CLIENT_CONF_USERNAME
+#define MQTT_CLIENT_USERNAME MQTT_CLIENT_CONF_USERNAME
+#else
+#define MQTT_CLIENT_USERNAME "use-token-auth"
+#endif
+
+#endif /* MQTT_CLIENT_WITH_IBM_WATSON */
+/*---------------------------------------------------------------------------*/
+#ifdef MQTT_CLIENT_CONF_STATUS_LED
+#define MQTT_CLIENT_STATUS_LED MQTT_CLIENT_CONF_STATUS_LED
+#else
+#define MQTT_CLIENT_STATUS_LED LEDS_GREEN
+#endif
+/*---------------------------------------------------------------------------*/
+#ifdef MQTT_CLIENT_CONF_WITH_EXTENSIONS
+#define MQTT_CLIENT_WITH_EXTENSIONS MQTT_CLIENT_CONF_WITH_EXTENSIONS
+#else
+#define MQTT_CLIENT_WITH_EXTENSIONS 0
+#endif
+/*---------------------------------------------------------------------------*/
+/*
+ * A timeout used when waiting for something to happen (e.g. to connect or to
+ * disconnect)
+ */
+#define STATE_MACHINE_PERIODIC     (CLOCK_SECOND >> 1)
+/*---------------------------------------------------------------------------*/
+/* Provide visible feedback via LEDS during various states */
+/* When connecting to broker */
+#define CONNECTING_LED_DURATION    (CLOCK_SECOND >> 2)
+
+/* Each time we try to publish */
+#define PUBLISH_LED_ON_DURATION    (CLOCK_SECOND)
+/*---------------------------------------------------------------------------*/
+/* Connections and reconnections */
+#define RETRY_FOREVER              0xFF
+#define RECONNECT_INTERVAL         (CLOCK_SECOND * 2)
+
+/*---------------------------------------------------------------------------*/
+/*
+ * Number of times to try reconnecting to the broker.
+ * Can be a limited number (e.g. 3, 10 etc) or can be set to RETRY_FOREVER
+ */
+#define RECONNECT_ATTEMPTS         RETRY_FOREVER
+#define CONNECTION_STABLE_TIME     (CLOCK_SECOND * 5)
+static struct timer connection_life;
+static uint8_t connect_attempt;
+/*---------------------------------------------------------------------------*/
+/* Various states */
+static uint8_t state;
+#define STATE_INIT            0
+#define STATE_REGISTERED      1
+#define STATE_CONNECTING      2
+#define STATE_CONNECTED       3
+#define STATE_PUBLISHING      4
+#define STATE_DISCONNECTED    5
+#define STATE_NEWCONFIG       6
+#define STATE_CONFIG_ERROR 0xFE
+#define STATE_ERROR        0xFF
+/*---------------------------------------------------------------------------*/
+#define CONFIG_ORG_ID_LEN        32
+#define CONFIG_TYPE_ID_LEN       32
+#define CONFIG_AUTH_TOKEN_LEN    32
+#define CONFIG_EVENT_TYPE_ID_LEN 32
+#define CONFIG_CMD_TYPE_LEN       8
+#define CONFIG_IP_ADDR_STR_LEN   64
+/*---------------------------------------------------------------------------*/
+/* A timeout used when waiting to connect to a network */
+#define NET_CONNECT_PERIODIC        (CLOCK_SECOND >> 2)
+#define NO_NET_LED_DURATION         (NET_CONNECT_PERIODIC >> 1)
+/*---------------------------------------------------------------------------*/
+/* Default configuration values */
+#define DEFAULT_TYPE_ID             "mqtt-client"
+#define DEFAULT_EVENT_TYPE_ID       "status"
+#define DEFAULT_SUBSCRIBE_CMD_TYPE  "+"
+#define DEFAULT_BROKER_PORT         1883
+#define DEFAULT_PUBLISH_INTERVAL    (30 * CLOCK_SECOND)
+#define DEFAULT_KEEP_ALIVE_TIMER    60
+#define DEFAULT_RSSI_MEAS_INTERVAL  (CLOCK_SECOND * 30)
+/*---------------------------------------------------------------------------*/
+#define MQTT_CLIENT_SENSOR_NONE     (void *)0xFFFFFFFF
+/*---------------------------------------------------------------------------*/
+/* Payload length of ICMPv6 echo requests used to measure RSSI with def rt */
+#define ECHO_REQ_PAYLOAD_LEN   20
+/*---------------------------------------------------------------------------*/
+PROCESS_NAME(mqtt_client_process);
+AUTOSTART_PROCESSES(&mqtt_client_process);
+/*---------------------------------------------------------------------------*/
+/**
+ * \brief Data structure declaration for the MQTT client configuration
+ */
+typedef struct mqtt_client_config {
+  char org_id[CONFIG_ORG_ID_LEN];
+  char type_id[CONFIG_TYPE_ID_LEN];
+  char auth_token[CONFIG_AUTH_TOKEN_LEN];
+  char event_type_id[CONFIG_EVENT_TYPE_ID_LEN];
+  char broker_ip[CONFIG_IP_ADDR_STR_LEN];
+  char cmd_type[CONFIG_CMD_TYPE_LEN];
+  clock_time_t pub_interval;
+  int def_rt_ping_interval;
+  uint16_t broker_port;
+} mqtt_client_config_t;
+/*---------------------------------------------------------------------------*/
+/* Maximum TCP segment size for outgoing segments of our socket */
+#define MAX_TCP_SEGMENT_SIZE    32
+/*---------------------------------------------------------------------------*/
+/*
+ * Buffers for Client ID and Topic.
+ * Make sure they are large enough to hold the entire respective string
+ *
+ * d:quickstart:status:EUI64 is 32 bytes long
+ * iot-2/evt/status/fmt/json is 25 bytes
+ * We also need space for the null termination
+ */
+#define BUFFER_SIZE 64
+static char client_id[BUFFER_SIZE];
+static char pub_topic[BUFFER_SIZE];
+static char sub_topic[BUFFER_SIZE];
+/*---------------------------------------------------------------------------*/
+/*
+ * The main MQTT buffers.
+ * We will need to increase if we start publishing more data.
+ */
+#define APP_BUFFER_SIZE 512
+static struct mqtt_connection conn;
+static char app_buffer[APP_BUFFER_SIZE];
+/*---------------------------------------------------------------------------*/
+#define QUICKSTART "quickstart"
+/*---------------------------------------------------------------------------*/
+static struct mqtt_message *msg_ptr = 0;
+static struct etimer publish_periodic_timer;
+static struct ctimer ct;
+static char *buf_ptr;
+static uint16_t seq_nr_value = 0;
+/*---------------------------------------------------------------------------*/
+/* Parent RSSI functionality */
+static struct uip_icmp6_echo_reply_notification echo_reply_notification;
+static struct etimer echo_request_timer;
+static int def_rt_rssi = 0;
+/*---------------------------------------------------------------------------*/
+static mqtt_client_config_t conf;
+/*---------------------------------------------------------------------------*/
+#if MQTT_CLIENT_WITH_EXTENSIONS
+extern const mqtt_client_extension_t *mqtt_client_extensions[];
+extern const uint8_t mqtt_client_extension_count;
+#else
+static const mqtt_client_extension_t *mqtt_client_extensions[] = { NULL };
+static const uint8_t mqtt_client_extension_count = 0;
+#endif
+/*---------------------------------------------------------------------------*/
+/* MQTTv5 */
+#if MQTT_5
+static uint8_t PUB_TOPIC_ALIAS;
+
+struct mqtt_prop_list *publish_props;
+
+/* Control whether or not to perform authentication (MQTTv5) */
+#define MQTT_5_AUTH_EN 0
+#if MQTT_5_AUTH_EN
+struct mqtt_prop_list *auth_props;
+#endif
+#endif
+/*---------------------------------------------------------------------------*/
+PROCESS(mqtt_client_process, "MQTT Client");
+/*---------------------------------------------------------------------------*/
+static bool
+have_connectivity(void)
+{
+  if(uip_ds6_get_global(ADDR_PREFERRED) == NULL ||
+     uip_ds6_defrt_choose() == NULL) {
+    return false;
+  }
+  return true;
+}
+/*---------------------------------------------------------------------------*/
+static int
+ipaddr_sprintf(char *buf, uint8_t buf_len, const uip_ipaddr_t *addr)
+{
+  uint16_t a;
+  uint8_t len = 0;
+  int i, f;
+  for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
+    a = (addr->u8[i] << 8) + addr->u8[i + 1];
+    if(a == 0 && f >= 0) {
+      if(f++ == 0) {
+        len += snprintf(&buf[len], buf_len - len, "::");
+      }
+    } else {
+      if(f > 0) {
+        f = -1;
+      } else if(i > 0) {
+        len += snprintf(&buf[len], buf_len - len, ":");
+      }
+      len += snprintf(&buf[len], buf_len - len, "%x", a);
+    }
+  }
+
+  return len;
+}
+/*---------------------------------------------------------------------------*/
+static void
+echo_reply_handler(uip_ipaddr_t *source, uint8_t ttl, uint8_t *data,
+                   uint16_t datalen)
+{
+  if(uip_ip6addr_cmp(source, uip_ds6_defrt_choose())) {
+    def_rt_rssi = (int16_t)uipbuf_get_attr(6);
+  }
+}
+/*---------------------------------------------------------------------------*/
+static void
+publish_led_off(void *d)
+{
+  leds_off(MQTT_CLIENT_STATUS_LED);
+}
+/*---------------------------------------------------------------------------*/
+static void
+pub_handler(const char *topic, uint16_t topic_len, const uint8_t *chunk,
+            uint16_t chunk_len)
+{
+  LOG_DBG("Pub Handler: topic='%s' (len=%u), chunk_len=%u, chunk='%s'\n", topic,
+          topic_len, chunk_len, chunk);
+  st_pub_handler(topic, topic_len, chunk, chunk_len);
+  /* If we don't like the length, ignore */
+  if(topic_len != 23 || chunk_len != 1) {
+    LOG_ERR("Incorrect topic or chunk len. Ignored\n");
+    return;
+  }
+
+  /* If the format != json, ignore */
+  if(strncmp(&topic[topic_len - 4], "json", 4) != 0) {
+    LOG_ERR("Incorrect format\n");
+  }
+
+  if(strncmp(&topic[10], "leds", 4) == 0) {
+    LOG_DBG("Received MQTT SUB\n");
+    if(chunk[0] == '1') {
+      leds_on(LEDS_RED);
+    } else if(chunk[0] == '0') {
+      leds_off(LEDS_RED);
+    }
+    return;
+  }
+}
+/*---------------------------------------------------------------------------*/
+static void
+mqtt_event(struct mqtt_connection *m, mqtt_event_t event, void *data)
+{
+  switch(event) {
+  case MQTT_EVENT_CONNECTED: {
+    LOG_DBG("Application has a MQTT connection\n");
+    timer_set(&connection_life, CONNECTION_STABLE_TIME);
+    state = STATE_CONNECTED;
+    break;
+  }
+  case MQTT_EVENT_DISCONNECTED:
+  case MQTT_EVENT_CONNECTION_REFUSED_ERROR: {
+    LOG_DBG("MQTT Disconnect. Reason %u\n", *((mqtt_event_t *)data));
+
+    state = STATE_DISCONNECTED;
+    process_poll(&mqtt_client_process);
+    break;
+  }
+  case MQTT_EVENT_PUBLISH: {
+    msg_ptr = data;
+
+    /* Implement first_flag in publish message? */
+    if(msg_ptr->first_chunk) {
+      msg_ptr->first_chunk = 0;
+      LOG_DBG("Application received publish for topic '%s'. Payload "
+              "size is %i bytes.\n", msg_ptr->topic, msg_ptr->payload_chunk_length);
+    }
+
+    pub_handler(msg_ptr->topic, strlen(msg_ptr->topic),
+                msg_ptr->payload_chunk, msg_ptr->payload_chunk_length);
+#if MQTT_5
+    /* Print any properties received along with the message */
+    mqtt_prop_print_input_props(m);
+#endif
+    break;
+  }
+  case MQTT_EVENT_SUBACK: {
+#if MQTT_31
+    LOG_DBG("Application is subscribed to topic successfully\n");
+#else
+    struct mqtt_suback_event *suback_event = (struct mqtt_suback_event *)data;
+
+    if(suback_event->success) {
+      LOG_DBG("Application is subscribed to topic successfully\n");
+    } else {
+      LOG_DBG("Application failed to subscribe to topic (ret code %x)\n", suback_event->return_code);
+    }
+#if MQTT_5
+    /* Print any properties received along with the message */
+    mqtt_prop_print_input_props(m);
+#endif
+#endif
+    break;
+  }
+  case MQTT_EVENT_UNSUBACK: {
+    LOG_DBG("Application is unsubscribed to topic successfully\n");
+    break;
+  }
+  case MQTT_EVENT_PUBACK: {
+    LOG_DBG("Publishing complete.\n");
+    break;
+  }
+#if MQTT_5_AUTH_EN
+  case MQTT_EVENT_AUTH: {
+    LOG_DBG("Continuing auth.\n");
+    struct mqtt_prop_auth_event *auth_event = (struct mqtt_prop_auth_event *)data;
+    break;
+  }
+#endif
+  default:
+    LOG_DBG("Application got a unhandled MQTT event: %i\n", event);
+    break;
+  }
+}
+/*---------------------------------------------------------------------------*/
+static int
+construct_pub_topic(void)
+{
+  int len = snprintf(pub_topic, BUFFER_SIZE, "iot-2/evt/%s/fmt/json",
+                     conf.event_type_id);
+
+  /* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
+  if(len < 0 || len >= BUFFER_SIZE) {
+    LOG_INFO("Pub Topic: %d, Buffer %d\n", len, BUFFER_SIZE);
+    return 0;
+  }
+
+#if MQTT_5
+  PUB_TOPIC_ALIAS = 1;
+#endif
+
+  return 1;
+}
+/*---------------------------------------------------------------------------*/
+static int
+construct_sub_topic(void)
+{
+  int len = snprintf(sub_topic, BUFFER_SIZE, "iot-2/cmd/%s/fmt/json",
+                     conf.cmd_type);
+
+  /* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
+  if(len < 0 || len >= BUFFER_SIZE) {
+    LOG_INFO("Sub Topic: %d, Buffer %d\n", len, BUFFER_SIZE);
+    return 0;
+  }
+
+  return 1;
+}
+/*---------------------------------------------------------------------------*/
+static int
+construct_client_id(void)
+{
+  int len = snprintf(client_id, BUFFER_SIZE, "d:%s:%s:%02x%02x%02x%02x%02x%02x",
+                     conf.org_id, conf.type_id,
+                     linkaddr_node_addr.u8[0], linkaddr_node_addr.u8[1],
+                     linkaddr_node_addr.u8[2], linkaddr_node_addr.u8[5],
+                     linkaddr_node_addr.u8[6], linkaddr_node_addr.u8[7]);
+
+  /* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
+  if(len < 0 || len >= BUFFER_SIZE) {
+    LOG_ERR("Client ID: %d, Buffer %d\n", len, BUFFER_SIZE);
+    return 0;
+  }
+
+  return 1;
+}
+/*---------------------------------------------------------------------------*/
+static void
+update_config(void)
+{
+  if(construct_client_id() == 0) {
+    /* Fatal error. Client ID larger than the buffer */
+    state = STATE_CONFIG_ERROR;
+    return;
+  }
+
+  if(construct_sub_topic() == 0) {
+    /* Fatal error. Topic larger than the buffer */
+    state = STATE_CONFIG_ERROR;
+    return;
+  }
+
+  if(construct_pub_topic() == 0) {
+    /* Fatal error. Topic larger than the buffer */
+    state = STATE_CONFIG_ERROR;
+    return;
+  }
+
+  /* Reset the counter */
+  seq_nr_value = 0;
+
+  state = STATE_INIT;
+
+  /*
+   * Schedule next timer event ASAP
+   *
+   * If we entered an error state then we won't do anything when it fires.
+   *
+   * Since the error at this stage is a config error, we will only exit this
+   * error state if we get a new config.
+   */
+  etimer_set(&publish_periodic_timer, 0);
+
+#if MQTT_5
+  LIST_STRUCT_INIT(&(conn.will), properties);
+
+  mqtt_props_init();
+#endif
+
+  return;
+}
+/*---------------------------------------------------------------------------*/
+static int
+init_config()
+{
+  /* Populate configuration with default values */
+  memset(&conf, 0, sizeof(mqtt_client_config_t));
+
+  memcpy(conf.org_id, MQTT_CLIENT_ORG_ID, strlen(MQTT_CLIENT_ORG_ID));
+  memcpy(conf.type_id, DEFAULT_TYPE_ID, strlen(DEFAULT_TYPE_ID));
+  memcpy(conf.auth_token, MQTT_CLIENT_AUTH_TOKEN,
+         strlen(MQTT_CLIENT_AUTH_TOKEN));
+  memcpy(conf.event_type_id, DEFAULT_EVENT_TYPE_ID,
+         strlen(DEFAULT_EVENT_TYPE_ID));
+  memcpy(conf.broker_ip, broker_ip, strlen(broker_ip));
+  memcpy(conf.cmd_type, DEFAULT_SUBSCRIBE_CMD_TYPE, 1);
+
+  conf.broker_port = DEFAULT_BROKER_PORT;
+  conf.pub_interval = DEFAULT_PUBLISH_INTERVAL;
+  conf.def_rt_ping_interval = DEFAULT_RSSI_MEAS_INTERVAL;
+
+  return 1;
+}
+/*---------------------------------------------------------------------------*/
+static void
+subscribe(void)
+{
+  /* Publish MQTT topic in IBM quickstart format */
+  mqtt_status_t status;
+
+#if MQTT_5
+  status = mqtt_subscribe(&conn, NULL, sub_topic, MQTT_QOS_LEVEL_0,
+                          MQTT_NL_OFF, MQTT_RAP_OFF, MQTT_RET_H_SEND_ALL,
+                          MQTT_PROP_LIST_NONE);
+#else
+  status = mqtt_subscribe(&conn, NULL, sub_topic, MQTT_QOS_LEVEL_0);
+#endif
+
+  LOG_DBG("Subscribing!\n");
+  if(status == MQTT_STATUS_OUT_QUEUE_FULL) {
+    LOG_ERR("Tried to subscribe but command queue was full!\n");
+  }
+}
+
+int st_sub(char *topic)
+{
+  /* Publish MQTT topic in IBM quickstart format */
+  mqtt_status_t status;
+  status = mqtt_subscribe(&conn, NULL, topic, MQTT_QOS_LEVEL_0);
+  LOG_DBG("SmartThings Subscribing!\n");
+  if(status == MQTT_STATUS_OUT_QUEUE_FULL) {
+    LOG_ERR("Tried to subscribe but command queue was full!\n");
+    return MQTT_STATUS_OUT_QUEUE_FULL;
+  }
+  return status;
+}
+/*---------------------------------------------------------------------------*/
+static void
+publish(void)
+{
+  /* Publish MQTT topic in IBM quickstart format */
+  int len;
+  int remaining = APP_BUFFER_SIZE;
+  int i;
+  char def_rt_str[64];
+#if MQTT_5
+  static uint8_t prop_err = 1;
+#endif
+
+  seq_nr_value++;
+
+  buf_ptr = app_buffer;
+
+  len = snprintf(buf_ptr, remaining,
+                 "{"
+                 "\"d\":{"
+                 "\"Platform\":\""CONTIKI_TARGET_STRING"\","
+#ifdef CONTIKI_BOARD_STRING
+                 "\"Board\":\""CONTIKI_BOARD_STRING"\","
+#endif
+                 "\"Seq #\":%d,"
+                 "\"Uptime (sec)\":%lu",
+                 seq_nr_value, clock_seconds());
+
+  if(len < 0 || len >= remaining) {
+    LOG_ERR("Buffer too short. Have %d, need %d + \\0\n", remaining,
+            len);
+    return;
+  }
+
+  remaining -= len;
+  buf_ptr += len;
+
+  /* Put our Default route's string representation in a buffer */
+  memset(def_rt_str, 0, sizeof(def_rt_str));
+  ipaddr_sprintf(def_rt_str, sizeof(def_rt_str), uip_ds6_defrt_choose());
+
+  len = snprintf(buf_ptr, remaining,
+                 ",\"Def Route\":\"%s\",\"RSSI (dBm)\":%d",
+                 def_rt_str, def_rt_rssi);
+
+  if(len < 0 || len >= remaining) {
+    LOG_ERR("Buffer too short. Have %d, need %d + \\0\n", remaining,
+            len);
+    return;
+  }
+  remaining -= len;
+  buf_ptr += len;
+
+  for(i = 0; i < mqtt_client_extension_count; i++) {
+    len = snprintf(buf_ptr, remaining, ",%s",
+                   mqtt_client_extensions[i]->value());
+
+    if(len < 0 || len >= remaining) {
+      LOG_ERR("Buffer too short. Have %d, need %d + \\0\n", remaining,
+              len);
+      return;
+    }
+    remaining -= len;
+    buf_ptr += len;
+  }
+
+  len = snprintf(buf_ptr, remaining, "}}");
+
+  if(len < 0 || len >= remaining) {
+    LOG_ERR("Buffer too short. Have %d, need %d + \\0\n", remaining,
+            len);
+    return;
+  }
+
+#if MQTT_5
+  /* Only send full topic name with the first PUBLISH
+   * Afterwards, only use topic alias
+   */
+  if(seq_nr_value == 1) {
+    mqtt_publish(&conn, NULL, pub_topic, (uint8_t *)app_buffer,
+                 strlen(app_buffer), MQTT_QOS_LEVEL_0, MQTT_RETAIN_OFF,
+                 PUB_TOPIC_ALIAS, MQTT_TOPIC_ALIAS_OFF,
+                 publish_props);
+
+    prop_err = mqtt_prop_register(&publish_props,
+                                  NULL,
+                                  MQTT_FHDR_MSG_TYPE_PUBLISH,
+                                  MQTT_VHDR_PROP_TOPIC_ALIAS,
+                                  PUB_TOPIC_ALIAS);
+  } else {
+    mqtt_publish(&conn, NULL, pub_topic, (uint8_t *)app_buffer,
+                 strlen(app_buffer), MQTT_QOS_LEVEL_0, MQTT_RETAIN_OFF,
+                 PUB_TOPIC_ALIAS, (mqtt_topic_alias_en_t) !prop_err,
+                 publish_props);
+  }
+#else
+  mqtt_publish(&conn, NULL, pub_topic, (uint8_t *)app_buffer,
+               strlen(app_buffer), MQTT_QOS_LEVEL_0, MQTT_RETAIN_OFF);
+#endif
+
+  LOG_DBG("Publish!\n");
+}
+void st_pub(char *topic, char *buf) {
+  mqtt_publish(&conn, NULL, topic, (uint8_t *)buf,
+               strlen(buf), MQTT_QOS_LEVEL_0, MQTT_RETAIN_OFF);
+  LOG_DBG("Publish!\n");
+}
+/*---------------------------------------------------------------------------*/
+static void
+connect_to_broker(void)
+{
+  /* Connect to MQTT server */
+  mqtt_connect(&conn, conf.broker_ip, conf.broker_port,
+               (conf.pub_interval * 3) / CLOCK_SECOND,
+#if MQTT_5
+               MQTT_CLEAN_SESSION_ON,
+               MQTT_PROP_LIST_NONE);
+#else
+               MQTT_CLEAN_SESSION_ON);
+#endif
+
+  state = STATE_CONNECTING;
+}
+/*---------------------------------------------------------------------------*/
+#if MQTT_5_AUTH_EN
+static void
+send_auth(struct mqtt_prop_auth_event *auth_info, mqtt_auth_type_t auth_type)
+{
+  mqtt_prop_clear_prop_list(&auth_props);
+
+  if(auth_info->auth_method.length) {
+    (void)mqtt_prop_register(&auth_props,
+                             NULL,
+                             MQTT_FHDR_MSG_TYPE_AUTH,
+                             MQTT_VHDR_PROP_AUTH_METHOD,
+                             auth_info->auth_method.string);
+  }
+
+  if(auth_info->auth_data.len) {
+    (void)mqtt_prop_register(&auth_props,
+                             NULL,
+                             MQTT_FHDR_MSG_TYPE_AUTH,
+                             MQTT_VHDR_PROP_AUTH_DATA,
+                             auth_info->auth_data.data,
+                             auth_info->auth_data.len);
+  }
+
+  /* Connect to MQTT server */
+  mqtt_auth(&conn, auth_type, auth_props);
+
+  if(state != STATE_CONNECTING) {
+    LOG_DBG("MQTT reauthenticating\n");
+  }
+}
+#endif
+/*---------------------------------------------------------------------------*/
+static void
+ping_parent(void)
+{
+  if(have_connectivity()) {
+    uip_icmp6_send(uip_ds6_defrt_choose(), ICMP6_ECHO_REQUEST, 0,
+                   ECHO_REQ_PAYLOAD_LEN);
+  } else {
+    LOG_WARN("ping_parent() is called while we don't have connectivity\n");
+  }
+}
+/*---------------------------------------------------------------------------*/
+static void
+state_machine(void)
+{
+  switch(state) {
+  case STATE_INIT:
+    /* If we have just been configured register MQTT connection */
+    mqtt_register(&conn, &mqtt_client_process, client_id, mqtt_event,
+                  MAX_TCP_SEGMENT_SIZE);
+
+    /*
+     * If we are not using the quickstart service (thus we are an IBM
+     * registered device), we need to provide user name and password
+     */
+    if(strncasecmp(conf.org_id, QUICKSTART, strlen(conf.org_id)) != 0) {
+      if(strlen(conf.auth_token) == 0) {
+        LOG_ERR("User name set, but empty auth token\n");
+        state = STATE_ERROR;
+        break;
+      } else {
+        mqtt_set_username_password(&conn, MQTT_CLIENT_USERNAME,
+                                   conf.auth_token);
+      }
+    }
+
+    /* _register() will set auto_reconnect. We don't want that. */
+    conn.auto_reconnect = 0;
+    connect_attempt = 1;
+
+#if MQTT_5
+    mqtt_prop_create_list(&publish_props);
+
+    /* this will be sent with every publish packet */
+    (void)mqtt_prop_register(&publish_props,
+                             NULL,
+                             MQTT_FHDR_MSG_TYPE_PUBLISH,
+                             MQTT_VHDR_PROP_USER_PROP,
+                             "Contiki", "v4.5+");
+
+    mqtt_prop_print_list(publish_props, MQTT_VHDR_PROP_ANY);
+#endif
+
+    state = STATE_REGISTERED;
+    LOG_DBG("Init MQTT version %d\n", MQTT_PROTOCOL_VERSION);
+    /* Continue */
+  case STATE_REGISTERED:
+    if(have_connectivity()) {
+      /* Registered and with a public IP. Connect */
+      LOG_DBG("Registered. Connect attempt %u\n", connect_attempt);
+      ping_parent();
+      connect_to_broker();
+    } else {
+      leds_on(MQTT_CLIENT_STATUS_LED);
+      ctimer_set(&ct, NO_NET_LED_DURATION, publish_led_off, NULL);
+    }
+    etimer_set(&publish_periodic_timer, NET_CONNECT_PERIODIC);
+    return;
+    break;
+  case STATE_CONNECTING:
+    leds_on(MQTT_CLIENT_STATUS_LED);
+    ctimer_set(&ct, CONNECTING_LED_DURATION, publish_led_off, NULL);
+    /* Not connected yet. Wait */
+    LOG_DBG("Connecting (%u)\n", connect_attempt);
+    break;
+  case STATE_CONNECTED:
+    /* Don't subscribe unless we are a registered device */
+    if(strncasecmp(conf.org_id, QUICKSTART, strlen(conf.org_id)) == 0) {
+      LOG_DBG("Using 'quickstart': Skipping subscribe\n");
+      state = STATE_PUBLISHING;
+    }
+    // start the SmartThings APP
+    app_main();
+    /* Continue */
+  case STATE_PUBLISHING:
+    /* If the timer expired, the connection is stable. */
+    if(timer_expired(&connection_life)) {
+      /*
+       * Intentionally using 0 here instead of 1: We want RECONNECT_ATTEMPTS
+       * attempts if we disconnect after a successful connect
+       */
+      connect_attempt = 0;
+    }
+
+    if(mqtt_ready(&conn) && conn.out_buffer_sent) {
+      /* Connected. Publish */
+      if(state == STATE_CONNECTED) {
+        subscribe();
+        state = STATE_PUBLISHING;
+      } else {
+        leds_on(MQTT_CLIENT_STATUS_LED);
+        ctimer_set(&ct, PUBLISH_LED_ON_DURATION, publish_led_off, NULL);
+        LOG_DBG("Publishing\n");
+        publish();
+      }
+      etimer_set(&publish_periodic_timer, conf.pub_interval);
+      /* Return here so we don't end up rescheduling the timer */
+      return;
+    } else {
+      /*
+       * Our publish timer fired, but some MQTT packet is already in flight
+       * (either not sent at all, or sent but not fully ACKd).
+       *
+       * This can mean that we have lost connectivity to our broker or that
+       * simply there is some network delay. In both cases, we refuse to
+       * trigger a new message and we wait for TCP to either ACK the entire
+       * packet after retries, or to timeout and notify us.
+       */
+      LOG_DBG("Publishing... (MQTT state=%d, q=%u)\n", conn.state,
+              conn.out_queue_full);
+    }
+    break;
+  case STATE_DISCONNECTED:
+    LOG_DBG("Disconnected\n");
+    if(connect_attempt < RECONNECT_ATTEMPTS ||
+       RECONNECT_ATTEMPTS == RETRY_FOREVER) {
+      /* Disconnect and backoff */
+      clock_time_t interval;
+#if MQTT_5
+      mqtt_disconnect(&conn, MQTT_PROP_LIST_NONE);
+#else
+      mqtt_disconnect(&conn);
+#endif
+      connect_attempt++;
+
+      interval = connect_attempt < 3 ? RECONNECT_INTERVAL << connect_attempt :
+        RECONNECT_INTERVAL << 3;
+
+      LOG_DBG("Disconnected. Attempt %u in %lu ticks\n", connect_attempt,
+              (unsigned long)interval);
+
+      etimer_set(&publish_periodic_timer, interval);
+
+      state = STATE_REGISTERED;
+      return;
+    } else {
+      /* Max reconnect attempts reached. Enter error state */
+      state = STATE_ERROR;
+      LOG_DBG("Aborting connection after %u attempts\n", connect_attempt - 1);
+    }
+    break;
+  case STATE_CONFIG_ERROR:
+    /* Idle away. The only way out is a new config */
+    LOG_ERR("Bad configuration.\n");
+    return;
+  case STATE_ERROR:
+  default:
+    leds_on(MQTT_CLIENT_STATUS_LED);
+    /*
+     * 'default' should never happen.
+     *
+     * If we enter here it's because of some error. Stop timers. The only thing
+     * that can bring us out is a new config event
+     */
+    LOG_ERR("Default case: State=0x%02x\n", state);
+    return;
+  }
+
+  /* If we didn't return so far, reschedule ourselves */
+  etimer_set(&publish_periodic_timer, STATE_MACHINE_PERIODIC);
+}
+/*---------------------------------------------------------------------------*/
+static void
+init_extensions(void)
+{
+  int i;
+
+  for(i = 0; i < mqtt_client_extension_count; i++) {
+    if(mqtt_client_extensions[i]->init) {
+      mqtt_client_extensions[i]->init();
+    }
+  }
+}
+/*---------------------------------------------------------------------------*/
+PROCESS_THREAD(mqtt_client_process, ev, data)
+{
+
+  PROCESS_BEGIN();
+
+  printf("MQTT Client Process\n");
+
+  if(init_config() != 1) {
+    PROCESS_EXIT();
+  }
+
+  init_extensions();
+
+  update_config();
+
+  def_rt_rssi = 0x8000000;
+  uip_icmp6_echo_reply_callback_add(&echo_reply_notification,
+                                    echo_reply_handler);
+  etimer_set(&echo_request_timer, conf.def_rt_ping_interval);
+
+  /* Main loop */
+  while(1) {
+
+    PROCESS_YIELD();
+
+    if(ev == button_hal_release_event &&
+       ((button_hal_button_t *)data)->unique_id == BUTTON_HAL_ID_BUTTON_ZERO) {
+      if(state == STATE_ERROR) {
+        connect_attempt = 1;
+        state = STATE_REGISTERED;
+      }
+    }
+
+    if((ev == PROCESS_EVENT_TIMER && data == &publish_periodic_timer) ||
+       ev == PROCESS_EVENT_POLL ||
+       (ev == button_hal_release_event &&
+        ((button_hal_button_t *)data)->unique_id == BUTTON_HAL_ID_BUTTON_ZERO)) {
+      state_machine();
+    }
+
+    if(ev == PROCESS_EVENT_TIMER && data == &echo_request_timer) {
+      ping_parent();
+      etimer_set(&echo_request_timer, conf.def_rt_ping_interval);
+    }
+  }
+
+  PROCESS_END();
+}
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/mqtt-client.h b/examples/Smart_Switch/mqtt-client.h
new file mode 100644
index 000000000..663fac005
--- /dev/null
+++ b/examples/Smart_Switch/mqtt-client.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2017, George Oikonomou - http://www.spd.gr
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#ifndef MQTT_CLIENT_H_
+#define MQTT_CLIENT_H_
+/*---------------------------------------------------------------------------*/
+#include <string.h>
+/*---------------------------------------------------------------------------*/
+// self add functions for smartthings
+#include "st/mqtt_head.h"
+int st_sub(char *topic);
+void st_pub(char *topic, char *buf);
+/*---------------------------------------------------------------------------*/
+typedef struct mqtt_client_extension_s {
+  void (*init)(void);
+  char *(*value)(void);
+} mqtt_client_extension_t;
+/*---------------------------------------------------------------------------*/
+#define MQTT_CLIENT_EXTENSIONS(...) \
+  const mqtt_client_extension_t *mqtt_client_extensions[] = {__VA_ARGS__}; \
+  const uint8_t mqtt_client_extension_count = \
+    (sizeof(mqtt_client_extensions) / sizeof(mqtt_client_extensions[0]));
+/*---------------------------------------------------------------------------*/
+#endif /* MQTT_CLIENT_H_ */
+/*---------------------------------------------------------------------------*/
diff --git a/examples/Smart_Switch/project-conf.h b/examples/Smart_Switch/project-conf.h
new file mode 100644
index 000000000..6fc825afb
--- /dev/null
+++ b/examples/Smart_Switch/project-conf.h
@@ -0,0 +1,81 @@
+/*
+ * Copyright (c) 2012, Texas Instruments Incorporated - http://www.ti.com/
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#ifndef PROJECT_CONF_H_
+#define PROJECT_CONF_H_
+/*---------------------------------------------------------------------------*/
+/* Enable TCP */
+#define UIP_CONF_TCP 1
+
+/* Change to 1 to use with the IBM Watson IoT platform */
+#define MQTT_CLIENT_CONF_WITH_IBM_WATSON 0
+
+/*
+ * The IPv6 address of the MQTT broker to connect to.
+ * Ignored if MQTT_CLIENT_CONF_WITH_IBM_WATSON is 1
+ */
+#define MQTT_CLIENT_CONF_BROKER_IP_ADDR "fd00::1"
+
+/*
+ * The Organisation ID.
+ *
+ * When in Watson mode, the example will default to Org ID "quickstart" and
+ * will connect using non-authenticated mode. If you want to use registered
+ * devices, set your Org ID here and then make sure you set the correct token
+ * through MQTT_CLIENT_CONF_AUTH_TOKEN.
+ */
+#ifndef MQTT_CLIENT_CONF_ORG_ID
+#define MQTT_CLIENT_CONF_ORG_ID "quickstart"
+#endif
+
+/*
+ * The MQTT username.
+ *
+ * Ignored in Watson mode: In this mode the username is always "use-token-auth"
+ */
+#define MQTT_CLIENT_CONF_USERNAME "mqtt-client-username"
+
+/*
+ * The MQTT auth token (password) used when connecting to the MQTT broker.
+ *
+ * Used with as well as without Watson.
+ *
+ * Transported in cleartext!
+ */
+#define MQTT_CLIENT_CONF_AUTH_TOKEN "AUTHTOKEN"
+
+#define HEAPMEM_CONF_ARENA_SIZE 1000
+#define HEAPMEM_CONF_REALLOC 1
+#define HEAPMEM_CONF_MAX_ZONES 2
+/*---------------------------------------------------------------------------*/
+#endif /* PROJECT_CONF_H_ */
+/*---------------------------------------------------------------------------*/
+/** @} */
diff --git a/examples/Smart_Switch/sdkconfig.h b/examples/Smart_Switch/sdkconfig.h
new file mode 100644
index 000000000..e8490ecb2
--- /dev/null
+++ b/examples/Smart_Switch/sdkconfig.h
@@ -0,0 +1,35 @@
+
+#ifndef _SDKCONFIG_H_
+#define _SDKCONFIG_H_
+
+#define CONFIG_STDK_IOT_CORE_EASYSETUP_HTTP_USE_SOCKET_API
+#define CONFIG_STDK_IOT_CORE_EASYSETUP_DISCOVERY_SSID
+#define CONFIG_MBEDTLS_XTEA_C 1
+#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA 1
+#define CONFIG_MBEDTLS_AES_C 1
+#define CONFIG_MBEDTLS_RSA_BITLEN_MIN 2048
+#define CONFIG_MBEDTLS_SSL_PROTO_TLS1 1
+#define CONFIG_MBEDTLS_ECDH_C 1
+#define CONFIG_MBEDTLS_PEM_WRITE_C 1
+#define CONFIG_MBEDTLS_SSL_OUT_CONTENT_LEN 4096
+#define CONFIG_STDK_IOT_CORE_USE_MBEDTLS 1
+#define CONFIG_SSL_USING_MBEDTLS 1
+#define CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED 1
+#define CONFIG_MBEDTLS_ECP_C 1
+#define CONFIG_MBEDTLS_RC4_DISABLED 1
+#define CONFIG_MBEDTLS_X509_CRL_PARSE_C 1
+#define CONFIG_LIBSODIUM_USE_MBEDTLS_SHA 1
+#define CONFIG_MBEDTLS_RSA_BITLEN_2048 1
+#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_1 1
+#define CONFIG_MBEDTLS_X509_CSR_PARSE_C 1
+#define CONFIG_MBEDTLS_PEM_PARSE_C 1
+#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 1
+#define CONFIG_MBEDTLS_TLS_ENABLED 1
+#define CONFIG_MBEDTLS_TLS_CLIENT 1
+#define CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED 1
+#define CONFIG_MBEDTLS_HAVE_TIME 1
+#define CONFIG_MBEDTLS_TLS_CLIENT_ONLY 1
+#define CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN 6144
+#define CONFIG_STDK_MQTT_USE_SSL
+
+#endif
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper.h b/examples/Smart_Switch/st/caps/iot_caps_helper.h
new file mode 100644
index 000000000..9f4fd96d1
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper.h
@@ -0,0 +1,46 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+#ifndef _IOT_CAPS_HELPER_
+#define _IOT_CAPS_HELPER_
+
+#define _ATTR_BIT_VALUE_MIN 0
+#define _ATTR_BIT_VALUE_MAX 1
+#define _ATTR_BIT_VALUE_REQUIRED	2
+#define _ATTR_BIT_UNIT_REQUIRED	3
+#define _ATTR_BIT_MAX_LENGTH	4
+#define _ATTR_BIT_VALUE_ARRAY	5
+
+#define ATTR_SET_VALUE_MIN (1 << _ATTR_BIT_VALUE_MIN)
+#define ATTR_SET_VALUE_MAX (1 << _ATTR_BIT_VALUE_MAX)
+#define ATTR_SET_VALUE_REQUIRED (1 << _ATTR_BIT_VALUE_REQUIRED)
+#define ATTR_SET_UNIT_REQUIRED (1 << _ATTR_BIT_UNIT_REQUIRED)
+#define ATTR_SET_MAX_LENGTH	(1 << _ATTR_BIT_MAX_LENGTH)
+#define ATTR_SET_VALUE_ARRAY	(1 << _ATTR_BIT_VALUE_ARRAY)
+
+#define VALUE_TYPE_INTEGER 1
+#define VALUE_TYPE_NUMBER 2
+#define VALUE_TYPE_STRING 3
+#define VALUE_TYPE_OBJECT 4
+#define VALUE_TYPE_BOOLEAN 5
+
+#endif /* _IOT_CAPS_HELPER_ */
+
+// self add
+typedef void* IOT_CAP_HANDLE;
+typedef void* IOT_CTX;
+// end
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_accelerationSensor.h b/examples/Smart_Switch/st/caps/iot_caps_helper_accelerationSensor.h
new file mode 100644
index 000000000..225234df7
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_accelerationSensor.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_ACCELERATION_SENSOR_
+#define _IOT_CAPS_HELPER_ACCELERATION_SENSOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_ACCELERATIONSENSOR_ACCELERATION_VALUE_ACTIVE,
+    CAP_ENUM_ACCELERATIONSENSOR_ACCELERATION_VALUE_INACTIVE,
+    CAP_ENUM_ACCELERATIONSENSOR_ACCELERATION_VALUE_MAX
+};
+
+static const struct iot_caps_accelerationSensor {
+    const char *id;
+    const struct accelerationSensor_attr_acceleration {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_ACCELERATIONSENSOR_ACCELERATION_VALUE_MAX];
+        const char *value_active;
+        const char *value_inactive;
+    } attr_acceleration;
+} caps_helper_accelerationSensor = {
+    .id = "accelerationSensor",
+    .attr_acceleration = {
+        .name = "acceleration",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"active", "inactive"},
+        .value_active = "active",
+        .value_inactive = "inactive",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_ACCELERATION_SENSOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_activityLightingMode.h b/examples/Smart_Switch/st/caps/iot_caps_helper_activityLightingMode.h
new file mode 100644
index 000000000..4b0028369
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_activityLightingMode.h
@@ -0,0 +1,80 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_ACTIVITY_LIGHTING_MODE_
+#define _IOT_CAPS_HELPER_ACTIVITY_LIGHTING_MODE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_ACTIVITYLIGHTINGMODE_LIGHTINGMODE_VALUE_READING,
+    CAP_ENUM_ACTIVITYLIGHTINGMODE_LIGHTINGMODE_VALUE_WRITING,
+    CAP_ENUM_ACTIVITYLIGHTINGMODE_LIGHTINGMODE_VALUE_COMPUTER,
+    CAP_ENUM_ACTIVITYLIGHTINGMODE_LIGHTINGMODE_VALUE_NIGHT,
+    CAP_ENUM_ACTIVITYLIGHTINGMODE_LIGHTINGMODE_VALUE_SLEEPPREPARATION,
+    CAP_ENUM_ACTIVITYLIGHTINGMODE_LIGHTINGMODE_VALUE_DAY,
+    CAP_ENUM_ACTIVITYLIGHTINGMODE_LIGHTINGMODE_VALUE_COZY,
+    CAP_ENUM_ACTIVITYLIGHTINGMODE_LIGHTINGMODE_VALUE_SOFT,
+    CAP_ENUM_ACTIVITYLIGHTINGMODE_LIGHTINGMODE_VALUE_MAX
+};
+
+static const struct iot_caps_activityLightingMode {
+    const char *id;
+    const struct activityLightingMode_attr_lightingMode {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_ACTIVITYLIGHTINGMODE_LIGHTINGMODE_VALUE_MAX];
+        const char *value_reading;
+        const char *value_writing;
+        const char *value_computer;
+        const char *value_night;
+        const char *value_sleepPreparation;
+        const char *value_day;
+        const char *value_cozy;
+        const char *value_soft;
+    } attr_lightingMode;
+    const struct activityLightingMode_cmd_setLightingMode { const char* name; } cmd_setLightingMode;
+} caps_helper_activityLightingMode = {
+    .id = "activityLightingMode",
+    .attr_lightingMode = {
+        .name = "lightingMode",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"reading", "writing", "computer", "night", "sleepPreparation", "day", "cozy", "soft"},
+        .value_reading = "reading",
+        .value_writing = "writing",
+        .value_computer = "computer",
+        .value_night = "night",
+        .value_sleepPreparation = "sleepPreparation",
+        .value_day = "day",
+        .value_cozy = "cozy",
+        .value_soft = "soft",
+    },
+    .cmd_setLightingMode = { .name = "setLightingMode" }, // arguments: lightingMode(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_ACTIVITY_LIGHTING_MODE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_airQualitySensor.h b/examples/Smart_Switch/st/caps/iot_caps_helper_airQualitySensor.h
new file mode 100644
index 000000000..3a8bce2ed
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_airQualitySensor.h
@@ -0,0 +1,61 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_AIR_QUALITY_SENSOR_
+#define _IOT_CAPS_HELPER_AIR_QUALITY_SENSOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_AIRQUALITYSENSOR_AIRQUALITY_UNIT_CAQI,
+    CAP_ENUM_AIRQUALITYSENSOR_AIRQUALITY_UNIT_MAX
+};
+
+static const struct iot_caps_airQualitySensor {
+    const char *id;
+    const struct airQualitySensor_attr_airQuality {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_AIRQUALITYSENSOR_AIRQUALITY_UNIT_MAX];
+        const char *unit_CAQI;
+        const int min;
+        const int max;
+    } attr_airQuality;
+} caps_helper_airQualitySensor = {
+    .id = "airQualitySensor",
+    .attr_airQuality = {
+        .name = "airQuality",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .units = {"CAQI"},
+        .unit_CAQI = "CAQI",
+        .min = 0,
+        .max = 100,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_AIR_QUALITY_SENSOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_alarm.h b/examples/Smart_Switch/st/caps/iot_caps_helper_alarm.h
new file mode 100644
index 000000000..7188d94db
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_alarm.h
@@ -0,0 +1,74 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_ALARM_
+#define _IOT_CAPS_HELPER_ALARM_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_ALARM_ALARM_VALUE_BOTH,
+    CAP_ENUM_ALARM_ALARM_VALUE_OFF,
+    CAP_ENUM_ALARM_ALARM_VALUE_SIREN,
+    CAP_ENUM_ALARM_ALARM_VALUE_STROBE,
+    CAP_ENUM_ALARM_ALARM_VALUE_MAX
+};
+
+static const struct iot_caps_alarm {
+    const char *id;
+    const struct alarm_attr_alarm {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_ALARM_ALARM_VALUE_MAX];
+        const char *value_both;
+        const char *value_off;
+        const char *value_siren;
+        const char *value_strobe;
+    } attr_alarm;
+    const struct alarm_cmd_both { const char* name; } cmd_both;
+    const struct alarm_cmd_siren { const char* name; } cmd_siren;
+    const struct alarm_cmd_off { const char* name; } cmd_off;
+    const struct alarm_cmd_strobe { const char* name; } cmd_strobe;
+} caps_helper_alarm = {
+    .id = "alarm",
+    .attr_alarm = {
+        .name = "alarm",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"both", "off", "siren", "strobe"},
+        .value_both = "both",
+        .value_off = "off",
+        .value_siren = "siren",
+        .value_strobe = "strobe",
+    },
+    .cmd_both = { .name = "both" },
+    .cmd_siren = { .name = "siren" },
+    .cmd_off = { .name = "off" },
+    .cmd_strobe = { .name = "strobe" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_ALARM_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_audioMute.h b/examples/Smart_Switch/st/caps/iot_caps_helper_audioMute.h
new file mode 100644
index 000000000..a06371356
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_audioMute.h
@@ -0,0 +1,66 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_AUDIO_MUTE_
+#define _IOT_CAPS_HELPER_AUDIO_MUTE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_AUDIOMUTE_MUTE_VALUE_MUTED,
+    CAP_ENUM_AUDIOMUTE_MUTE_VALUE_UNMUTED,
+    CAP_ENUM_AUDIOMUTE_MUTE_VALUE_MAX
+};
+
+static const struct iot_caps_audioMute {
+    const char *id;
+    const struct audioMute_attr_mute {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_AUDIOMUTE_MUTE_VALUE_MAX];
+        const char *value_muted;
+        const char *value_unmuted;
+    } attr_mute;
+    const struct audioMute_cmd_unmute { const char* name; } cmd_unmute;
+    const struct audioMute_cmd_setMute { const char* name; } cmd_setMute;
+    const struct audioMute_cmd_mute { const char* name; } cmd_mute;
+} caps_helper_audioMute = {
+    .id = "audioMute",
+    .attr_mute = {
+        .name = "mute",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"muted", "unmuted"},
+        .value_muted = "muted",
+        .value_unmuted = "unmuted",
+    },
+    .cmd_unmute = { .name = "unmute" },
+    .cmd_setMute = { .name = "setMute" }, // arguments: state(string) 
+    .cmd_mute = { .name = "mute" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_AUDIO_MUTE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_audioVolume.h b/examples/Smart_Switch/st/caps/iot_caps_helper_audioVolume.h
new file mode 100644
index 000000000..b4f0cf89b
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_audioVolume.h
@@ -0,0 +1,67 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_AUDIO_VOLUME_
+#define _IOT_CAPS_HELPER_AUDIO_VOLUME_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_AUDIOVOLUME_VOLUME_UNIT_PERCENT,
+    CAP_ENUM_AUDIOVOLUME_VOLUME_UNIT_MAX
+};
+
+static const struct iot_caps_audioVolume {
+    const char *id;
+    const struct audioVolume_attr_volume {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_AUDIOVOLUME_VOLUME_UNIT_MAX];
+        const char *unit_percent;
+        const int min;
+        const int max;
+    } attr_volume;
+    const struct audioVolume_cmd_volumeDown { const char* name; } cmd_volumeDown;
+    const struct audioVolume_cmd_volumeUp { const char* name; } cmd_volumeUp;
+    const struct audioVolume_cmd_setVolume { const char* name; } cmd_setVolume;
+} caps_helper_audioVolume = {
+    .id = "audioVolume",
+    .attr_volume = {
+        .name = "volume",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .units = {"%"},
+        .unit_percent = "%",
+        .min = 0,
+        .max = 100,
+    },
+    .cmd_volumeDown = { .name = "volumeDown" },
+    .cmd_volumeUp = { .name = "volumeUp" },
+    .cmd_setVolume = { .name = "setVolume" }, // arguments: volume(integer) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_AUDIO_VOLUME_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_battery.h b/examples/Smart_Switch/st/caps/iot_caps_helper_battery.h
new file mode 100644
index 000000000..8c54a1575
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_battery.h
@@ -0,0 +1,61 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_BATTERY_
+#define _IOT_CAPS_HELPER_BATTERY_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_BATTERY_BATTERY_UNIT_PERCENT,
+    CAP_ENUM_BATTERY_BATTERY_UNIT_MAX
+};
+
+static const struct iot_caps_battery {
+    const char *id;
+    const struct battery_attr_battery {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_BATTERY_BATTERY_UNIT_MAX];
+        const char *unit_percent;
+        const int min;
+        const int max;
+    } attr_battery;
+} caps_helper_battery = {
+    .id = "battery",
+    .attr_battery = {
+        .name = "battery",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .units = {"%"},
+        .unit_percent = "%",
+        .min = 0,
+        .max = 100,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_BATTERY_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_bodyMassIndexMeasurement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_bodyMassIndexMeasurement.h
new file mode 100644
index 000000000..4a4c4f75b
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_bodyMassIndexMeasurement.h
@@ -0,0 +1,59 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_BODY_MASS_INDEX_MEASUREMENT_
+#define _IOT_CAPS_HELPER_BODY_MASS_INDEX_MEASUREMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_BODYMASSINDEXMEASUREMENT_BMIMEASUREMENT_UNIT_KG_PER_M2,
+    CAP_ENUM_BODYMASSINDEXMEASUREMENT_BMIMEASUREMENT_UNIT_MAX
+};
+
+static const struct iot_caps_bodyMassIndexMeasurement {
+    const char *id;
+    const struct bodyMassIndexMeasurement_attr_bmiMeasurement {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_BODYMASSINDEXMEASUREMENT_BMIMEASUREMENT_UNIT_MAX];
+        const char *unit_kg_per_m2;
+        const double min;
+    } attr_bmiMeasurement;
+} caps_helper_bodyMassIndexMeasurement = {
+    .id = "bodyMassIndexMeasurement",
+    .attr_bmiMeasurement = {
+        .name = "bmiMeasurement",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"kg/m^2"},
+        .unit_kg_per_m2 = "kg/m^2",
+        .min = 0,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_BODY_MASS_INDEX_MEASUREMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_bodyWeightMeasurement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_bodyWeightMeasurement.h
new file mode 100644
index 000000000..644839a88
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_bodyWeightMeasurement.h
@@ -0,0 +1,65 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_BODY_WEIGHT_MEASUREMENT_
+#define _IOT_CAPS_HELPER_BODY_WEIGHT_MEASUREMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_BODYWEIGHTMEASUREMENT_BODYWEIGHTMEASUREMENT_UNIT_KG,
+    CAP_ENUM_BODYWEIGHTMEASUREMENT_BODYWEIGHTMEASUREMENT_UNIT_LBS,
+    CAP_ENUM_BODYWEIGHTMEASUREMENT_BODYWEIGHTMEASUREMENT_UNIT_CATTY,
+    CAP_ENUM_BODYWEIGHTMEASUREMENT_BODYWEIGHTMEASUREMENT_UNIT_MAX
+};
+
+static const struct iot_caps_bodyWeightMeasurement {
+    const char *id;
+    const struct bodyWeightMeasurement_attr_bodyWeightMeasurement {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_BODYWEIGHTMEASUREMENT_BODYWEIGHTMEASUREMENT_UNIT_MAX];
+        const char *unit_kg;
+        const char *unit_lbs;
+        const char *unit_catty;
+        const double min;
+    } attr_bodyWeightMeasurement;
+} caps_helper_bodyWeightMeasurement = {
+    .id = "bodyWeightMeasurement",
+    .attr_bodyWeightMeasurement = {
+        .name = "bodyWeightMeasurement",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED | ATTR_SET_UNIT_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"kg", "lbs", "斤"},
+        .unit_kg = "kg",
+        .unit_lbs = "lbs",
+        .unit_catty = "斤",
+        .min = 0,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_BODY_WEIGHT_MEASUREMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_button.h b/examples/Smart_Switch/st/caps/iot_caps_helper_button.h
new file mode 100644
index 000000000..c308bdc08
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_button.h
@@ -0,0 +1,189 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_BUTTON_
+#define _IOT_CAPS_HELPER_BUTTON_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define CAP_ENUM_BUTTON_SUPPORTEDBUTTONVALUES_VALUE_MAX 22
+enum {
+    CAP_ENUM_BUTTON_BUTTON_VALUE_PUSHED,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_HELD,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_DOUBLE,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_PUSHED_2X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_PUSHED_3X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_PUSHED_4X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_PUSHED_5X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_PUSHED_6X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_DOWN,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_DOWN_2X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_DOWN_3X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_DOWN_4X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_DOWN_5X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_DOWN_6X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_DOWN_HOLD,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_UP,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_UP_2X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_UP_3X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_UP_4X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_UP_5X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_UP_6X,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_UP_HOLD,
+    CAP_ENUM_BUTTON_BUTTON_VALUE_MAX
+};
+
+static const struct iot_caps_button {
+    const char *id;
+    const struct button_attr_supportedButtonValues {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_BUTTON_SUPPORTEDBUTTONVALUES_VALUE_MAX];
+        const char *value_pushed;
+        const char *value_held;
+        const char *value_double;
+        const char *value_pushed_2x;
+        const char *value_pushed_3x;
+        const char *value_pushed_4x;
+        const char *value_pushed_5x;
+        const char *value_pushed_6x;
+        const char *value_down;
+        const char *value_down_2x;
+        const char *value_down_3x;
+        const char *value_down_4x;
+        const char *value_down_5x;
+        const char *value_down_6x;
+        const char *value_down_hold;
+        const char *value_up;
+        const char *value_up_2x;
+        const char *value_up_3x;
+        const char *value_up_4x;
+        const char *value_up_5x;
+        const char *value_up_6x;
+        const char *value_up_hold;
+    } attr_supportedButtonValues;
+    const struct button_attr_button {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_BUTTON_BUTTON_VALUE_MAX];
+        const char *value_pushed;
+        const char *value_held;
+        const char *value_double;
+        const char *value_pushed_2x;
+        const char *value_pushed_3x;
+        const char *value_pushed_4x;
+        const char *value_pushed_5x;
+        const char *value_pushed_6x;
+        const char *value_down;
+        const char *value_down_2x;
+        const char *value_down_3x;
+        const char *value_down_4x;
+        const char *value_down_5x;
+        const char *value_down_6x;
+        const char *value_down_hold;
+        const char *value_up;
+        const char *value_up_2x;
+        const char *value_up_3x;
+        const char *value_up_4x;
+        const char *value_up_5x;
+        const char *value_up_6x;
+        const char *value_up_hold;
+    } attr_button;
+    const struct button_attr_numberOfButtons {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const int min;
+    } attr_numberOfButtons;
+} caps_helper_button = {
+    .id = "button",
+    .attr_supportedButtonValues = {
+        .name = "supportedButtonValues",
+        .property = ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"pushed", "held", "double", "pushed_2x", "pushed_3x", "pushed_4x", "pushed_5x", "pushed_6x", "down", "down_2x", "down_3x", "down_4x", "down_5x", "down_6x", "down_hold", "up", "up_2x", "up_3x", "up_4x", "up_5x", "up_6x", "up_hold"},
+        .value_pushed = "pushed",
+        .value_held = "held",
+        .value_double = "double",
+        .value_pushed_2x = "pushed_2x",
+        .value_pushed_3x = "pushed_3x",
+        .value_pushed_4x = "pushed_4x",
+        .value_pushed_5x = "pushed_5x",
+        .value_pushed_6x = "pushed_6x",
+        .value_down = "down",
+        .value_down_2x = "down_2x",
+        .value_down_3x = "down_3x",
+        .value_down_4x = "down_4x",
+        .value_down_5x = "down_5x",
+        .value_down_6x = "down_6x",
+        .value_down_hold = "down_hold",
+        .value_up = "up",
+        .value_up_2x = "up_2x",
+        .value_up_3x = "up_3x",
+        .value_up_4x = "up_4x",
+        .value_up_5x = "up_5x",
+        .value_up_6x = "up_6x",
+        .value_up_hold = "up_hold",
+    },
+    .attr_button = {
+        .name = "button",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"pushed", "held", "double", "pushed_2x", "pushed_3x", "pushed_4x", "pushed_5x", "pushed_6x", "down", "down_2x", "down_3x", "down_4x", "down_5x", "down_6x", "down_hold", "up", "up_2x", "up_3x", "up_4x", "up_5x", "up_6x", "up_hold"},
+        .value_pushed = "pushed",
+        .value_held = "held",
+        .value_double = "double",
+        .value_pushed_2x = "pushed_2x",
+        .value_pushed_3x = "pushed_3x",
+        .value_pushed_4x = "pushed_4x",
+        .value_pushed_5x = "pushed_5x",
+        .value_pushed_6x = "pushed_6x",
+        .value_down = "down",
+        .value_down_2x = "down_2x",
+        .value_down_3x = "down_3x",
+        .value_down_4x = "down_4x",
+        .value_down_5x = "down_5x",
+        .value_down_6x = "down_6x",
+        .value_down_hold = "down_hold",
+        .value_up = "up",
+        .value_up_2x = "up_2x",
+        .value_up_3x = "up_3x",
+        .value_up_4x = "up_4x",
+        .value_up_5x = "up_5x",
+        .value_up_6x = "up_6x",
+        .value_up_hold = "up_hold",
+    },
+    .attr_numberOfButtons = {
+        .name = "numberOfButtons",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .min = 0,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_BUTTON_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_carbonDioxideHealthConcern.h b/examples/Smart_Switch/st/caps/iot_caps_helper_carbonDioxideHealthConcern.h
new file mode 100755
index 000000000..84b468503
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_carbonDioxideHealthConcern.h
@@ -0,0 +1,72 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2022 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_CARBON_DIOXIDE_HEALTH_CONCERN_
+#define _IOT_CAPS_HELPER_CARBON_DIOXIDE_HEALTH_CONCERN_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_CARBONDIOXIDEHEALTHCONCERN_CARBONDIOXIDEHEALTHCONCERN_VALUE_GOOD,
+    CAP_ENUM_CARBONDIOXIDEHEALTHCONCERN_CARBONDIOXIDEHEALTHCONCERN_VALUE_MODERATE,
+    CAP_ENUM_CARBONDIOXIDEHEALTHCONCERN_CARBONDIOXIDEHEALTHCONCERN_VALUE_SLIGHTLYUNHEALTHY,
+    CAP_ENUM_CARBONDIOXIDEHEALTHCONCERN_CARBONDIOXIDEHEALTHCONCERN_VALUE_UNHEALTHY,
+    CAP_ENUM_CARBONDIOXIDEHEALTHCONCERN_CARBONDIOXIDEHEALTHCONCERN_VALUE_VERYUNHEALTHY,
+    CAP_ENUM_CARBONDIOXIDEHEALTHCONCERN_CARBONDIOXIDEHEALTHCONCERN_VALUE_HAZARDOUS,
+    CAP_ENUM_CARBONDIOXIDEHEALTHCONCERN_CARBONDIOXIDEHEALTHCONCERN_VALUE_MAX
+};
+
+static const struct iot_caps_carbonDioxideHealthConcern {
+    const char *id;
+    const struct carbonDioxideHealthConcern_attr_carbonDioxideHealthConcern {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_CARBONDIOXIDEHEALTHCONCERN_CARBONDIOXIDEHEALTHCONCERN_VALUE_MAX];
+        const char *value_good;
+        const char *value_moderate;
+        const char *value_slightlyUnhealthy;
+        const char *value_unhealthy;
+        const char *value_veryUnhealthy;
+        const char *value_hazardous;
+    } attr_carbonDioxideHealthConcern;
+} caps_helper_carbonDioxideHealthConcern = {
+    .id = "carbonDioxideHealthConcern",
+    .attr_carbonDioxideHealthConcern = {
+        .name = "carbonDioxideHealthConcern",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"good", "moderate", "slightlyUnhealthy", "unhealthy", "veryUnhealthy", "hazardous"},
+        .value_good = "good",
+        .value_moderate = "moderate",
+        .value_slightlyUnhealthy = "slightlyUnhealthy",
+        .value_unhealthy = "unhealthy",
+        .value_veryUnhealthy = "veryUnhealthy",
+        .value_hazardous = "hazardous",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_CARBON_DIOXIDE_HEALTH_CONCERN_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_carbonDioxideMeasurement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_carbonDioxideMeasurement.h
new file mode 100644
index 000000000..dc1f534ad
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_carbonDioxideMeasurement.h
@@ -0,0 +1,61 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_CARBON_DIOXIDE_MEASUREMENT_
+#define _IOT_CAPS_HELPER_CARBON_DIOXIDE_MEASUREMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_CARBONDIOXIDEMEASUREMENT_CARBONDIOXIDE_UNIT_PPM,
+    CAP_ENUM_CARBONDIOXIDEMEASUREMENT_CARBONDIOXIDE_UNIT_MAX
+};
+
+static const struct iot_caps_carbonDioxideMeasurement {
+    const char *id;
+    const struct carbonDioxideMeasurement_attr_carbonDioxide {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_CARBONDIOXIDEMEASUREMENT_CARBONDIOXIDE_UNIT_MAX];
+        const char *unit_ppm;
+        const int min;
+        const int max;
+    } attr_carbonDioxide;
+} caps_helper_carbonDioxideMeasurement = {
+    .id = "carbonDioxideMeasurement",
+    .attr_carbonDioxide = {
+        .name = "carbonDioxide",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .units = {"ppm"},
+        .unit_ppm = "ppm",
+        .min = 0,
+        .max = 1000000,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_CARBON_DIOXIDE_MEASUREMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_carbonMonoxideDetector.h b/examples/Smart_Switch/st/caps/iot_caps_helper_carbonMonoxideDetector.h
new file mode 100644
index 000000000..f5f0bf455
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_carbonMonoxideDetector.h
@@ -0,0 +1,63 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_CARBON_MONOXIDE_DETECTOR_
+#define _IOT_CAPS_HELPER_CARBON_MONOXIDE_DETECTOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_CARBONMONOXIDEDETECTOR_CARBONMONOXIDE_VALUE_CLEAR,
+    CAP_ENUM_CARBONMONOXIDEDETECTOR_CARBONMONOXIDE_VALUE_DETECTED,
+    CAP_ENUM_CARBONMONOXIDEDETECTOR_CARBONMONOXIDE_VALUE_TESTED,
+    CAP_ENUM_CARBONMONOXIDEDETECTOR_CARBONMONOXIDE_VALUE_MAX
+};
+
+static const struct iot_caps_carbonMonoxideDetector {
+    const char *id;
+    const struct carbonMonoxideDetector_attr_carbonMonoxide {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_CARBONMONOXIDEDETECTOR_CARBONMONOXIDE_VALUE_MAX];
+        const char *value_clear;
+        const char *value_detected;
+        const char *value_tested;
+    } attr_carbonMonoxide;
+} caps_helper_carbonMonoxideDetector = {
+    .id = "carbonMonoxideDetector",
+    .attr_carbonMonoxide = {
+        .name = "carbonMonoxide",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"clear", "detected", "tested"},
+        .value_clear = "clear",
+        .value_detected = "detected",
+        .value_tested = "tested",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_CARBON_MONOXIDE_DETECTOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_carbonMonoxideMeasurement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_carbonMonoxideMeasurement.h
new file mode 100644
index 000000000..d7a723947
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_carbonMonoxideMeasurement.h
@@ -0,0 +1,61 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_CARBON_MONOXIDE_MEASUREMENT_
+#define _IOT_CAPS_HELPER_CARBON_MONOXIDE_MEASUREMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_CARBONMONOXIDEMEASUREMENT_CARBONMONOXIDELEVEL_UNIT_PPM,
+    CAP_ENUM_CARBONMONOXIDEMEASUREMENT_CARBONMONOXIDELEVEL_UNIT_MAX
+};
+
+static const struct iot_caps_carbonMonoxideMeasurement {
+    const char *id;
+    const struct carbonMonoxideMeasurement_attr_carbonMonoxideLevel {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_CARBONMONOXIDEMEASUREMENT_CARBONMONOXIDELEVEL_UNIT_MAX];
+        const char *unit_ppm;
+        const double min;
+        const double max;
+    } attr_carbonMonoxideLevel;
+} caps_helper_carbonMonoxideMeasurement = {
+    .id = "carbonMonoxideMeasurement",
+    .attr_carbonMonoxideLevel = {
+        .name = "carbonMonoxideLevel",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED | ATTR_SET_UNIT_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"ppm"},
+        .unit_ppm = "ppm",
+        .min = 0,
+        .max = 1000000,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_CARBON_MONOXIDE_MEASUREMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_colorControl.h b/examples/Smart_Switch/st/caps/iot_caps_helper_colorControl.h
new file mode 100644
index 000000000..2491036e8
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_colorControl.h
@@ -0,0 +1,80 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_COLOR_CONTROL_
+#define _IOT_CAPS_HELPER_COLOR_CONTROL_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static const struct iot_caps_colorControl {
+    const char *id;
+    const struct colorControl_attr_color {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const unsigned int max_length;
+    } attr_color;
+    const struct colorControl_attr_hue {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const double min;
+    } attr_hue;
+    const struct colorControl_attr_saturation {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const double min;
+    } attr_saturation;
+    const struct colorControl_cmd_setHue { const char* name; } cmd_setHue;
+    const struct colorControl_cmd_setColor { const char* name; } cmd_setColor;
+    const struct colorControl_cmd_setSaturation { const char* name; } cmd_setSaturation;
+} caps_helper_colorControl = {
+    .id = "colorControl",
+    .attr_color = {
+        .name = "color",
+        .property = ATTR_SET_MAX_LENGTH,
+        .valueType = VALUE_TYPE_STRING,
+        .max_length = 255,
+    },
+    .attr_hue = {
+        .name = "hue",
+        .property = ATTR_SET_VALUE_MIN,
+        .valueType = VALUE_TYPE_NUMBER,
+        .min = 0,
+    },
+    .attr_saturation = {
+        .name = "saturation",
+        .property = ATTR_SET_VALUE_MIN,
+        .valueType = VALUE_TYPE_NUMBER,
+        .min = 0,
+    },
+    .cmd_setHue = { .name = "setHue" }, // arguments: hue(number) 
+    .cmd_setColor = { .name = "setColor" }, // arguments: color(object) 
+    .cmd_setSaturation = { .name = "setSaturation" }, // arguments: saturation(number) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_COLOR_CONTROL_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_colorTemperature.h b/examples/Smart_Switch/st/caps/iot_caps_helper_colorTemperature.h
new file mode 100644
index 000000000..51e82b928
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_colorTemperature.h
@@ -0,0 +1,63 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_COLOR_TEMPERATURE_
+#define _IOT_CAPS_HELPER_COLOR_TEMPERATURE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_COLORTEMPERATURE_COLORTEMPERATURE_UNIT_K,
+    CAP_ENUM_COLORTEMPERATURE_COLORTEMPERATURE_UNIT_MAX
+};
+
+static const struct iot_caps_colorTemperature {
+    const char *id;
+    const struct colorTemperature_attr_colorTemperature {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_COLORTEMPERATURE_COLORTEMPERATURE_UNIT_MAX];
+        const char *unit_K;
+        const int min;
+        const int max;
+    } attr_colorTemperature;
+    const struct colorTemperature_cmd_setColorTemperature { const char* name; } cmd_setColorTemperature;
+} caps_helper_colorTemperature = {
+    .id = "colorTemperature",
+    .attr_colorTemperature = {
+        .name = "colorTemperature",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .units = {"K"},
+        .unit_K = "K",
+        .min = 1,
+        .max = 30000,
+    },
+    .cmd_setColorTemperature = { .name = "setColorTemperature" }, // arguments: temperature(integer) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_COLOR_TEMPERATURE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_contactSensor.h b/examples/Smart_Switch/st/caps/iot_caps_helper_contactSensor.h
new file mode 100644
index 000000000..9a3e5ced0
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_contactSensor.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_CONTACT_SENSOR_
+#define _IOT_CAPS_HELPER_CONTACT_SENSOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_CONTACTSENSOR_CONTACT_VALUE_CLOSED,
+    CAP_ENUM_CONTACTSENSOR_CONTACT_VALUE_OPEN,
+    CAP_ENUM_CONTACTSENSOR_CONTACT_VALUE_MAX
+};
+
+static const struct iot_caps_contactSensor {
+    const char *id;
+    const struct contactSensor_attr_contact {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_CONTACTSENSOR_CONTACT_VALUE_MAX];
+        const char *value_closed;
+        const char *value_open;
+    } attr_contact;
+} caps_helper_contactSensor = {
+    .id = "contactSensor",
+    .attr_contact = {
+        .name = "contact",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"closed", "open"},
+        .value_closed = "closed",
+        .value_open = "open",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_CONTACT_SENSOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_dishwasherOperatingState.h b/examples/Smart_Switch/st/caps/iot_caps_helper_dishwasherOperatingState.h
new file mode 100644
index 000000000..08cbc8c73
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_dishwasherOperatingState.h
@@ -0,0 +1,143 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_DISHWASHER_OPERATING_STATE_
+#define _IOT_CAPS_HELPER_DISHWASHER_OPERATING_STATE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define CAP_ENUM_DISHWASHEROPERATINGSTATE_SUPPORTEDMACHINESTATES_VALUE_MAX 3
+enum {
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_MACHINESTATE_VALUE_PAUSE,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_MACHINESTATE_VALUE_RUN,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_MACHINESTATE_VALUE_STOP,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_MACHINESTATE_VALUE_MAX
+};
+
+enum {
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_AIRWASH,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_COOLING,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_DRYING,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_FINISH,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_PREDRAIN,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_PREWASH,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_RINSE,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_SPIN,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_UNKNOWN,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_WASH,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_WRINKLEPREVENT,
+    CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_MAX
+};
+
+static const struct iot_caps_dishwasherOperatingState {
+    const char *id;
+    const struct dishwasherOperatingState_attr_completionTime {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_completionTime;
+    const struct dishwasherOperatingState_attr_supportedMachineStates {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_DISHWASHEROPERATINGSTATE_SUPPORTEDMACHINESTATES_VALUE_MAX];
+        const char *value_pause;
+        const char *value_run;
+        const char *value_stop;
+    } attr_supportedMachineStates;
+    const struct dishwasherOperatingState_attr_machineState {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_DISHWASHEROPERATINGSTATE_MACHINESTATE_VALUE_MAX];
+        const char *value_pause;
+        const char *value_run;
+        const char *value_stop;
+    } attr_machineState;
+    const struct dishwasherOperatingState_attr_dishwasherJobState {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_DISHWASHEROPERATINGSTATE_DISHWASHERJOBSTATE_VALUE_MAX];
+        const char *value_airwash;
+        const char *value_cooling;
+        const char *value_drying;
+        const char *value_finish;
+        const char *value_preDrain;
+        const char *value_prewash;
+        const char *value_rinse;
+        const char *value_spin;
+        const char *value_unknown;
+        const char *value_wash;
+        const char *value_wrinklePrevent;
+    } attr_dishwasherJobState;
+    const struct dishwasherOperatingState_cmd_setMachineState { const char* name; } cmd_setMachineState;
+} caps_helper_dishwasherOperatingState = {
+    .id = "dishwasherOperatingState",
+    .attr_completionTime = {
+        .name = "completionTime",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .attr_supportedMachineStates = {
+        .name = "supportedMachineStates",
+        .property = ATTR_SET_VALUE_REQUIRED | ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"pause", "run", "stop"},
+        .value_pause = "pause",
+        .value_run = "run",
+        .value_stop = "stop",
+    },
+    .attr_machineState = {
+        .name = "machineState",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"pause", "run", "stop"},
+        .value_pause = "pause",
+        .value_run = "run",
+        .value_stop = "stop",
+    },
+    .attr_dishwasherJobState = {
+        .name = "dishwasherJobState",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"airwash", "cooling", "drying", "finish", "preDrain", "prewash", "rinse", "spin", "unknown", "wash", "wrinklePrevent"},
+        .value_airwash = "airwash",
+        .value_cooling = "cooling",
+        .value_drying = "drying",
+        .value_finish = "finish",
+        .value_preDrain = "preDrain",
+        .value_prewash = "prewash",
+        .value_rinse = "rinse",
+        .value_spin = "spin",
+        .value_unknown = "unknown",
+        .value_wash = "wash",
+        .value_wrinklePrevent = "wrinklePrevent",
+    },
+    .cmd_setMachineState = { .name = "setMachineState" }, // arguments: state(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_DISHWASHER_OPERATING_STATE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_doorControl.h b/examples/Smart_Switch/st/caps/iot_caps_helper_doorControl.h
new file mode 100644
index 000000000..b216e03a4
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_doorControl.h
@@ -0,0 +1,73 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_DOOR_CONTROL_
+#define _IOT_CAPS_HELPER_DOOR_CONTROL_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_DOORCONTROL_DOOR_VALUE_CLOSED,
+    CAP_ENUM_DOORCONTROL_DOOR_VALUE_CLOSING,
+    CAP_ENUM_DOORCONTROL_DOOR_VALUE_OPEN,
+    CAP_ENUM_DOORCONTROL_DOOR_VALUE_OPENING,
+    CAP_ENUM_DOORCONTROL_DOOR_VALUE_UNKNOWN,
+    CAP_ENUM_DOORCONTROL_DOOR_VALUE_MAX
+};
+
+static const struct iot_caps_doorControl {
+    const char *id;
+    const struct doorControl_attr_door {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_DOORCONTROL_DOOR_VALUE_MAX];
+        const char *value_closed;
+        const char *value_closing;
+        const char *value_open;
+        const char *value_opening;
+        const char *value_unknown;
+    } attr_door;
+    const struct doorControl_cmd_close { const char* name; } cmd_close;
+    const struct doorControl_cmd_open { const char* name; } cmd_open;
+} caps_helper_doorControl = {
+    .id = "doorControl",
+    .attr_door = {
+        .name = "door",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"closed", "closing", "open", "opening", "unknown"},
+        .value_closed = "closed",
+        .value_closing = "closing",
+        .value_open = "open",
+        .value_opening = "opening",
+        .value_unknown = "unknown",
+    },
+    .cmd_close = { .name = "close" },
+    .cmd_open = { .name = "open" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_DOOR_CONTROL_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_dryerOperatingState.h b/examples/Smart_Switch/st/caps/iot_caps_helper_dryerOperatingState.h
new file mode 100644
index 000000000..537afa95b
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_dryerOperatingState.h
@@ -0,0 +1,146 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2021 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_DRYER_OPERATING_STATE_
+#define _IOT_CAPS_HELPER_DRYER_OPERATING_STATE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define CAP_ENUM_DRYEROPERATINGSTATE_SUPPORTEDMACHINESTATES_VALUE_MAX 3
+enum {
+    CAP_ENUM_DRYEROPERATINGSTATE_MACHINESTATE_VALUE_PAUSE,
+    CAP_ENUM_DRYEROPERATINGSTATE_MACHINESTATE_VALUE_RUN,
+    CAP_ENUM_DRYEROPERATINGSTATE_MACHINESTATE_VALUE_STOP,
+    CAP_ENUM_DRYEROPERATINGSTATE_MACHINESTATE_VALUE_MAX
+};
+
+enum {
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_COOLING,
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_DELAYWASH,
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_DRYING,
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_FINISHED,
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_NONE,
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_REFRESHING,
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_WEIGHTSENSING,
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_WRINKLEPREVENT,
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_DEHUMIDIFYING,
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_AIDRYING,
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_SANITIZING,
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_INTERNALCARE,
+    CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_MAX
+};
+
+static const struct iot_caps_dryerOperatingState {
+    const char *id;
+    const struct dryerOperatingState_attr_completionTime {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_completionTime;
+    const struct dryerOperatingState_attr_supportedMachineStates {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_DRYEROPERATINGSTATE_SUPPORTEDMACHINESTATES_VALUE_MAX];
+        const char *value_pause;
+        const char *value_run;
+        const char *value_stop;
+    } attr_supportedMachineStates;
+    const struct dryerOperatingState_attr_machineState {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_DRYEROPERATINGSTATE_MACHINESTATE_VALUE_MAX];
+        const char *value_pause;
+        const char *value_run;
+        const char *value_stop;
+    } attr_machineState;
+    const struct dryerOperatingState_attr_dryerJobState {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_DRYEROPERATINGSTATE_DRYERJOBSTATE_VALUE_MAX];
+        const char *value_cooling;
+        const char *value_delayWash;
+        const char *value_drying;
+        const char *value_finished;
+        const char *value_none;
+        const char *value_refreshing;
+        const char *value_weightSensing;
+        const char *value_wrinklePrevent;
+        const char *value_dehumidifying;
+        const char *value_aIDrying;
+        const char *value_sanitizing;
+        const char *value_internalCare;
+    } attr_dryerJobState;
+    const struct dryerOperatingState_cmd_setMachineState { const char* name; } cmd_setMachineState;
+} caps_helper_dryerOperatingState = {
+    .id = "dryerOperatingState",
+    .attr_completionTime = {
+        .name = "completionTime",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .attr_supportedMachineStates = {
+        .name = "supportedMachineStates",
+        .property = ATTR_SET_VALUE_REQUIRED | ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"pause", "run", "stop"},
+        .value_pause = "pause",
+        .value_run = "run",
+        .value_stop = "stop",
+    },
+    .attr_machineState = {
+        .name = "machineState",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"pause", "run", "stop"},
+        .value_pause = "pause",
+        .value_run = "run",
+        .value_stop = "stop",
+    },
+    .attr_dryerJobState = {
+        .name = "dryerJobState",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"cooling", "delayWash", "drying", "finished", "none", "refreshing", "weightSensing", "wrinklePrevent", "dehumidifying", "aIDrying", "sanitizing", "internalCare"},
+        .value_cooling = "cooling",
+        .value_delayWash = "delayWash",
+        .value_drying = "drying",
+        .value_finished = "finished",
+        .value_none = "none",
+        .value_refreshing = "refreshing",
+        .value_weightSensing = "weightSensing",
+        .value_wrinklePrevent = "wrinklePrevent",
+        .value_dehumidifying = "dehumidifying",
+        .value_aIDrying = "aIDrying",
+        .value_sanitizing = "sanitizing",
+        .value_internalCare = "internalCare",
+    },
+    .cmd_setMachineState = { .name = "setMachineState" }, // arguments: state(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_DRYER_OPERATING_STATE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_dustHealthConcern.h b/examples/Smart_Switch/st/caps/iot_caps_helper_dustHealthConcern.h
new file mode 100755
index 000000000..6f271922a
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_dustHealthConcern.h
@@ -0,0 +1,72 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2022 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_DUST_HEALTH_CONCERN_
+#define _IOT_CAPS_HELPER_DUST_HEALTH_CONCERN_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_DUSTHEALTHCONCERN_DUSTHEALTHCONCERN_VALUE_GOOD,
+    CAP_ENUM_DUSTHEALTHCONCERN_DUSTHEALTHCONCERN_VALUE_MODERATE,
+    CAP_ENUM_DUSTHEALTHCONCERN_DUSTHEALTHCONCERN_VALUE_SLIGHTLYUNHEALTHY,
+    CAP_ENUM_DUSTHEALTHCONCERN_DUSTHEALTHCONCERN_VALUE_UNHEALTHY,
+    CAP_ENUM_DUSTHEALTHCONCERN_DUSTHEALTHCONCERN_VALUE_VERYUNHEALTHY,
+    CAP_ENUM_DUSTHEALTHCONCERN_DUSTHEALTHCONCERN_VALUE_HAZARDOUS,
+    CAP_ENUM_DUSTHEALTHCONCERN_DUSTHEALTHCONCERN_VALUE_MAX
+};
+
+static const struct iot_caps_dustHealthConcern {
+    const char *id;
+    const struct dustHealthConcern_attr_dustHealthConcern {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_DUSTHEALTHCONCERN_DUSTHEALTHCONCERN_VALUE_MAX];
+        const char *value_good;
+        const char *value_moderate;
+        const char *value_slightlyUnhealthy;
+        const char *value_unhealthy;
+        const char *value_veryUnhealthy;
+        const char *value_hazardous;
+    } attr_dustHealthConcern;
+} caps_helper_dustHealthConcern = {
+    .id = "dustHealthConcern",
+    .attr_dustHealthConcern = {
+        .name = "dustHealthConcern",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"good", "moderate", "slightlyUnhealthy", "unhealthy", "veryUnhealthy", "hazardous"},
+        .value_good = "good",
+        .value_moderate = "moderate",
+        .value_slightlyUnhealthy = "slightlyUnhealthy",
+        .value_unhealthy = "unhealthy",
+        .value_veryUnhealthy = "veryUnhealthy",
+        .value_hazardous = "hazardous",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_DUST_HEALTH_CONCERN_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_dustSensor.h b/examples/Smart_Switch/st/caps/iot_caps_helper_dustSensor.h
new file mode 100644
index 000000000..5bca70bbf
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_dustSensor.h
@@ -0,0 +1,80 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_DUST_SENSOR_
+#define _IOT_CAPS_HELPER_DUST_SENSOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_DUSTSENSOR_FINEDUSTLEVEL_UNIT_UG_PER_M3,
+    CAP_ENUM_DUSTSENSOR_FINEDUSTLEVEL_UNIT_MAX
+};
+
+enum {
+    CAP_ENUM_DUSTSENSOR_DUSTLEVEL_UNIT_UG_PER_M3,
+    CAP_ENUM_DUSTSENSOR_DUSTLEVEL_UNIT_MAX
+};
+
+static const struct iot_caps_dustSensor {
+    const char *id;
+    const struct dustSensor_attr_fineDustLevel {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_DUSTSENSOR_FINEDUSTLEVEL_UNIT_MAX];
+        const char *unit_ug_per_m3;
+        const int min;
+    } attr_fineDustLevel;
+    const struct dustSensor_attr_dustLevel {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_DUSTSENSOR_DUSTLEVEL_UNIT_MAX];
+        const char *unit_ug_per_m3;
+        const int min;
+    } attr_dustLevel;
+} caps_helper_dustSensor = {
+    .id = "dustSensor",
+    .attr_fineDustLevel = {
+        .name = "fineDustLevel",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .units = {"μg/m^3"},
+        .unit_ug_per_m3 = "μg/m^3",
+        .min = 0,
+    },
+    .attr_dustLevel = {
+        .name = "dustLevel",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .units = {"μg/m^3"},
+        .unit_ug_per_m3 = "μg/m^3",
+        .min = 0,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_DUST_SENSOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_energyMeter.h b/examples/Smart_Switch/st/caps/iot_caps_helper_energyMeter.h
new file mode 100644
index 000000000..03f6f48fe
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_energyMeter.h
@@ -0,0 +1,70 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2021 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_ENERGY_METER_
+#define _IOT_CAPS_HELPER_ENERGY_METER_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_ENERGYMETER_ENERGY_UNIT_WH,
+    CAP_ENUM_ENERGYMETER_ENERGY_UNIT_KWH,
+    CAP_ENUM_ENERGYMETER_ENERGY_UNIT_MWH,
+    CAP_ENUM_ENERGYMETER_ENERGY_UNIT_KVAH,
+    CAP_ENUM_ENERGYMETER_ENERGY_UNIT_MAX
+};
+
+static const struct iot_caps_energyMeter {
+    const char *id;
+    const struct energyMeter_attr_energy {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_ENERGYMETER_ENERGY_UNIT_MAX];
+        const char *unit_Wh;
+        const char *unit_kWh;
+        const char *unit_mWh;
+        const char *unit_kVAh;
+        const double min;
+    } attr_energy;
+    const struct energyMeter_cmd_resetEnergyMeter { const char* name; } cmd_resetEnergyMeter;
+} caps_helper_energyMeter = {
+    .id = "energyMeter",
+    .attr_energy = {
+        .name = "energy",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"Wh", "kWh", "mWh", "kVAh"},
+        .unit_Wh = "Wh",
+        .unit_kWh = "kWh",
+        .unit_mWh = "mWh",
+        .unit_kVAh = "kVAh",
+        .min = 0,
+    },
+    .cmd_resetEnergyMeter = { .name = "resetEnergyMeter" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_ENERGY_METER_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_equivalentCarbonDioxideMeasurement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_equivalentCarbonDioxideMeasurement.h
new file mode 100644
index 000000000..4fbb61719
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_equivalentCarbonDioxideMeasurement.h
@@ -0,0 +1,61 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_EQUIVALENT_CARBON_DIOXIDE_MEASUREMENT_
+#define _IOT_CAPS_HELPER_EQUIVALENT_CARBON_DIOXIDE_MEASUREMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_EQUIVALENTCARBONDIOXIDEMEASUREMENT_EQUIVALENTCARBONDIOXIDEMEASUREMENT_UNIT_PPM,
+    CAP_ENUM_EQUIVALENTCARBONDIOXIDEMEASUREMENT_EQUIVALENTCARBONDIOXIDEMEASUREMENT_UNIT_MAX
+};
+
+static const struct iot_caps_equivalentCarbonDioxideMeasurement {
+    const char *id;
+    const struct equivalentCarbonDioxideMeasurement_attr_equivalentCarbonDioxideMeasurement {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_EQUIVALENTCARBONDIOXIDEMEASUREMENT_EQUIVALENTCARBONDIOXIDEMEASUREMENT_UNIT_MAX];
+        const char *unit_ppm;
+        const double min;
+        const double max;
+    } attr_equivalentCarbonDioxideMeasurement;
+} caps_helper_equivalentCarbonDioxideMeasurement = {
+    .id = "equivalentCarbonDioxideMeasurement",
+    .attr_equivalentCarbonDioxideMeasurement = {
+        .name = "equivalentCarbonDioxideMeasurement",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"ppm"},
+        .unit_ppm = "ppm",
+        .min = 0,
+        .max = 1000000,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_EQUIVALENT_CARBON_DIOXIDE_MEASUREMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_execute.h b/examples/Smart_Switch/st/caps/iot_caps_helper_execute.h
new file mode 100644
index 000000000..871b45159
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_execute.h
@@ -0,0 +1,50 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_EXECUTE_
+#define _IOT_CAPS_HELPER_EXECUTE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static const struct iot_caps_execute {
+    const char *id;
+    const struct execute_attr_data {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_data;
+    const struct execute_cmd_execute { const char* name; } cmd_execute;
+} caps_helper_execute = {
+    .id = "execute",
+    .attr_data = {
+        .name = "data",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_OBJECT,
+    },
+    .cmd_execute = { .name = "execute" }, // arguments: command(string) args(object) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_EXECUTE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_fanOscillationMode.h b/examples/Smart_Switch/st/caps/iot_caps_helper_fanOscillationMode.h
new file mode 100644
index 000000000..0684e878f
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_fanOscillationMode.h
@@ -0,0 +1,149 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2021 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_FAN_OSCILLATION_MODE_
+#define _IOT_CAPS_HELPER_FAN_OSCILLATION_MODE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define CAP_ENUM_FANOSCILLATIONMODE_SUPPORTEDFANOSCILLATIONMODES_VALUE_MAX 16
+enum {
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_OFF,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_INDIVIDUAL,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_FIXED,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_VERTICAL,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_HORIZONTAL,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_ALL,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_INDIRECT,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_DIRECT,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_FIXEDCENTER,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_FIXEDLEFT,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_FIXEDRIGHT,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_FAR,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_WIDE,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_MID,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_SPOT,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_SWING,
+    CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_MAX
+};
+
+static const struct iot_caps_fanOscillationMode {
+    const char *id;
+    const struct fanOscillationMode_attr_supportedFanOscillationModes {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_FANOSCILLATIONMODE_SUPPORTEDFANOSCILLATIONMODES_VALUE_MAX];
+        const char *value_off;
+        const char *value_individual;
+        const char *value_fixed;
+        const char *value_vertical;
+        const char *value_horizontal;
+        const char *value_all;
+        const char *value_indirect;
+        const char *value_direct;
+        const char *value_fixedCenter;
+        const char *value_fixedLeft;
+        const char *value_fixedRight;
+        const char *value_far;
+        const char *value_wide;
+        const char *value_mid;
+        const char *value_spot;
+        const char *value_swing;
+    } attr_supportedFanOscillationModes;
+    const struct fanOscillationMode_attr_fanOscillationMode {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_FANOSCILLATIONMODE_FANOSCILLATIONMODE_VALUE_MAX];
+        const char *value_off;
+        const char *value_individual;
+        const char *value_fixed;
+        const char *value_vertical;
+        const char *value_horizontal;
+        const char *value_all;
+        const char *value_indirect;
+        const char *value_direct;
+        const char *value_fixedCenter;
+        const char *value_fixedLeft;
+        const char *value_fixedRight;
+        const char *value_far;
+        const char *value_wide;
+        const char *value_mid;
+        const char *value_spot;
+        const char *value_swing;
+    } attr_fanOscillationMode;
+    const struct fanOscillationMode_cmd_setFanOscillationMode { const char* name; } cmd_setFanOscillationMode;
+} caps_helper_fanOscillationMode = {
+    .id = "fanOscillationMode",
+    .attr_supportedFanOscillationModes = {
+        .name = "supportedFanOscillationModes",
+        .property = ATTR_SET_VALUE_REQUIRED | ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"'off'", "individual", "fixed", "vertical", "horizontal", "all", "indirect", "direct", "fixedCenter", "fixedLeft", "fixedRight", "far", "wide", "mid", "spot", "swing"},
+        .value_off = "'off'",
+        .value_individual = "individual",
+        .value_fixed = "fixed",
+        .value_vertical = "vertical",
+        .value_horizontal = "horizontal",
+        .value_all = "all",
+        .value_indirect = "indirect",
+        .value_direct = "direct",
+        .value_fixedCenter = "fixedCenter",
+        .value_fixedLeft = "fixedLeft",
+        .value_fixedRight = "fixedRight",
+        .value_far = "far",
+        .value_wide = "wide",
+        .value_mid = "mid",
+        .value_spot = "spot",
+        .value_swing = "swing",
+    },
+    .attr_fanOscillationMode = {
+        .name = "fanOscillationMode",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"'off'", "individual", "fixed", "vertical", "horizontal", "all", "indirect", "direct", "fixedCenter", "fixedLeft", "fixedRight", "far", "wide", "mid", "spot", "swing"},
+        .value_off = "'off'",
+        .value_individual = "individual",
+        .value_fixed = "fixed",
+        .value_vertical = "vertical",
+        .value_horizontal = "horizontal",
+        .value_all = "all",
+        .value_indirect = "indirect",
+        .value_direct = "direct",
+        .value_fixedCenter = "fixedCenter",
+        .value_fixedLeft = "fixedLeft",
+        .value_fixedRight = "fixedRight",
+        .value_far = "far",
+        .value_wide = "wide",
+        .value_mid = "mid",
+        .value_spot = "spot",
+        .value_swing = "swing",
+    },
+    .cmd_setFanOscillationMode = { .name = "setFanOscillationMode" }, // arguments: fanOscillationMode(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_FAN_OSCILLATION_MODE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_fanSpeed.h b/examples/Smart_Switch/st/caps/iot_caps_helper_fanSpeed.h
new file mode 100644
index 000000000..6119f45cf
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_fanSpeed.h
@@ -0,0 +1,52 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_FAN_SPEED_
+#define _IOT_CAPS_HELPER_FAN_SPEED_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static const struct iot_caps_fanSpeed {
+    const char *id;
+    const struct fanSpeed_attr_fanSpeed {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const int min;
+    } attr_fanSpeed;
+    const struct fanSpeed_cmd_setFanSpeed { const char* name; } cmd_setFanSpeed;
+} caps_helper_fanSpeed = {
+    .id = "fanSpeed",
+    .attr_fanSpeed = {
+        .name = "fanSpeed",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .min = 0,
+    },
+    .cmd_setFanSpeed = { .name = "setFanSpeed" }, // arguments: speed(integer) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_FAN_SPEED_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_filterStatus.h b/examples/Smart_Switch/st/caps/iot_caps_helper_filterStatus.h
new file mode 100644
index 000000000..aa704d122
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_filterStatus.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_FILTER_STATUS_
+#define _IOT_CAPS_HELPER_FILTER_STATUS_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_FILTERSTATUS_FILTERSTATUS_VALUE_NORMAL,
+    CAP_ENUM_FILTERSTATUS_FILTERSTATUS_VALUE_REPLACE,
+    CAP_ENUM_FILTERSTATUS_FILTERSTATUS_VALUE_MAX
+};
+
+static const struct iot_caps_filterStatus {
+    const char *id;
+    const struct filterStatus_attr_filterStatus {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_FILTERSTATUS_FILTERSTATUS_VALUE_MAX];
+        const char *value_normal;
+        const char *value_replace;
+    } attr_filterStatus;
+} caps_helper_filterStatus = {
+    .id = "filterStatus",
+    .attr_filterStatus = {
+        .name = "filterStatus",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"normal", "replace"},
+        .value_normal = "normal",
+        .value_replace = "replace",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_FILTER_STATUS_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_fineDustHealthConcern.h b/examples/Smart_Switch/st/caps/iot_caps_helper_fineDustHealthConcern.h
new file mode 100755
index 000000000..0fc13d61e
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_fineDustHealthConcern.h
@@ -0,0 +1,72 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2022 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_FINE_DUST_HEALTH_CONCERN_
+#define _IOT_CAPS_HELPER_FINE_DUST_HEALTH_CONCERN_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_FINEDUSTHEALTHCONCERN_FINEDUSTHEALTHCONCERN_VALUE_GOOD,
+    CAP_ENUM_FINEDUSTHEALTHCONCERN_FINEDUSTHEALTHCONCERN_VALUE_MODERATE,
+    CAP_ENUM_FINEDUSTHEALTHCONCERN_FINEDUSTHEALTHCONCERN_VALUE_SLIGHTLYUNHEALTHY,
+    CAP_ENUM_FINEDUSTHEALTHCONCERN_FINEDUSTHEALTHCONCERN_VALUE_UNHEALTHY,
+    CAP_ENUM_FINEDUSTHEALTHCONCERN_FINEDUSTHEALTHCONCERN_VALUE_VERYUNHEALTHY,
+    CAP_ENUM_FINEDUSTHEALTHCONCERN_FINEDUSTHEALTHCONCERN_VALUE_HAZARDOUS,
+    CAP_ENUM_FINEDUSTHEALTHCONCERN_FINEDUSTHEALTHCONCERN_VALUE_MAX
+};
+
+static const struct iot_caps_fineDustHealthConcern {
+    const char *id;
+    const struct fineDustHealthConcern_attr_fineDustHealthConcern {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_FINEDUSTHEALTHCONCERN_FINEDUSTHEALTHCONCERN_VALUE_MAX];
+        const char *value_good;
+        const char *value_moderate;
+        const char *value_slightlyUnhealthy;
+        const char *value_unhealthy;
+        const char *value_veryUnhealthy;
+        const char *value_hazardous;
+    } attr_fineDustHealthConcern;
+} caps_helper_fineDustHealthConcern = {
+    .id = "fineDustHealthConcern",
+    .attr_fineDustHealthConcern = {
+        .name = "fineDustHealthConcern",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"good", "moderate", "slightlyUnhealthy", "unhealthy", "veryUnhealthy", "hazardous"},
+        .value_good = "good",
+        .value_moderate = "moderate",
+        .value_slightlyUnhealthy = "slightlyUnhealthy",
+        .value_unhealthy = "unhealthy",
+        .value_veryUnhealthy = "veryUnhealthy",
+        .value_hazardous = "hazardous",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_FINE_DUST_HEALTH_CONCERN_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_fineDustSensor.h b/examples/Smart_Switch/st/caps/iot_caps_helper_fineDustSensor.h
new file mode 100644
index 000000000..2f30cf538
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_fineDustSensor.h
@@ -0,0 +1,59 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_FINE_DUST_SENSOR_
+#define _IOT_CAPS_HELPER_FINE_DUST_SENSOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_FINEDUSTSENSOR_FINEDUSTLEVEL_UNIT_UG_PER_M3,
+    CAP_ENUM_FINEDUSTSENSOR_FINEDUSTLEVEL_UNIT_MAX
+};
+
+static const struct iot_caps_fineDustSensor {
+    const char *id;
+    const struct fineDustSensor_attr_fineDustLevel {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_FINEDUSTSENSOR_FINEDUSTLEVEL_UNIT_MAX];
+        const char *unit_ug_per_m3;
+        const int min;
+    } attr_fineDustLevel;
+} caps_helper_fineDustSensor = {
+    .id = "fineDustSensor",
+    .attr_fineDustLevel = {
+        .name = "fineDustLevel",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .units = {"μg/m^3"},
+        .unit_ug_per_m3 = "μg/m^3",
+        .min = 0,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_FINE_DUST_SENSOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_firmwareUpdate.h b/examples/Smart_Switch/st/caps/iot_caps_helper_firmwareUpdate.h
new file mode 100644
index 000000000..90b749191
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_firmwareUpdate.h
@@ -0,0 +1,126 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_FIRMWARE_UPDATE_
+#define _IOT_CAPS_HELPER_FIRMWARE_UPDATE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_FIRMWAREUPDATE_LASTUPDATESTATUS_VALUE_UPDATESUCCEEDED,
+    CAP_ENUM_FIRMWAREUPDATE_LASTUPDATESTATUS_VALUE_UPDATEFAILED,
+    CAP_ENUM_FIRMWAREUPDATE_LASTUPDATESTATUS_VALUE_MAX
+};
+
+enum {
+    CAP_ENUM_FIRMWAREUPDATE_STATE_VALUE_NORMALOPERATION,
+    CAP_ENUM_FIRMWAREUPDATE_STATE_VALUE_UPDATEINPROGRESS,
+    CAP_ENUM_FIRMWAREUPDATE_STATE_VALUE_MAX
+};
+
+static const struct iot_caps_firmwareUpdate {
+    const char *id;
+    const struct firmwareUpdate_attr_lastUpdateStatus {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_FIRMWAREUPDATE_LASTUPDATESTATUS_VALUE_MAX];
+        const char *value_updateSucceeded;
+        const char *value_updateFailed;
+    } attr_lastUpdateStatus;
+    const struct firmwareUpdate_attr_state {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_FIRMWAREUPDATE_STATE_VALUE_MAX];
+        const char *value_normalOperation;
+        const char *value_updateInProgress;
+    } attr_state;
+    const struct firmwareUpdate_attr_currentVersion {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_currentVersion;
+    const struct firmwareUpdate_attr_lastUpdateTime {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_lastUpdateTime;
+    const struct firmwareUpdate_attr_availableVersion {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_availableVersion;
+    const struct firmwareUpdate_attr_lastUpdateStatusReason {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_lastUpdateStatusReason;
+    const struct firmwareUpdate_cmd_checkForFirmwareUpdate { const char* name; } cmd_checkForFirmwareUpdate;
+    const struct firmwareUpdate_cmd_updateFirmware { const char* name; } cmd_updateFirmware;
+} caps_helper_firmwareUpdate = {
+    .id = "firmwareUpdate",
+    .attr_lastUpdateStatus = {
+        .name = "lastUpdateStatus",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"updateSucceeded", "updateFailed"},
+        .value_updateSucceeded = "updateSucceeded",
+        .value_updateFailed = "updateFailed",
+    },
+    .attr_state = {
+        .name = "state",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"normalOperation", "updateInProgress"},
+        .value_normalOperation = "normalOperation",
+        .value_updateInProgress = "updateInProgress",
+    },
+    .attr_currentVersion = {
+        .name = "currentVersion",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .attr_lastUpdateTime = {
+        .name = "lastUpdateTime",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .attr_availableVersion = {
+        .name = "availableVersion",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .attr_lastUpdateStatusReason = {
+        .name = "lastUpdateStatusReason",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .cmd_checkForFirmwareUpdate = { .name = "checkForFirmwareUpdate" },
+    .cmd_updateFirmware = { .name = "updateFirmware" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_FIRMWARE_UPDATE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_formaldehydeMeasurement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_formaldehydeMeasurement.h
new file mode 100644
index 000000000..d82ef8e77
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_formaldehydeMeasurement.h
@@ -0,0 +1,64 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_FORMALDEHYDE_MEASUREMENT_
+#define _IOT_CAPS_HELPER_FORMALDEHYDE_MEASUREMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_FORMALDEHYDEMEASUREMENT_FORMALDEHYDELEVEL_UNIT_PPM,
+    CAP_ENUM_FORMALDEHYDEMEASUREMENT_FORMALDEHYDELEVEL_UNIT_MG_PER_M3,
+    CAP_ENUM_FORMALDEHYDEMEASUREMENT_FORMALDEHYDELEVEL_UNIT_MAX
+};
+
+static const struct iot_caps_formaldehydeMeasurement {
+    const char *id;
+    const struct formaldehydeMeasurement_attr_formaldehydeLevel {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_FORMALDEHYDEMEASUREMENT_FORMALDEHYDELEVEL_UNIT_MAX];
+        const char *unit_ppm;
+        const char *unit_mg_per_m3;
+        const double min;
+        const double max;
+    } attr_formaldehydeLevel;
+} caps_helper_formaldehydeMeasurement = {
+    .id = "formaldehydeMeasurement",
+    .attr_formaldehydeLevel = {
+        .name = "formaldehydeLevel",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED | ATTR_SET_UNIT_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"ppm", "mg/m^3"},
+        .unit_ppm = "ppm",
+        .unit_mg_per_m3 = "mg/m^3",
+        .min = 0,
+        .max = 1000000,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_FORMALDEHYDE_MEASUREMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_garageDoorControl.h b/examples/Smart_Switch/st/caps/iot_caps_helper_garageDoorControl.h
new file mode 100644
index 000000000..200950ee3
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_garageDoorControl.h
@@ -0,0 +1,73 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_GARAGE_DOOR_CONTROL_
+#define _IOT_CAPS_HELPER_GARAGE_DOOR_CONTROL_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_GARAGEDOORCONTROL_DOOR_VALUE_CLOSED,
+    CAP_ENUM_GARAGEDOORCONTROL_DOOR_VALUE_CLOSING,
+    CAP_ENUM_GARAGEDOORCONTROL_DOOR_VALUE_OPEN,
+    CAP_ENUM_GARAGEDOORCONTROL_DOOR_VALUE_OPENING,
+    CAP_ENUM_GARAGEDOORCONTROL_DOOR_VALUE_UNKNOWN,
+    CAP_ENUM_GARAGEDOORCONTROL_DOOR_VALUE_MAX
+};
+
+static const struct iot_caps_garageDoorControl {
+    const char *id;
+    const struct garageDoorControl_attr_door {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_GARAGEDOORCONTROL_DOOR_VALUE_MAX];
+        const char *value_closed;
+        const char *value_closing;
+        const char *value_open;
+        const char *value_opening;
+        const char *value_unknown;
+    } attr_door;
+    const struct garageDoorControl_cmd_close { const char* name; } cmd_close;
+    const struct garageDoorControl_cmd_open { const char* name; } cmd_open;
+} caps_helper_garageDoorControl = {
+    .id = "garageDoorControl",
+    .attr_door = {
+        .name = "door",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"closed", "closing", "open", "opening", "unknown"},
+        .value_closed = "closed",
+        .value_closing = "closing",
+        .value_open = "open",
+        .value_opening = "opening",
+        .value_unknown = "unknown",
+    },
+    .cmd_close = { .name = "close" },
+    .cmd_open = { .name = "open" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_GARAGE_DOOR_CONTROL_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_gasMeter.h b/examples/Smart_Switch/st/caps/iot_caps_helper_gasMeter.h
new file mode 100644
index 000000000..75d28b40c
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_gasMeter.h
@@ -0,0 +1,124 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_GAS_METER_
+#define _IOT_CAPS_HELPER_GAS_METER_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_GASMETER_GASMETER_UNIT_KWH,
+    CAP_ENUM_GASMETER_GASMETER_UNIT_MAX
+};
+
+enum {
+    CAP_ENUM_GASMETER_GASMETERVOLUME_UNIT_M3,
+    CAP_ENUM_GASMETER_GASMETERVOLUME_UNIT_MAX
+};
+
+static const struct iot_caps_gasMeter {
+    const char *id;
+    const struct gasMeter_attr_gasMeterTime {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_gasMeterTime;
+    const struct gasMeter_attr_gasMeter {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_GASMETER_GASMETER_UNIT_MAX];
+        const char *unit_kWh;
+        const double min;
+    } attr_gasMeter;
+    const struct gasMeter_attr_gasMeterCalorific {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const double min;
+    } attr_gasMeterCalorific;
+    const struct gasMeter_attr_gasMeterVolume {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_GASMETER_GASMETERVOLUME_UNIT_MAX];
+        const char *unit_m3;
+        const double min;
+    } attr_gasMeterVolume;
+    const struct gasMeter_attr_gasMeterPrecision {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_gasMeterPrecision;
+    const struct gasMeter_attr_gasMeterConversion {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const double min;
+    } attr_gasMeterConversion;
+} caps_helper_gasMeter = {
+    .id = "gasMeter",
+    .attr_gasMeterTime = {
+        .name = "gasMeterTime",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .attr_gasMeter = {
+        .name = "gasMeter",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"kWh"},
+        .unit_kWh = "kWh",
+        .min = 0,
+    },
+    .attr_gasMeterCalorific = {
+        .name = "gasMeterCalorific",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .min = 0,
+    },
+    .attr_gasMeterVolume = {
+        .name = "gasMeterVolume",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"m^3"},
+        .unit_m3 = "m^3",
+        .min = 0,
+    },
+    .attr_gasMeterPrecision = {
+        .name = "gasMeterPrecision",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_OBJECT,
+    },
+    .attr_gasMeterConversion = {
+        .name = "gasMeterConversion",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .min = 0,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_GAS_METER_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_illuminanceMeasurement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_illuminanceMeasurement.h
new file mode 100644
index 000000000..c2624718a
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_illuminanceMeasurement.h
@@ -0,0 +1,61 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_ILLUMINANCE_MEASUREMENT_
+#define _IOT_CAPS_HELPER_ILLUMINANCE_MEASUREMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_ILLUMINANCEMEASUREMENT_ILLUMINANCE_UNIT_LUX,
+    CAP_ENUM_ILLUMINANCEMEASUREMENT_ILLUMINANCE_UNIT_MAX
+};
+
+static const struct iot_caps_illuminanceMeasurement {
+    const char *id;
+    const struct illuminanceMeasurement_attr_illuminance {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_ILLUMINANCEMEASUREMENT_ILLUMINANCE_UNIT_MAX];
+        const char *unit_lux;
+        const double min;
+        const double max;
+    } attr_illuminance;
+} caps_helper_illuminanceMeasurement = {
+    .id = "illuminanceMeasurement",
+    .attr_illuminance = {
+        .name = "illuminance",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"lux"},
+        .unit_lux = "lux",
+        .min = 0,
+        .max = 100000,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_ILLUMINANCE_MEASUREMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_imageCapture.h b/examples/Smart_Switch/st/caps/iot_caps_helper_imageCapture.h
new file mode 100644
index 000000000..01bd97267
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_imageCapture.h
@@ -0,0 +1,70 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2021 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_IMAGE_CAPTURE_
+#define _IOT_CAPS_HELPER_IMAGE_CAPTURE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static const struct iot_caps_imageCapture {
+    const char *id;
+    const struct imageCapture_attr_encrypted {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_encrypted;
+    const struct imageCapture_attr_image {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_image;
+    const struct imageCapture_attr_captureTime {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_captureTime;
+    const struct imageCapture_cmd_take { const char* name; } cmd_take;
+} caps_helper_imageCapture = {
+    .id = "imageCapture",
+    .attr_encrypted = {
+        .name = "encrypted",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_BOOLEAN,
+    },
+    .attr_image = {
+        .name = "image",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .attr_captureTime = {
+        .name = "captureTime",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .cmd_take = { .name = "take" }, // arguments: correlationId(string) reason(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_IMAGE_CAPTURE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_lock.h b/examples/Smart_Switch/st/caps/iot_caps_helper_lock.h
new file mode 100644
index 000000000..7abff6942
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_lock.h
@@ -0,0 +1,70 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_LOCK_
+#define _IOT_CAPS_HELPER_LOCK_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_LOCK_LOCK_VALUE_LOCKED,
+    CAP_ENUM_LOCK_LOCK_VALUE_UNKNOWN,
+    CAP_ENUM_LOCK_LOCK_VALUE_UNLOCKED,
+    CAP_ENUM_LOCK_LOCK_VALUE_UNLOCKED_WITH_TIMEOUT,
+    CAP_ENUM_LOCK_LOCK_VALUE_MAX
+};
+
+static const struct iot_caps_lock {
+    const char *id;
+    const struct lock_attr_lock {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_LOCK_LOCK_VALUE_MAX];
+        const char *value_locked;
+        const char *value_unknown;
+        const char *value_unlocked;
+        const char *value_unlocked_with_timeout;
+    } attr_lock;
+    const struct lock_cmd_lock { const char* name; } cmd_lock;
+    const struct lock_cmd_unlock { const char* name; } cmd_unlock;
+} caps_helper_lock = {
+    .id = "lock",
+    .attr_lock = {
+        .name = "lock",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"locked", "unknown", "unlocked", "unlocked with timeout"},
+        .value_locked = "locked",
+        .value_unknown = "unknown",
+        .value_unlocked = "unlocked",
+        .value_unlocked_with_timeout = "unlocked with timeout",
+    },
+    .cmd_lock = { .name = "lock" },
+    .cmd_unlock = { .name = "unlock" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_LOCK_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_mediaInputSource.h b/examples/Smart_Switch/st/caps/iot_caps_helper_mediaInputSource.h
new file mode 100644
index 000000000..f58b21089
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_mediaInputSource.h
@@ -0,0 +1,159 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_MEDIA_INPUT_SOURCE_
+#define _IOT_CAPS_HELPER_MEDIA_INPUT_SOURCE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_AM,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_CD,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_FM,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_HDMI,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_HDMI1,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_HDMI2,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_HDMI3,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_HDMI4,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_HDMI5,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_HDMI6,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_DIGITALTV,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_USB,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_YOUTUBE,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_AUX,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_BLUETOOTH,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_DIGITAL,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_MELON,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_WIFI,
+    CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_MAX
+};
+
+#define CAP_ENUM_MEDIAINPUTSOURCE_SUPPORTEDINPUTSOURCES_VALUE_MAX 18
+static const struct iot_caps_mediaInputSource {
+    const char *id;
+    const struct mediaInputSource_attr_inputSource {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_MEDIAINPUTSOURCE_INPUTSOURCE_VALUE_MAX];
+        const char *value_AM;
+        const char *value_CD;
+        const char *value_FM;
+        const char *value_HDMI;
+        const char *value_HDMI1;
+        const char *value_HDMI2;
+        const char *value_HDMI3;
+        const char *value_HDMI4;
+        const char *value_HDMI5;
+        const char *value_HDMI6;
+        const char *value_digitalTv;
+        const char *value_USB;
+        const char *value_YouTube;
+        const char *value_aux;
+        const char *value_bluetooth;
+        const char *value_digital;
+        const char *value_melon;
+        const char *value_wifi;
+    } attr_inputSource;
+    const struct mediaInputSource_attr_supportedInputSources {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_MEDIAINPUTSOURCE_SUPPORTEDINPUTSOURCES_VALUE_MAX];
+        const char *value_AM;
+        const char *value_CD;
+        const char *value_FM;
+        const char *value_HDMI;
+        const char *value_HDMI1;
+        const char *value_HDMI2;
+        const char *value_HDMI3;
+        const char *value_HDMI4;
+        const char *value_HDMI5;
+        const char *value_HDMI6;
+        const char *value_digitalTv;
+        const char *value_USB;
+        const char *value_YouTube;
+        const char *value_aux;
+        const char *value_bluetooth;
+        const char *value_digital;
+        const char *value_melon;
+        const char *value_wifi;
+    } attr_supportedInputSources;
+    const struct mediaInputSource_cmd_setInputSource { const char* name; } cmd_setInputSource;
+} caps_helper_mediaInputSource = {
+    .id = "mediaInputSource",
+    .attr_inputSource = {
+        .name = "inputSource",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"AM", "CD", "FM", "HDMI", "HDMI1", "HDMI2", "HDMI3", "HDMI4", "HDMI5", "HDMI6", "digitalTv", "USB", "YouTube", "aux", "bluetooth", "digital", "melon", "wifi"},
+        .value_AM = "AM",
+        .value_CD = "CD",
+        .value_FM = "FM",
+        .value_HDMI = "HDMI",
+        .value_HDMI1 = "HDMI1",
+        .value_HDMI2 = "HDMI2",
+        .value_HDMI3 = "HDMI3",
+        .value_HDMI4 = "HDMI4",
+        .value_HDMI5 = "HDMI5",
+        .value_HDMI6 = "HDMI6",
+        .value_digitalTv = "digitalTv",
+        .value_USB = "USB",
+        .value_YouTube = "YouTube",
+        .value_aux = "aux",
+        .value_bluetooth = "bluetooth",
+        .value_digital = "digital",
+        .value_melon = "melon",
+        .value_wifi = "wifi",
+    },
+    .attr_supportedInputSources = {
+        .name = "supportedInputSources",
+        .property = ATTR_SET_VALUE_REQUIRED | ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"AM", "CD", "FM", "HDMI", "HDMI1", "HDMI2", "HDMI3", "HDMI4", "HDMI5", "HDMI6", "digitalTv", "USB", "YouTube", "aux", "bluetooth", "digital", "melon", "wifi"},
+        .value_AM = "AM",
+        .value_CD = "CD",
+        .value_FM = "FM",
+        .value_HDMI = "HDMI",
+        .value_HDMI1 = "HDMI1",
+        .value_HDMI2 = "HDMI2",
+        .value_HDMI3 = "HDMI3",
+        .value_HDMI4 = "HDMI4",
+        .value_HDMI5 = "HDMI5",
+        .value_HDMI6 = "HDMI6",
+        .value_digitalTv = "digitalTv",
+        .value_USB = "USB",
+        .value_YouTube = "YouTube",
+        .value_aux = "aux",
+        .value_bluetooth = "bluetooth",
+        .value_digital = "digital",
+        .value_melon = "melon",
+        .value_wifi = "wifi",
+    },
+    .cmd_setInputSource = { .name = "setInputSource" }, // arguments: mode(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_MEDIA_INPUT_SOURCE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_mediaPlayback.h b/examples/Smart_Switch/st/caps/iot_caps_helper_mediaPlayback.h
new file mode 100644
index 000000000..c0792621b
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_mediaPlayback.h
@@ -0,0 +1,104 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_MEDIA_PLAYBACK_
+#define _IOT_CAPS_HELPER_MEDIA_PLAYBACK_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define CAP_ENUM_MEDIAPLAYBACK_SUPPORTEDPLAYBACKCOMMANDS_VALUE_MAX 5
+enum {
+    CAP_ENUM_MEDIAPLAYBACK_PLAYBACKSTATUS_VALUE_PAUSED,
+    CAP_ENUM_MEDIAPLAYBACK_PLAYBACKSTATUS_VALUE_PLAYING,
+    CAP_ENUM_MEDIAPLAYBACK_PLAYBACKSTATUS_VALUE_STOPPED,
+    CAP_ENUM_MEDIAPLAYBACK_PLAYBACKSTATUS_VALUE_FAST_FORWARDING,
+    CAP_ENUM_MEDIAPLAYBACK_PLAYBACKSTATUS_VALUE_REWINDING,
+    CAP_ENUM_MEDIAPLAYBACK_PLAYBACKSTATUS_VALUE_MAX
+};
+
+static const struct iot_caps_mediaPlayback {
+    const char *id;
+    const struct mediaPlayback_attr_supportedPlaybackCommands {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_MEDIAPLAYBACK_SUPPORTEDPLAYBACKCOMMANDS_VALUE_MAX];
+        const char *value_pause;
+        const char *value_play;
+        const char *value_stop;
+        const char *value_fastForward;
+        const char *value_rewind;
+    } attr_supportedPlaybackCommands;
+    const struct mediaPlayback_attr_playbackStatus {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_MEDIAPLAYBACK_PLAYBACKSTATUS_VALUE_MAX];
+        const char *value_paused;
+        const char *value_playing;
+        const char *value_stopped;
+        const char *value_fast_forwarding;
+        const char *value_rewinding;
+    } attr_playbackStatus;
+    const struct mediaPlayback_cmd_setPlaybackStatus { const char* name; } cmd_setPlaybackStatus;
+    const struct mediaPlayback_cmd_play { const char* name; } cmd_play;
+    const struct mediaPlayback_cmd_pause { const char* name; } cmd_pause;
+    const struct mediaPlayback_cmd_rewind { const char* name; } cmd_rewind;
+    const struct mediaPlayback_cmd_fastForward { const char* name; } cmd_fastForward;
+    const struct mediaPlayback_cmd_stop { const char* name; } cmd_stop;
+} caps_helper_mediaPlayback = {
+    .id = "mediaPlayback",
+    .attr_supportedPlaybackCommands = {
+        .name = "supportedPlaybackCommands",
+        .property = ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"pause", "play", "stop", "fastForward", "rewind"},
+        .value_pause = "pause",
+        .value_play = "play",
+        .value_stop = "stop",
+        .value_fastForward = "fastForward",
+        .value_rewind = "rewind",
+    },
+    .attr_playbackStatus = {
+        .name = "playbackStatus",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"paused", "playing", "stopped", "fast forwarding", "rewinding"},
+        .value_paused = "paused",
+        .value_playing = "playing",
+        .value_stopped = "stopped",
+        .value_fast_forwarding = "fast forwarding",
+        .value_rewinding = "rewinding",
+    },
+    .cmd_setPlaybackStatus = { .name = "setPlaybackStatus" }, // arguments: status(string) 
+    .cmd_play = { .name = "play" },
+    .cmd_pause = { .name = "pause" },
+    .cmd_rewind = { .name = "rewind" },
+    .cmd_fastForward = { .name = "fastForward" },
+    .cmd_stop = { .name = "stop" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_MEDIA_PLAYBACK_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_mediaPlaybackRepeat.h b/examples/Smart_Switch/st/caps/iot_caps_helper_mediaPlaybackRepeat.h
new file mode 100644
index 000000000..f4542174d
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_mediaPlaybackRepeat.h
@@ -0,0 +1,65 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_MEDIA_PLAYBACK_REPEAT_
+#define _IOT_CAPS_HELPER_MEDIA_PLAYBACK_REPEAT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_MEDIAPLAYBACKREPEAT_PLAYBACKREPEATMODE_VALUE_ALL,
+    CAP_ENUM_MEDIAPLAYBACKREPEAT_PLAYBACKREPEATMODE_VALUE_OFF,
+    CAP_ENUM_MEDIAPLAYBACKREPEAT_PLAYBACKREPEATMODE_VALUE_ONE,
+    CAP_ENUM_MEDIAPLAYBACKREPEAT_PLAYBACKREPEATMODE_VALUE_MAX
+};
+
+static const struct iot_caps_mediaPlaybackRepeat {
+    const char *id;
+    const struct mediaPlaybackRepeat_attr_playbackRepeatMode {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_MEDIAPLAYBACKREPEAT_PLAYBACKREPEATMODE_VALUE_MAX];
+        const char *value_all;
+        const char *value_off;
+        const char *value_one;
+    } attr_playbackRepeatMode;
+    const struct mediaPlaybackRepeat_cmd_setPlaybackRepeatMode { const char* name; } cmd_setPlaybackRepeatMode;
+} caps_helper_mediaPlaybackRepeat = {
+    .id = "mediaPlaybackRepeat",
+    .attr_playbackRepeatMode = {
+        .name = "playbackRepeatMode",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"all", "off", "one"},
+        .value_all = "all",
+        .value_off = "off",
+        .value_one = "one",
+    },
+    .cmd_setPlaybackRepeatMode = { .name = "setPlaybackRepeatMode" }, // arguments: mode(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_MEDIA_PLAYBACK_REPEAT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_mediaPlaybackShuffle.h b/examples/Smart_Switch/st/caps/iot_caps_helper_mediaPlaybackShuffle.h
new file mode 100644
index 000000000..17b51fd80
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_mediaPlaybackShuffle.h
@@ -0,0 +1,62 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_MEDIA_PLAYBACK_SHUFFLE_
+#define _IOT_CAPS_HELPER_MEDIA_PLAYBACK_SHUFFLE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_MEDIAPLAYBACKSHUFFLE_PLAYBACKSHUFFLE_VALUE_DISABLED,
+    CAP_ENUM_MEDIAPLAYBACKSHUFFLE_PLAYBACKSHUFFLE_VALUE_ENABLED,
+    CAP_ENUM_MEDIAPLAYBACKSHUFFLE_PLAYBACKSHUFFLE_VALUE_MAX
+};
+
+static const struct iot_caps_mediaPlaybackShuffle {
+    const char *id;
+    const struct mediaPlaybackShuffle_attr_playbackShuffle {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_MEDIAPLAYBACKSHUFFLE_PLAYBACKSHUFFLE_VALUE_MAX];
+        const char *value_disabled;
+        const char *value_enabled;
+    } attr_playbackShuffle;
+    const struct mediaPlaybackShuffle_cmd_setPlaybackShuffle { const char* name; } cmd_setPlaybackShuffle;
+} caps_helper_mediaPlaybackShuffle = {
+    .id = "mediaPlaybackShuffle",
+    .attr_playbackShuffle = {
+        .name = "playbackShuffle",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"disabled", "enabled"},
+        .value_disabled = "disabled",
+        .value_enabled = "enabled",
+    },
+    .cmd_setPlaybackShuffle = { .name = "setPlaybackShuffle" }, // arguments: shuffle(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_MEDIA_PLAYBACK_SHUFFLE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_mode.h b/examples/Smart_Switch/st/caps/iot_caps_helper_mode.h
new file mode 100644
index 000000000..9b70da112
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_mode.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2021 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_MODE_
+#define _IOT_CAPS_HELPER_MODE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static const struct iot_caps_mode {
+    const char *id;
+    const struct mode_attr_supportedModes {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_supportedModes;
+    const struct mode_attr_mode {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_mode;
+    const struct mode_cmd_setMode { const char* name; } cmd_setMode;
+} caps_helper_mode = {
+    .id = "mode",
+    .attr_supportedModes = {
+        .name = "supportedModes",
+        .property = ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .attr_mode = {
+        .name = "mode",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .cmd_setMode = { .name = "setMode" }, // arguments: mode(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_MODE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_moldHealthConcern.h b/examples/Smart_Switch/st/caps/iot_caps_helper_moldHealthConcern.h
new file mode 100755
index 000000000..7c93324ef
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_moldHealthConcern.h
@@ -0,0 +1,72 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2022 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_MOLD_HEALTH_CONCERN_
+#define _IOT_CAPS_HELPER_MOLD_HEALTH_CONCERN_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_MOLDHEALTHCONCERN_MOLDHEALTHCONCERN_VALUE_GOOD,
+    CAP_ENUM_MOLDHEALTHCONCERN_MOLDHEALTHCONCERN_VALUE_MODERATE,
+    CAP_ENUM_MOLDHEALTHCONCERN_MOLDHEALTHCONCERN_VALUE_SLIGHTLYUNHEALTHY,
+    CAP_ENUM_MOLDHEALTHCONCERN_MOLDHEALTHCONCERN_VALUE_UNHEALTHY,
+    CAP_ENUM_MOLDHEALTHCONCERN_MOLDHEALTHCONCERN_VALUE_VERYUNHEALTHY,
+    CAP_ENUM_MOLDHEALTHCONCERN_MOLDHEALTHCONCERN_VALUE_HAZARDOUS,
+    CAP_ENUM_MOLDHEALTHCONCERN_MOLDHEALTHCONCERN_VALUE_MAX
+};
+
+static const struct iot_caps_moldHealthConcern {
+    const char *id;
+    const struct moldHealthConcern_attr_moldHealthConcern {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_MOLDHEALTHCONCERN_MOLDHEALTHCONCERN_VALUE_MAX];
+        const char *value_good;
+        const char *value_moderate;
+        const char *value_slightlyUnhealthy;
+        const char *value_unhealthy;
+        const char *value_veryUnhealthy;
+        const char *value_hazardous;
+    } attr_moldHealthConcern;
+} caps_helper_moldHealthConcern = {
+    .id = "moldHealthConcern",
+    .attr_moldHealthConcern = {
+        .name = "moldHealthConcern",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"good", "moderate", "slightlyUnhealthy", "unhealthy", "veryUnhealthy", "hazardous"},
+        .value_good = "good",
+        .value_moderate = "moderate",
+        .value_slightlyUnhealthy = "slightlyUnhealthy",
+        .value_unhealthy = "unhealthy",
+        .value_veryUnhealthy = "veryUnhealthy",
+        .value_hazardous = "hazardous",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_MOLD_HEALTH_CONCERN_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_momentary.h b/examples/Smart_Switch/st/caps/iot_caps_helper_momentary.h
new file mode 100644
index 000000000..3a6051bfe
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_momentary.h
@@ -0,0 +1,40 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_MOMENTARY_
+#define _IOT_CAPS_HELPER_MOMENTARY_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static const struct iot_caps_momentary {
+    const char *id;
+    const struct momentary_cmd_push { const char* name; } cmd_push;
+} caps_helper_momentary = {
+    .id = "momentary",
+    .cmd_push = { .name = "push" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_MOMENTARY_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_motionSensor.h b/examples/Smart_Switch/st/caps/iot_caps_helper_motionSensor.h
new file mode 100644
index 000000000..5e4712fbd
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_motionSensor.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_MOTION_SENSOR_
+#define _IOT_CAPS_HELPER_MOTION_SENSOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_MOTIONSENSOR_MOTION_VALUE_ACTIVE,
+    CAP_ENUM_MOTIONSENSOR_MOTION_VALUE_INACTIVE,
+    CAP_ENUM_MOTIONSENSOR_MOTION_VALUE_MAX
+};
+
+static const struct iot_caps_motionSensor {
+    const char *id;
+    const struct motionSensor_attr_motion {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_MOTIONSENSOR_MOTION_VALUE_MAX];
+        const char *value_active;
+        const char *value_inactive;
+    } attr_motion;
+} caps_helper_motionSensor = {
+    .id = "motionSensor",
+    .attr_motion = {
+        .name = "motion",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"active", "inactive"},
+        .value_active = "active",
+        .value_inactive = "inactive",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_MOTION_SENSOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_objectDetection.h b/examples/Smart_Switch/st/caps/iot_caps_helper_objectDetection.h
new file mode 100644
index 000000000..a93324cf1
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_objectDetection.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_OBJECT_DETECTION_
+#define _IOT_CAPS_HELPER_OBJECT_DETECTION_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static const struct iot_caps_objectDetection {
+    const char *id;
+    const struct objectDetection_attr_detected {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_detected;
+    const struct objectDetection_attr_supportedValues {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const unsigned int max_length;
+    } attr_supportedValues;
+} caps_helper_objectDetection = {
+    .id = "objectDetection",
+    .attr_detected = {
+        .name = "detected",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_OBJECT,
+    },
+    .attr_supportedValues = {
+        .name = "supportedValues",
+        .property = ATTR_SET_MAX_LENGTH | ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+        .max_length = 255,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_OBJECT_DETECTION_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_odorSensor.h b/examples/Smart_Switch/st/caps/iot_caps_helper_odorSensor.h
new file mode 100644
index 000000000..30a1345fb
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_odorSensor.h
@@ -0,0 +1,50 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_ODOR_SENSOR_
+#define _IOT_CAPS_HELPER_ODOR_SENSOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static const struct iot_caps_odorSensor {
+    const char *id;
+    const struct odorSensor_attr_odorLevel {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const int min;
+    } attr_odorLevel;
+} caps_helper_odorSensor = {
+    .id = "odorSensor",
+    .attr_odorLevel = {
+        .name = "odorLevel",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .min = 0,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_ODOR_SENSOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_operatingState.h b/examples/Smart_Switch/st/caps/iot_caps_helper_operatingState.h
new file mode 100644
index 000000000..cd213e957
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_operatingState.h
@@ -0,0 +1,84 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2021 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_OPERATING_STATE_
+#define _IOT_CAPS_HELPER_OPERATING_STATE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define CAP_ENUM_OPERATINGSTATE_SUPPORTEDMACHINESTATES_VALUE_MAX 3
+enum {
+    CAP_ENUM_OPERATINGSTATE_MACHINESTATE_VALUE_PAUSED,
+    CAP_ENUM_OPERATINGSTATE_MACHINESTATE_VALUE_RUNNING,
+    CAP_ENUM_OPERATINGSTATE_MACHINESTATE_VALUE_READY,
+    CAP_ENUM_OPERATINGSTATE_MACHINESTATE_VALUE_MAX
+};
+
+static const struct iot_caps_operatingState {
+    const char *id;
+    const struct operatingState_attr_supportedMachineStates {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_OPERATINGSTATE_SUPPORTEDMACHINESTATES_VALUE_MAX];
+        const char *value_paused;
+        const char *value_running;
+        const char *value_ready;
+    } attr_supportedMachineStates;
+    const struct operatingState_attr_machineState {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_OPERATINGSTATE_MACHINESTATE_VALUE_MAX];
+        const char *value_paused;
+        const char *value_running;
+        const char *value_ready;
+    } attr_machineState;
+    const struct operatingState_cmd_setMachineState { const char* name; } cmd_setMachineState;
+} caps_helper_operatingState = {
+    .id = "operatingState",
+    .attr_supportedMachineStates = {
+        .name = "supportedMachineStates",
+        .property = ATTR_SET_VALUE_REQUIRED | ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"paused", "running", "ready"},
+        .value_paused = "paused",
+        .value_running = "running",
+        .value_ready = "ready",
+    },
+    .attr_machineState = {
+        .name = "machineState",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"paused", "running", "ready"},
+        .value_paused = "paused",
+        .value_running = "running",
+        .value_ready = "ready",
+    },
+    .cmd_setMachineState = { .name = "setMachineState" }, // arguments: state(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_OPERATING_STATE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_ovenOperatingState.h b/examples/Smart_Switch/st/caps/iot_caps_helper_ovenOperatingState.h
new file mode 100644
index 000000000..a0ee2e6bd
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_ovenOperatingState.h
@@ -0,0 +1,200 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2021 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_OVEN_OPERATING_STATE_
+#define _IOT_CAPS_HELPER_OVEN_OPERATING_STATE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_CLEANING,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_COOKING,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_COOLING,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_DRAINING,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_PREHEAT,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_READY,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_RINSING,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_FINISHED,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_SCHEDULEDSTART,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_WARMING,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_DEFROSTING,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_SENSING,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_SEARING,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_FASTPREHEAT,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_SCHEDULEDEND,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_STONEHEATING,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_TIMEHOLDPREHEAT,
+    CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_MAX
+};
+
+#define CAP_ENUM_OVENOPERATINGSTATE_SUPPORTEDMACHINESTATES_VALUE_MAX 3
+enum {
+    CAP_ENUM_OVENOPERATINGSTATE_MACHINESTATE_VALUE_READY,
+    CAP_ENUM_OVENOPERATINGSTATE_MACHINESTATE_VALUE_RUNNING,
+    CAP_ENUM_OVENOPERATINGSTATE_MACHINESTATE_VALUE_PAUSED,
+    CAP_ENUM_OVENOPERATINGSTATE_MACHINESTATE_VALUE_MAX
+};
+
+enum {
+    CAP_ENUM_OVENOPERATINGSTATE_PROGRESS_UNIT_PERCENT,
+    CAP_ENUM_OVENOPERATINGSTATE_PROGRESS_UNIT_MAX
+};
+
+static const struct iot_caps_ovenOperatingState {
+    const char *id;
+    const struct ovenOperatingState_attr_ovenJobState {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_OVENOPERATINGSTATE_OVENJOBSTATE_VALUE_MAX];
+        const char *value_cleaning;
+        const char *value_cooking;
+        const char *value_cooling;
+        const char *value_draining;
+        const char *value_preheat;
+        const char *value_ready;
+        const char *value_rinsing;
+        const char *value_finished;
+        const char *value_scheduledStart;
+        const char *value_warming;
+        const char *value_defrosting;
+        const char *value_sensing;
+        const char *value_searing;
+        const char *value_fastPreheat;
+        const char *value_scheduledEnd;
+        const char *value_stoneHeating;
+        const char *value_timeHoldPreheat;
+    } attr_ovenJobState;
+    const struct ovenOperatingState_attr_completionTime {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_completionTime;
+    const struct ovenOperatingState_attr_supportedMachineStates {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_OVENOPERATINGSTATE_SUPPORTEDMACHINESTATES_VALUE_MAX];
+        const char *value_ready;
+        const char *value_running;
+        const char *value_paused;
+    } attr_supportedMachineStates;
+    const struct ovenOperatingState_attr_progress {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_OVENOPERATINGSTATE_PROGRESS_UNIT_MAX];
+        const char *unit_percent;
+        const int min;
+        const int max;
+    } attr_progress;
+    const struct ovenOperatingState_attr_operationTime {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const int min;
+    } attr_operationTime;
+    const struct ovenOperatingState_attr_machineState {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_OVENOPERATINGSTATE_MACHINESTATE_VALUE_MAX];
+        const char *value_ready;
+        const char *value_running;
+        const char *value_paused;
+    } attr_machineState;
+    const struct ovenOperatingState_cmd_start { const char* name; } cmd_start;
+    const struct ovenOperatingState_cmd_stop { const char* name; } cmd_stop;
+    const struct ovenOperatingState_cmd_setMachineState { const char* name; } cmd_setMachineState;
+} caps_helper_ovenOperatingState = {
+    .id = "ovenOperatingState",
+    .attr_ovenJobState = {
+        .name = "ovenJobState",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"cleaning", "cooking", "cooling", "draining", "preheat", "ready", "rinsing", "finished", "scheduledStart", "warming", "defrosting", "sensing", "searing", "fastPreheat", "scheduledEnd", "stoneHeating", "timeHoldPreheat"},
+        .value_cleaning = "cleaning",
+        .value_cooking = "cooking",
+        .value_cooling = "cooling",
+        .value_draining = "draining",
+        .value_preheat = "preheat",
+        .value_ready = "ready",
+        .value_rinsing = "rinsing",
+        .value_finished = "finished",
+        .value_scheduledStart = "scheduledStart",
+        .value_warming = "warming",
+        .value_defrosting = "defrosting",
+        .value_sensing = "sensing",
+        .value_searing = "searing",
+        .value_fastPreheat = "fastPreheat",
+        .value_scheduledEnd = "scheduledEnd",
+        .value_stoneHeating = "stoneHeating",
+        .value_timeHoldPreheat = "timeHoldPreheat",
+    },
+    .attr_completionTime = {
+        .name = "completionTime",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .attr_supportedMachineStates = {
+        .name = "supportedMachineStates",
+        .property = ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"ready", "running", "paused"},
+        .value_ready = "ready",
+        .value_running = "running",
+        .value_paused = "paused",
+    },
+    .attr_progress = {
+        .name = "progress",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .units = {"%"},
+        .unit_percent = "%",
+        .min = 0,
+        .max = 100,
+    },
+    .attr_operationTime = {
+        .name = "operationTime",
+        .property = ATTR_SET_VALUE_MIN,
+        .valueType = VALUE_TYPE_INTEGER,
+        .min = 0,
+    },
+    .attr_machineState = {
+        .name = "machineState",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"ready", "running", "paused"},
+        .value_ready = "ready",
+        .value_running = "running",
+        .value_paused = "paused",
+    },
+    .cmd_start = { .name = "start" }, // arguments: mode(string) time(integer) setpoint(integer) 
+    .cmd_stop = { .name = "stop" },
+    .cmd_setMachineState = { .name = "setMachineState" }, // arguments: state(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_OVEN_OPERATING_STATE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_ovenSetpoint.h b/examples/Smart_Switch/st/caps/iot_caps_helper_ovenSetpoint.h
new file mode 100644
index 000000000..0a2d0c677
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_ovenSetpoint.h
@@ -0,0 +1,52 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_OVEN_SETPOINT_
+#define _IOT_CAPS_HELPER_OVEN_SETPOINT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static const struct iot_caps_ovenSetpoint {
+    const char *id;
+    const struct ovenSetpoint_attr_ovenSetpoint {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const int min;
+    } attr_ovenSetpoint;
+    const struct ovenSetpoint_cmd_setOvenSetpoint { const char* name; } cmd_setOvenSetpoint;
+} caps_helper_ovenSetpoint = {
+    .id = "ovenSetpoint",
+    .attr_ovenSetpoint = {
+        .name = "ovenSetpoint",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .min = 0,
+    },
+    .cmd_setOvenSetpoint = { .name = "setOvenSetpoint" }, // arguments: setpoint(integer) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_OVEN_SETPOINT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_pHMeasurement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_pHMeasurement.h
new file mode 100644
index 000000000..3fa09f33a
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_pHMeasurement.h
@@ -0,0 +1,61 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2022 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_PH_MEASUREMENT_
+#define _IOT_CAPS_HELPER_PH_MEASUREMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_PHMEASUREMENT_PH_UNIT_PH,
+    CAP_ENUM_PHMEASUREMENT_PH_UNIT_MAX
+};
+
+static const struct iot_caps_pHMeasurement {
+    const char *id;
+    const struct pHMeasurement_attr_pH {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_PHMEASUREMENT_PH_UNIT_MAX];
+        const char *unit_pH;
+        const double min;
+        const double max;
+    } attr_pH;
+} caps_helper_pHMeasurement = {
+    .id = "pHMeasurement",
+    .attr_pH = {
+        .name = "pH",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"pH"},
+        .unit_pH = "pH",
+        .min = 0,
+        .max = 14,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_PH_MEASUREMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_panicAlarm.h b/examples/Smart_Switch/st/caps/iot_caps_helper_panicAlarm.h
new file mode 100755
index 000000000..022f6b518
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_panicAlarm.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2022 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_PANIC_ALARM_
+#define _IOT_CAPS_HELPER_PANIC_ALARM_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_PANICALARM_PANICALARM_VALUE_PANIC,
+    CAP_ENUM_PANICALARM_PANICALARM_VALUE_CLEAR,
+    CAP_ENUM_PANICALARM_PANICALARM_VALUE_MAX
+};
+
+static const struct iot_caps_panicAlarm {
+    const char *id;
+    const struct panicAlarm_attr_panicAlarm {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_PANICALARM_PANICALARM_VALUE_MAX];
+        const char *value_panic;
+        const char *value_clear;
+    } attr_panicAlarm;
+} caps_helper_panicAlarm = {
+    .id = "panicAlarm",
+    .attr_panicAlarm = {
+        .name = "panicAlarm",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"panic", "clear"},
+        .value_panic = "panic",
+        .value_clear = "clear",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_PANIC_ALARM_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_powerMeter.h b/examples/Smart_Switch/st/caps/iot_caps_helper_powerMeter.h
new file mode 100644
index 000000000..e502e90c3
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_powerMeter.h
@@ -0,0 +1,59 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_POWER_METER_
+#define _IOT_CAPS_HELPER_POWER_METER_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_POWERMETER_POWER_UNIT_W,
+    CAP_ENUM_POWERMETER_POWER_UNIT_MAX
+};
+
+static const struct iot_caps_powerMeter {
+    const char *id;
+    const struct powerMeter_attr_power {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_POWERMETER_POWER_UNIT_MAX];
+        const char *unit_W;
+        const double min;
+    } attr_power;
+} caps_helper_powerMeter = {
+    .id = "powerMeter",
+    .attr_power = {
+        .name = "power",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"W"},
+        .unit_W = "W",
+        .min = 0,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_POWER_METER_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_powerSource.h b/examples/Smart_Switch/st/caps/iot_caps_helper_powerSource.h
new file mode 100644
index 000000000..ca7f47a0f
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_powerSource.h
@@ -0,0 +1,66 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_POWER_SOURCE_
+#define _IOT_CAPS_HELPER_POWER_SOURCE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_POWERSOURCE_POWERSOURCE_VALUE_BATTERY,
+    CAP_ENUM_POWERSOURCE_POWERSOURCE_VALUE_DC,
+    CAP_ENUM_POWERSOURCE_POWERSOURCE_VALUE_MAINS,
+    CAP_ENUM_POWERSOURCE_POWERSOURCE_VALUE_UNKNOWN,
+    CAP_ENUM_POWERSOURCE_POWERSOURCE_VALUE_MAX
+};
+
+static const struct iot_caps_powerSource {
+    const char *id;
+    const struct powerSource_attr_powerSource {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_POWERSOURCE_POWERSOURCE_VALUE_MAX];
+        const char *value_battery;
+        const char *value_dc;
+        const char *value_mains;
+        const char *value_unknown;
+    } attr_powerSource;
+} caps_helper_powerSource = {
+    .id = "powerSource",
+    .attr_powerSource = {
+        .name = "powerSource",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"battery", "dc", "mains", "unknown"},
+        .value_battery = "battery",
+        .value_dc = "dc",
+        .value_mains = "mains",
+        .value_unknown = "unknown",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_POWER_SOURCE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_presenceSensor.h b/examples/Smart_Switch/st/caps/iot_caps_helper_presenceSensor.h
new file mode 100644
index 000000000..10796a04c
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_presenceSensor.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_PRESENCE_SENSOR_
+#define _IOT_CAPS_HELPER_PRESENCE_SENSOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_PRESENCESENSOR_PRESENCE_VALUE_PRESENT,
+    CAP_ENUM_PRESENCESENSOR_PRESENCE_VALUE_NOT_PRESENT,
+    CAP_ENUM_PRESENCESENSOR_PRESENCE_VALUE_MAX
+};
+
+static const struct iot_caps_presenceSensor {
+    const char *id;
+    const struct presenceSensor_attr_presence {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_PRESENCESENSOR_PRESENCE_VALUE_MAX];
+        const char *value_present;
+        const char *value_not_present;
+    } attr_presence;
+} caps_helper_presenceSensor = {
+    .id = "presenceSensor",
+    .attr_presence = {
+        .name = "presence",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"present", "not present"},
+        .value_present = "present",
+        .value_not_present = "not present",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_PRESENCE_SENSOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_radonHealthConcern.h b/examples/Smart_Switch/st/caps/iot_caps_helper_radonHealthConcern.h
new file mode 100755
index 000000000..4abb49f64
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_radonHealthConcern.h
@@ -0,0 +1,72 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2022 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_RADON_HEALTH_CONCERN_
+#define _IOT_CAPS_HELPER_RADON_HEALTH_CONCERN_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_RADONHEALTHCONCERN_RADONHEALTHCONCERN_VALUE_GOOD,
+    CAP_ENUM_RADONHEALTHCONCERN_RADONHEALTHCONCERN_VALUE_MODERATE,
+    CAP_ENUM_RADONHEALTHCONCERN_RADONHEALTHCONCERN_VALUE_SLIGHTLYUNHEALTHY,
+    CAP_ENUM_RADONHEALTHCONCERN_RADONHEALTHCONCERN_VALUE_UNHEALTHY,
+    CAP_ENUM_RADONHEALTHCONCERN_RADONHEALTHCONCERN_VALUE_VERYUNHEALTHY,
+    CAP_ENUM_RADONHEALTHCONCERN_RADONHEALTHCONCERN_VALUE_HAZARDOUS,
+    CAP_ENUM_RADONHEALTHCONCERN_RADONHEALTHCONCERN_VALUE_MAX
+};
+
+static const struct iot_caps_radonHealthConcern {
+    const char *id;
+    const struct radonHealthConcern_attr_radonHealthConcern {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_RADONHEALTHCONCERN_RADONHEALTHCONCERN_VALUE_MAX];
+        const char *value_good;
+        const char *value_moderate;
+        const char *value_slightlyUnhealthy;
+        const char *value_unhealthy;
+        const char *value_veryUnhealthy;
+        const char *value_hazardous;
+    } attr_radonHealthConcern;
+} caps_helper_radonHealthConcern = {
+    .id = "radonHealthConcern",
+    .attr_radonHealthConcern = {
+        .name = "radonHealthConcern",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"good", "moderate", "slightlyUnhealthy", "unhealthy", "veryUnhealthy", "hazardous"},
+        .value_good = "good",
+        .value_moderate = "moderate",
+        .value_slightlyUnhealthy = "slightlyUnhealthy",
+        .value_unhealthy = "unhealthy",
+        .value_veryUnhealthy = "veryUnhealthy",
+        .value_hazardous = "hazardous",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_RADON_HEALTH_CONCERN_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_rapidCooling.h b/examples/Smart_Switch/st/caps/iot_caps_helper_rapidCooling.h
new file mode 100644
index 000000000..18cd22545
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_rapidCooling.h
@@ -0,0 +1,62 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_RAPID_COOLING_
+#define _IOT_CAPS_HELPER_RAPID_COOLING_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_RAPIDCOOLING_RAPIDCOOLING_VALUE_OFF,
+    CAP_ENUM_RAPIDCOOLING_RAPIDCOOLING_VALUE_ON,
+    CAP_ENUM_RAPIDCOOLING_RAPIDCOOLING_VALUE_MAX
+};
+
+static const struct iot_caps_rapidCooling {
+    const char *id;
+    const struct rapidCooling_attr_rapidCooling {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_RAPIDCOOLING_RAPIDCOOLING_VALUE_MAX];
+        const char *value_off;
+        const char *value_on;
+    } attr_rapidCooling;
+    const struct rapidCooling_cmd_setRapidCooling { const char* name; } cmd_setRapidCooling;
+} caps_helper_rapidCooling = {
+    .id = "rapidCooling",
+    .attr_rapidCooling = {
+        .name = "rapidCooling",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"off", "on"},
+        .value_off = "off",
+        .value_on = "on",
+    },
+    .cmd_setRapidCooling = { .name = "setRapidCooling" }, // arguments: rapidCooling(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_RAPID_COOLING_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_refresh.h b/examples/Smart_Switch/st/caps/iot_caps_helper_refresh.h
new file mode 100644
index 000000000..b226c9a61
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_refresh.h
@@ -0,0 +1,40 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_REFRESH_
+#define _IOT_CAPS_HELPER_REFRESH_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static const struct iot_caps_refresh {
+    const char *id;
+    const struct refresh_cmd_refresh { const char* name; } cmd_refresh;
+} caps_helper_refresh = {
+    .id = "refresh",
+    .cmd_refresh = { .name = "refresh" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_REFRESH_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_relativeHumidityMeasurement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_relativeHumidityMeasurement.h
new file mode 100644
index 000000000..e7e594cac
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_relativeHumidityMeasurement.h
@@ -0,0 +1,61 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_RELATIVE_HUMIDITY_MEASUREMENT_
+#define _IOT_CAPS_HELPER_RELATIVE_HUMIDITY_MEASUREMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_RELATIVEHUMIDITYMEASUREMENT_HUMIDITY_UNIT_PERCENT,
+    CAP_ENUM_RELATIVEHUMIDITYMEASUREMENT_HUMIDITY_UNIT_MAX
+};
+
+static const struct iot_caps_relativeHumidityMeasurement {
+    const char *id;
+    const struct relativeHumidityMeasurement_attr_humidity {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_RELATIVEHUMIDITYMEASUREMENT_HUMIDITY_UNIT_MAX];
+        const char *unit_percent;
+        const double min;
+        const double max;
+    } attr_humidity;
+} caps_helper_relativeHumidityMeasurement = {
+    .id = "relativeHumidityMeasurement",
+    .attr_humidity = {
+        .name = "humidity",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"%"},
+        .unit_percent = "%",
+        .min = 0,
+        .max = 100,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_RELATIVE_HUMIDITY_MEASUREMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_remoteControlStatus.h b/examples/Smart_Switch/st/caps/iot_caps_helper_remoteControlStatus.h
new file mode 100644
index 000000000..9480cd9e2
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_remoteControlStatus.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_REMOTE_CONTROL_STATUS_
+#define _IOT_CAPS_HELPER_REMOTE_CONTROL_STATUS_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_REMOTECONTROLSTATUS_REMOTECONTROLENABLED_VALUE_TRUE,
+    CAP_ENUM_REMOTECONTROLSTATUS_REMOTECONTROLENABLED_VALUE_FALSE,
+    CAP_ENUM_REMOTECONTROLSTATUS_REMOTECONTROLENABLED_VALUE_MAX,
+};
+
+static const struct iot_caps_remoteControlStatus {
+    const char *id;
+    const struct remoteControlStatus_attr_remoteControlEnabled {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_REMOTECONTROLSTATUS_REMOTECONTROLENABLED_VALUE_MAX];
+        const char *value_true;
+        const char *value_false;
+    } attr_remoteControlEnabled;
+} caps_helper_remoteControlStatus = {
+    .id = "remoteControlStatus",
+    .attr_remoteControlEnabled = {
+        .name = "remoteControlEnabled",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"true", "false"},
+        .value_true = "true",
+        .value_false = "false",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HELPER_REMOTE_CONTROL_STATUS_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_robotCleanerMovement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_robotCleanerMovement.h
new file mode 100644
index 000000000..035b23fc0
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_robotCleanerMovement.h
@@ -0,0 +1,86 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_ROBOT_CLEANER_MOVEMENT_
+#define _IOT_CAPS_HELPER_ROBOT_CLEANER_MOVEMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_ROBOTCLEANERMOVEMENT_ROBOTCLEANERMOVEMENT_VALUE_HOMING,
+    CAP_ENUM_ROBOTCLEANERMOVEMENT_ROBOTCLEANERMOVEMENT_VALUE_IDLE,
+    CAP_ENUM_ROBOTCLEANERMOVEMENT_ROBOTCLEANERMOVEMENT_VALUE_CHARGING,
+    CAP_ENUM_ROBOTCLEANERMOVEMENT_ROBOTCLEANERMOVEMENT_VALUE_ALARM,
+    CAP_ENUM_ROBOTCLEANERMOVEMENT_ROBOTCLEANERMOVEMENT_VALUE_POWEROFF,
+    CAP_ENUM_ROBOTCLEANERMOVEMENT_ROBOTCLEANERMOVEMENT_VALUE_RESERVE,
+    CAP_ENUM_ROBOTCLEANERMOVEMENT_ROBOTCLEANERMOVEMENT_VALUE_POINT,
+    CAP_ENUM_ROBOTCLEANERMOVEMENT_ROBOTCLEANERMOVEMENT_VALUE_AFTER,
+    CAP_ENUM_ROBOTCLEANERMOVEMENT_ROBOTCLEANERMOVEMENT_VALUE_CLEANING,
+    CAP_ENUM_ROBOTCLEANERMOVEMENT_ROBOTCLEANERMOVEMENT_VALUE_PAUSE,
+    CAP_ENUM_ROBOTCLEANERMOVEMENT_ROBOTCLEANERMOVEMENT_VALUE_MAX
+};
+
+static const struct iot_caps_robotCleanerMovement {
+    const char *id;
+    const struct robotCleanerMovement_attr_robotCleanerMovement {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_ROBOTCLEANERMOVEMENT_ROBOTCLEANERMOVEMENT_VALUE_MAX];
+        const char *value_homing;
+        const char *value_idle;
+        const char *value_charging;
+        const char *value_alarm;
+        const char *value_powerOff;
+        const char *value_reserve;
+        const char *value_point;
+        const char *value_after;
+        const char *value_cleaning;
+        const char *value_pause;
+    } attr_robotCleanerMovement;
+    const struct robotCleanerMovement_cmd_setRobotCleanerMovement { const char* name; } cmd_setRobotCleanerMovement;
+} caps_helper_robotCleanerMovement = {
+    .id = "robotCleanerMovement",
+    .attr_robotCleanerMovement = {
+        .name = "robotCleanerMovement",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"homing", "idle", "charging", "alarm", "powerOff", "reserve", "point", "after", "cleaning", "pause"},
+        .value_homing = "homing",
+        .value_idle = "idle",
+        .value_charging = "charging",
+        .value_alarm = "alarm",
+        .value_powerOff = "powerOff",
+        .value_reserve = "reserve",
+        .value_point = "point",
+        .value_after = "after",
+        .value_cleaning = "cleaning",
+        .value_pause = "pause",
+    },
+    .cmd_setRobotCleanerMovement = { .name = "setRobotCleanerMovement" }, // arguments: mode(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_ROBOT_CLEANER_MOVEMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_robotCleanerTurboMode.h b/examples/Smart_Switch/st/caps/iot_caps_helper_robotCleanerTurboMode.h
new file mode 100644
index 000000000..3eda79a2d
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_robotCleanerTurboMode.h
@@ -0,0 +1,65 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_ROBOT_CLEANER_TURBO_MODE_
+#define _IOT_CAPS_HELPER_ROBOT_CLEANER_TURBO_MODE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_ROBOTCLEANERTURBOMODE_ROBOTCLEANERTURBOMODE_VALUE_ON,
+    CAP_ENUM_ROBOTCLEANERTURBOMODE_ROBOTCLEANERTURBOMODE_VALUE_OFF,
+    CAP_ENUM_ROBOTCLEANERTURBOMODE_ROBOTCLEANERTURBOMODE_VALUE_SILENCE,
+    CAP_ENUM_ROBOTCLEANERTURBOMODE_ROBOTCLEANERTURBOMODE_VALUE_MAX
+};
+
+static const struct iot_caps_robotCleanerTurboMode {
+    const char *id;
+    const struct robotCleanerTurboMode_attr_robotCleanerTurboMode {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_ROBOTCLEANERTURBOMODE_ROBOTCLEANERTURBOMODE_VALUE_MAX];
+        const char *value_on;
+        const char *value_off;
+        const char *value_silence;
+    } attr_robotCleanerTurboMode;
+    const struct robotCleanerTurboMode_cmd_setRobotCleanerTurboMode { const char* name; } cmd_setRobotCleanerTurboMode;
+} caps_helper_robotCleanerTurboMode = {
+    .id = "robotCleanerTurboMode",
+    .attr_robotCleanerTurboMode = {
+        .name = "robotCleanerTurboMode",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"on", "off", "silence"},
+        .value_on = "on",
+        .value_off = "off",
+        .value_silence = "silence",
+    },
+    .cmd_setRobotCleanerTurboMode = { .name = "setRobotCleanerTurboMode" }, // arguments: mode(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_ROBOT_CLEANER_TURBO_MODE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_samsungTV.h b/examples/Smart_Switch/st/caps/iot_caps_helper_samsungTV.h
new file mode 100644
index 000000000..450aba728
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_samsungTV.h
@@ -0,0 +1,186 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_SAMSUNG_TV_
+#define _IOT_CAPS_HELPER_SAMSUNG_TV_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_SAMSUNGTV_SWITCH_VALUE_ON,
+    CAP_ENUM_SAMSUNGTV_SWITCH_VALUE_OFF,
+    CAP_ENUM_SAMSUNGTV_SWITCH_VALUE_MAX
+};
+
+enum {
+    CAP_ENUM_SAMSUNGTV_MUTE_VALUE_MUTED,
+    CAP_ENUM_SAMSUNGTV_MUTE_VALUE_UNKNOWN,
+    CAP_ENUM_SAMSUNGTV_MUTE_VALUE_UNMUTED,
+    CAP_ENUM_SAMSUNGTV_MUTE_VALUE_MAX
+};
+
+enum {
+    CAP_ENUM_SAMSUNGTV_PICTUREMODE_VALUE_DYNAMIC,
+    CAP_ENUM_SAMSUNGTV_PICTUREMODE_VALUE_MOVIE,
+    CAP_ENUM_SAMSUNGTV_PICTUREMODE_VALUE_STANDARD,
+    CAP_ENUM_SAMSUNGTV_PICTUREMODE_VALUE_UNKNOWN,
+    CAP_ENUM_SAMSUNGTV_PICTUREMODE_VALUE_MAX
+};
+
+enum {
+    CAP_ENUM_SAMSUNGTV_SOUNDMODE_VALUE_CLEAR_VOICE,
+    CAP_ENUM_SAMSUNGTV_SOUNDMODE_VALUE_MOVIE,
+    CAP_ENUM_SAMSUNGTV_SOUNDMODE_VALUE_MUSIC,
+    CAP_ENUM_SAMSUNGTV_SOUNDMODE_VALUE_STANDARD,
+    CAP_ENUM_SAMSUNGTV_SOUNDMODE_VALUE_UNKNOWN,
+    CAP_ENUM_SAMSUNGTV_SOUNDMODE_VALUE_MAX
+};
+
+static const struct iot_caps_samsungTV {
+    const char *id;
+    const struct samsungTV_attr_volume {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const int min;
+    } attr_volume;
+    const struct samsungTV_attr_messageButton {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_messageButton;
+    const struct samsungTV_attr_switch {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_SAMSUNGTV_SWITCH_VALUE_MAX];
+        const char *value_on;
+        const char *value_off;
+    } attr_switch;
+    const struct samsungTV_attr_mute {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_SAMSUNGTV_MUTE_VALUE_MAX];
+        const char *value_muted;
+        const char *value_unknown;
+        const char *value_unmuted;
+    } attr_mute;
+    const struct samsungTV_attr_pictureMode {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_SAMSUNGTV_PICTUREMODE_VALUE_MAX];
+        const char *value_dynamic;
+        const char *value_movie;
+        const char *value_standard;
+        const char *value_unknown;
+    } attr_pictureMode;
+    const struct samsungTV_attr_soundMode {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_SAMSUNGTV_SOUNDMODE_VALUE_MAX];
+        const char *value_clear_voice;
+        const char *value_movie;
+        const char *value_music;
+        const char *value_standard;
+        const char *value_unknown;
+    } attr_soundMode;
+    const struct samsungTV_cmd_on { const char* name; } cmd_on;
+    const struct samsungTV_cmd_off { const char* name; } cmd_off;
+    const struct samsungTV_cmd_mute { const char* name; } cmd_mute;
+    const struct samsungTV_cmd_unmute { const char* name; } cmd_unmute;
+    const struct samsungTV_cmd_setPictureMode { const char* name; } cmd_setPictureMode;
+    const struct samsungTV_cmd_setSoundMode { const char* name; } cmd_setSoundMode;
+    const struct samsungTV_cmd_volumeDown { const char* name; } cmd_volumeDown;
+    const struct samsungTV_cmd_showMessage { const char* name; } cmd_showMessage;
+    const struct samsungTV_cmd_volumeUp { const char* name; } cmd_volumeUp;
+    const struct samsungTV_cmd_setVolume { const char* name; } cmd_setVolume;
+} caps_helper_samsungTV = {
+    .id = "samsungTV",
+    .attr_volume = {
+        .name = "volume",
+        .property = ATTR_SET_VALUE_MIN,
+        .valueType = VALUE_TYPE_INTEGER,
+        .min = 0,
+    },
+    .attr_messageButton = {
+        .name = "messageButton",
+        .property = 0,
+        .valueType = VALUE_TYPE_OBJECT,
+    },
+    .attr_switch = {
+        .name = "switch",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"on", "off"},
+        .value_on = "on",
+        .value_off = "off",
+    },
+    .attr_mute = {
+        .name = "mute",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"muted", "unknown", "unmuted"},
+        .value_muted = "muted",
+        .value_unknown = "unknown",
+        .value_unmuted = "unmuted",
+    },
+    .attr_pictureMode = {
+        .name = "pictureMode",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"dynamic", "movie", "standard", "unknown"},
+        .value_dynamic = "dynamic",
+        .value_movie = "movie",
+        .value_standard = "standard",
+        .value_unknown = "unknown",
+    },
+    .attr_soundMode = {
+        .name = "soundMode",
+        .property = 0,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"clear voice", "movie", "music", "standard", "unknown"},
+        .value_clear_voice = "clear voice",
+        .value_movie = "movie",
+        .value_music = "music",
+        .value_standard = "standard",
+        .value_unknown = "unknown",
+    },
+    .cmd_on = { .name = "on" },
+    .cmd_off = { .name = "off" },
+    .cmd_mute = { .name = "mute" },
+    .cmd_unmute = { .name = "unmute" },
+    .cmd_setPictureMode = { .name = "setPictureMode" }, // arguments: pictureMode(string) 
+    .cmd_setSoundMode = { .name = "setSoundMode" }, // arguments: soundMode(string) 
+    .cmd_volumeDown = { .name = "volumeDown" },
+    .cmd_showMessage = { .name = "showMessage" }, // arguments: 1(string) 2(string) 3(string) 4(string) 
+    .cmd_volumeUp = { .name = "volumeUp" },
+    .cmd_setVolume = { .name = "setVolume" }, // arguments: volume(integer) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_SAMSUNG_TV_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_securitySystem.h b/examples/Smart_Switch/st/caps/iot_caps_helper_securitySystem.h
new file mode 100644
index 000000000..1a73400f6
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_securitySystem.h
@@ -0,0 +1,81 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_SECURITY_SYSTEM_
+#define _IOT_CAPS_HELPER_SECURITY_SYSTEM_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_SECURITYSYSTEM_SECURITYSYSTEMSTATUS_VALUE_ARMEDAWAY,
+    CAP_ENUM_SECURITYSYSTEM_SECURITYSYSTEMSTATUS_VALUE_ARMEDSTAY,
+    CAP_ENUM_SECURITYSYSTEM_SECURITYSYSTEMSTATUS_VALUE_DISARMED,
+    CAP_ENUM_SECURITYSYSTEM_SECURITYSYSTEMSTATUS_VALUE_MAX
+};
+
+static const struct iot_caps_securitySystem {
+    const char *id;
+    const struct securitySystem_attr_alarm {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const unsigned int max_length;
+    } attr_alarm;
+    const struct securitySystem_attr_securitySystemStatus {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_SECURITYSYSTEM_SECURITYSYSTEMSTATUS_VALUE_MAX];
+        const char *value_armedAway;
+        const char *value_armedStay;
+        const char *value_disarmed;
+    } attr_securitySystemStatus;
+    const struct securitySystem_cmd_armStay { const char* name; } cmd_armStay;
+    const struct securitySystem_cmd_disarm { const char* name; } cmd_disarm;
+    const struct securitySystem_cmd_armAway { const char* name; } cmd_armAway;
+} caps_helper_securitySystem = {
+    .id = "securitySystem",
+    .attr_alarm = {
+        .name = "alarm",
+        .property = ATTR_SET_VALUE_REQUIRED | ATTR_SET_MAX_LENGTH,
+        .valueType = VALUE_TYPE_STRING,
+        .max_length = 255,
+    },
+    .attr_securitySystemStatus = {
+        .name = "securitySystemStatus",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"armedAway", "armedStay", "disarmed"},
+        .value_armedAway = "armedAway",
+        .value_armedStay = "armedStay",
+        .value_disarmed = "disarmed",
+    },
+    .cmd_armStay = { .name = "armStay" }, // arguments: bypassAll(boolean) 
+    .cmd_disarm = { .name = "disarm" },
+    .cmd_armAway = { .name = "armAway" }, // arguments: bypassAll(boolean) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_SECURITY_SYSTEM_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_signalStrength.h b/examples/Smart_Switch/st/caps/iot_caps_helper_signalStrength.h
new file mode 100644
index 000000000..b9260959b
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_signalStrength.h
@@ -0,0 +1,75 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_SIGNAL_STRENGTH_
+#define _IOT_CAPS_HELPER_SIGNAL_STRENGTH_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_SIGNALSTRENGTH_RSSI_UNIT_DBM,
+    CAP_ENUM_SIGNALSTRENGTH_RSSI_UNIT_MAX
+};
+
+static const struct iot_caps_signalStrength {
+    const char *id;
+    const struct signalStrength_attr_rssi {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_SIGNALSTRENGTH_RSSI_UNIT_MAX];
+        const char *unit_dBm;
+        const double min;
+        const double max;
+    } attr_rssi;
+    const struct signalStrength_attr_lqi {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const int min;
+        const int max;
+    } attr_lqi;
+} caps_helper_signalStrength = {
+    .id = "signalStrength",
+    .attr_rssi = {
+        .name = "rssi",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"dBm"},
+        .unit_dBm = "dBm",
+        .min = -200,
+        .max = 0,
+    },
+    .attr_lqi = {
+        .name = "lqi",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .min = 0,
+        .max = 255,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_SIGNAL_STRENGTH_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_sleepSensor.h b/examples/Smart_Switch/st/caps/iot_caps_helper_sleepSensor.h
new file mode 100644
index 000000000..546e544e8
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_sleepSensor.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_SLEEP_SENSOR_
+#define _IOT_CAPS_HELPER_SLEEP_SENSOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_SLEEPSENSOR_SLEEPING_VALUE_NOT_SLEEPING,
+    CAP_ENUM_SLEEPSENSOR_SLEEPING_VALUE_SLEEPING,
+    CAP_ENUM_SLEEPSENSOR_SLEEPING_VALUE_MAX
+};
+
+static const struct iot_caps_sleepSensor {
+    const char *id;
+    const struct sleepSensor_attr_sleeping {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_SLEEPSENSOR_SLEEPING_VALUE_MAX];
+        const char *value_not_sleeping;
+        const char *value_sleeping;
+    } attr_sleeping;
+} caps_helper_sleepSensor = {
+    .id = "sleepSensor",
+    .attr_sleeping = {
+        .name = "sleeping",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"not sleeping", "sleeping"},
+        .value_not_sleeping = "not sleeping",
+        .value_sleeping = "sleeping",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_SLEEP_SENSOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_smokeDetector.h b/examples/Smart_Switch/st/caps/iot_caps_helper_smokeDetector.h
new file mode 100644
index 000000000..a68411612
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_smokeDetector.h
@@ -0,0 +1,63 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_SMOKE_DETECTOR_
+#define _IOT_CAPS_HELPER_SMOKE_DETECTOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_SMOKEDETECTOR_SMOKE_VALUE_CLEAR,
+    CAP_ENUM_SMOKEDETECTOR_SMOKE_VALUE_DETECTED,
+    CAP_ENUM_SMOKEDETECTOR_SMOKE_VALUE_TESTED,
+    CAP_ENUM_SMOKEDETECTOR_SMOKE_VALUE_MAX
+};
+
+static const struct iot_caps_smokeDetector {
+    const char *id;
+    const struct smokeDetector_attr_smoke {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_SMOKEDETECTOR_SMOKE_VALUE_MAX];
+        const char *value_clear;
+        const char *value_detected;
+        const char *value_tested;
+    } attr_smoke;
+} caps_helper_smokeDetector = {
+    .id = "smokeDetector",
+    .attr_smoke = {
+        .name = "smoke",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"clear", "detected", "tested"},
+        .value_clear = "clear",
+        .value_detected = "detected",
+        .value_tested = "tested",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_SMOKE_DETECTOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_soundPressureLevel.h b/examples/Smart_Switch/st/caps/iot_caps_helper_soundPressureLevel.h
new file mode 100644
index 000000000..d86b4f3e1
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_soundPressureLevel.h
@@ -0,0 +1,61 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_SOUND_PRESSURE_LEVEL_
+#define _IOT_CAPS_HELPER_SOUND_PRESSURE_LEVEL_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_SOUNDPRESSURELEVEL_SOUNDPRESSURELEVEL_UNIT_DB,
+    CAP_ENUM_SOUNDPRESSURELEVEL_SOUNDPRESSURELEVEL_UNIT_MAX
+};
+
+static const struct iot_caps_soundPressureLevel {
+    const char *id;
+    const struct soundPressureLevel_attr_soundPressureLevel {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_SOUNDPRESSURELEVEL_SOUNDPRESSURELEVEL_UNIT_MAX];
+        const char *unit_dB;
+        const double min;
+        const double max;
+    } attr_soundPressureLevel;
+} caps_helper_soundPressureLevel = {
+    .id = "soundPressureLevel",
+    .attr_soundPressureLevel = {
+        .name = "soundPressureLevel",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"dB"},
+        .unit_dB = "dB",
+        .min = 0,
+        .max = 194,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_SOUND_PRESSURE_LEVEL_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_soundSensor.h b/examples/Smart_Switch/st/caps/iot_caps_helper_soundSensor.h
new file mode 100644
index 000000000..40d41f9cb
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_soundSensor.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_SOUND_SENSOR_
+#define _IOT_CAPS_HELPER_SOUND_SENSOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_SOUNDSENSOR_SOUND_VALUE_DETECTED,
+    CAP_ENUM_SOUNDSENSOR_SOUND_VALUE_NOT_DETECTED,
+    CAP_ENUM_SOUNDSENSOR_SOUND_VALUE_MAX
+};
+
+static const struct iot_caps_soundSensor {
+    const char *id;
+    const struct soundSensor_attr_sound {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_SOUNDSENSOR_SOUND_VALUE_MAX];
+        const char *value_detected;
+        const char *value_not_detected;
+    } attr_sound;
+} caps_helper_soundSensor = {
+    .id = "soundSensor",
+    .attr_sound = {
+        .name = "sound",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"detected", "not detected"},
+        .value_detected = "detected",
+        .value_not_detected = "not detected",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_SOUND_SENSOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_switch.h b/examples/Smart_Switch/st/caps/iot_caps_helper_switch.h
new file mode 100644
index 000000000..4497a2ce8
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_switch.h
@@ -0,0 +1,64 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_SWITCH_
+#define _IOT_CAPS_HELPER_SWITCH_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_SWITCH_SWITCH_VALUE_ON,
+    CAP_ENUM_SWITCH_SWITCH_VALUE_OFF,
+    CAP_ENUM_SWITCH_SWITCH_VALUE_MAX
+};
+
+static const struct iot_caps_switch {
+    const char *id;
+    const struct switch_attr_switch {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_SWITCH_SWITCH_VALUE_MAX];
+        const char *value_on;
+        const char *value_off;
+    } attr_switch;
+    const struct switch_cmd_on { const char* name; } cmd_on;
+    const struct switch_cmd_off { const char* name; } cmd_off;
+} caps_helper_switch = {
+    .id = "switch",
+    .attr_switch = {
+        .name = "switch",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"on", "off"},
+        .value_on = "on",
+        .value_off = "off",
+    },
+    .cmd_on = { .name = "on" },
+    .cmd_off = { .name = "off" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_SWITCH_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_switchLevel.h b/examples/Smart_Switch/st/caps/iot_caps_helper_switchLevel.h
new file mode 100644
index 000000000..d6985ebef
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_switchLevel.h
@@ -0,0 +1,63 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_SWITCH_LEVEL_
+#define _IOT_CAPS_HELPER_SWITCH_LEVEL_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_SWITCHLEVEL_LEVEL_UNIT_PERCENT,
+    CAP_ENUM_SWITCHLEVEL_LEVEL_UNIT_MAX
+};
+
+static const struct iot_caps_switchLevel {
+    const char *id;
+    const struct switchLevel_attr_level {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_SWITCHLEVEL_LEVEL_UNIT_MAX];
+        const char *unit_percent;
+        const int min;
+        const int max;
+    } attr_level;
+    const struct switchLevel_cmd_setLevel { const char* name; } cmd_setLevel;
+} caps_helper_switchLevel = {
+    .id = "switchLevel",
+    .attr_level = {
+        .name = "level",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .units = {"%"},
+        .unit_percent = "%",
+        .min = 0,
+        .max = 100,
+    },
+    .cmd_setLevel = { .name = "setLevel" }, // arguments: level(integer) rate(integer) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_SWITCH_LEVEL_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_tamperAlert.h b/examples/Smart_Switch/st/caps/iot_caps_helper_tamperAlert.h
new file mode 100644
index 000000000..0109da601
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_tamperAlert.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_TAMPER_ALERT_
+#define _IOT_CAPS_HELPER_TAMPER_ALERT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_TAMPERALERT_TAMPER_VALUE_CLEAR,
+    CAP_ENUM_TAMPERALERT_TAMPER_VALUE_DETECTED,
+    CAP_ENUM_TAMPERALERT_TAMPER_VALUE_MAX
+};
+
+static const struct iot_caps_tamperAlert {
+    const char *id;
+    const struct tamperAlert_attr_tamper {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_TAMPERALERT_TAMPER_VALUE_MAX];
+        const char *value_clear;
+        const char *value_detected;
+    } attr_tamper;
+} caps_helper_tamperAlert = {
+    .id = "tamperAlert",
+    .attr_tamper = {
+        .name = "tamper",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"clear", "detected"},
+        .value_clear = "clear",
+        .value_detected = "detected",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_TAMPER_ALERT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_temperatureAlarm.h b/examples/Smart_Switch/st/caps/iot_caps_helper_temperatureAlarm.h
new file mode 100644
index 000000000..548ea82ce
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_temperatureAlarm.h
@@ -0,0 +1,66 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_TEMPERATURE_ALARM_
+#define _IOT_CAPS_HELPER_TEMPERATURE_ALARM_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_TEMPERATUREALARM_TEMPERATUREALARM_VALUE_CLEARED,
+    CAP_ENUM_TEMPERATUREALARM_TEMPERATUREALARM_VALUE_FREEZE,
+    CAP_ENUM_TEMPERATUREALARM_TEMPERATUREALARM_VALUE_HEAT,
+    CAP_ENUM_TEMPERATUREALARM_TEMPERATUREALARM_VALUE_RATEOFRISE,
+    CAP_ENUM_TEMPERATUREALARM_TEMPERATUREALARM_VALUE_MAX
+};
+
+static const struct iot_caps_temperatureAlarm {
+    const char *id;
+    const struct temperatureAlarm_attr_temperatureAlarm {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_TEMPERATUREALARM_TEMPERATUREALARM_VALUE_MAX];
+        const char *value_cleared;
+        const char *value_freeze;
+        const char *value_heat;
+        const char *value_rateOfRise;
+    } attr_temperatureAlarm;
+} caps_helper_temperatureAlarm = {
+    .id = "temperatureAlarm",
+    .attr_temperatureAlarm = {
+        .name = "temperatureAlarm",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"cleared", "freeze", "heat", "rateOfRise"},
+        .value_cleared = "cleared",
+        .value_freeze = "freeze",
+        .value_heat = "heat",
+        .value_rateOfRise = "rateOfRise",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_TEMPERATURE_ALARM_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_temperatureMeasurement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_temperatureMeasurement.h
new file mode 100644
index 000000000..fd0eeffe1
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_temperatureMeasurement.h
@@ -0,0 +1,64 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_TEMPERATURE_MEASUREMENT_
+#define _IOT_CAPS_HELPER_TEMPERATURE_MEASUREMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_TEMPERATUREMEASUREMENT_TEMPERATURE_UNIT_F,
+    CAP_ENUM_TEMPERATUREMEASUREMENT_TEMPERATURE_UNIT_C,
+    CAP_ENUM_TEMPERATUREMEASUREMENT_TEMPERATURE_UNIT_MAX
+};
+
+static const struct iot_caps_temperatureMeasurement {
+    const char *id;
+    const struct temperatureMeasurement_attr_temperature {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_TEMPERATUREMEASUREMENT_TEMPERATURE_UNIT_MAX];
+        const char *unit_F;
+        const char *unit_C;
+        const double min;
+        const double max;
+    } attr_temperature;
+} caps_helper_temperatureMeasurement = {
+    .id = "temperatureMeasurement",
+    .attr_temperature = {
+        .name = "temperature",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED | ATTR_SET_UNIT_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"F", "C"},
+        .unit_F = "F",
+        .unit_C = "C",
+        .min = -460,
+        .max = 10000,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_TEMPERATURE_MEASUREMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatCoolingSetpoint.h b/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatCoolingSetpoint.h
new file mode 100644
index 000000000..74843f8f7
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatCoolingSetpoint.h
@@ -0,0 +1,66 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_THERMOSTAT_COOLING_SETPOINT_
+#define _IOT_CAPS_HELPER_THERMOSTAT_COOLING_SETPOINT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_THERMOSTATCOOLINGSETPOINT_COOLINGSETPOINT_UNIT_F,
+    CAP_ENUM_THERMOSTATCOOLINGSETPOINT_COOLINGSETPOINT_UNIT_C,
+    CAP_ENUM_THERMOSTATCOOLINGSETPOINT_COOLINGSETPOINT_UNIT_MAX
+};
+
+static const struct iot_caps_thermostatCoolingSetpoint {
+    const char *id;
+    const struct thermostatCoolingSetpoint_attr_coolingSetpoint {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_THERMOSTATCOOLINGSETPOINT_COOLINGSETPOINT_UNIT_MAX];
+        const char *unit_F;
+        const char *unit_C;
+        const double min;
+        const double max;
+    } attr_coolingSetpoint;
+    const struct thermostatCoolingSetpoint_cmd_setCoolingSetpoint { const char* name; } cmd_setCoolingSetpoint;
+} caps_helper_thermostatCoolingSetpoint = {
+    .id = "thermostatCoolingSetpoint",
+    .attr_coolingSetpoint = {
+        .name = "coolingSetpoint",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED | ATTR_SET_UNIT_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"F", "C"},
+        .unit_F = "F",
+        .unit_C = "C",
+        .min = -460,
+        .max = 10000,
+    },
+    .cmd_setCoolingSetpoint = { .name = "setCoolingSetpoint" }, // arguments: setpoint(number) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_THERMOSTAT_COOLING_SETPOINT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatFanMode.h b/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatFanMode.h
new file mode 100644
index 000000000..8323a5be4
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatFanMode.h
@@ -0,0 +1,95 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_THERMOSTAT_FAN_MODE_
+#define _IOT_CAPS_HELPER_THERMOSTAT_FAN_MODE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_THERMOSTATFANMODE_THERMOSTATFANMODE_VALUE_AUTO,
+    CAP_ENUM_THERMOSTATFANMODE_THERMOSTATFANMODE_VALUE_CIRCULATE,
+    CAP_ENUM_THERMOSTATFANMODE_THERMOSTATFANMODE_VALUE_FOLLOWSCHEDULE,
+    CAP_ENUM_THERMOSTATFANMODE_THERMOSTATFANMODE_VALUE_ON,
+    CAP_ENUM_THERMOSTATFANMODE_THERMOSTATFANMODE_VALUE_MAX
+};
+
+#define CAP_ENUM_THERMOSTATFANMODE_SUPPORTEDTHERMOSTATFANMODES_VALUE_MAX 4
+static const struct iot_caps_thermostatFanMode {
+    const char *id;
+    const struct thermostatFanMode_attr_thermostatFanMode {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_THERMOSTATFANMODE_THERMOSTATFANMODE_VALUE_MAX];
+        const char *value_auto;
+        const char *value_circulate;
+        const char *value_followschedule;
+        const char *value_on;
+    } attr_thermostatFanMode;
+    const struct thermostatFanMode_attr_supportedThermostatFanModes {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_THERMOSTATFANMODE_SUPPORTEDTHERMOSTATFANMODES_VALUE_MAX];
+        const char *value_auto;
+        const char *value_circulate;
+        const char *value_followschedule;
+        const char *value_on;
+    } attr_supportedThermostatFanModes;
+    const struct thermostatFanMode_cmd_fanOn { const char* name; } cmd_fanOn;
+    const struct thermostatFanMode_cmd_fanCirculate { const char* name; } cmd_fanCirculate;
+    const struct thermostatFanMode_cmd_fanAuto { const char* name; } cmd_fanAuto;
+    const struct thermostatFanMode_cmd_setThermostatFanMode { const char* name; } cmd_setThermostatFanMode;
+} caps_helper_thermostatFanMode = {
+    .id = "thermostatFanMode",
+    .attr_thermostatFanMode = {
+        .name = "thermostatFanMode",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"auto", "circulate", "followschedule", "on"},
+        .value_auto = "auto",
+        .value_circulate = "circulate",
+        .value_followschedule = "followschedule",
+        .value_on = "on",
+    },
+    .attr_supportedThermostatFanModes = {
+        .name = "supportedThermostatFanModes",
+        .property = ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"auto", "circulate", "followschedule", "on"},
+        .value_auto = "auto",
+        .value_circulate = "circulate",
+        .value_followschedule = "followschedule",
+        .value_on = "on",
+    },
+    .cmd_fanOn = { .name = "fanOn" },
+    .cmd_fanCirculate = { .name = "fanCirculate" },
+    .cmd_fanAuto = { .name = "fanAuto" },
+    .cmd_setThermostatFanMode = { .name = "setThermostatFanMode" }, // arguments: mode(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_THERMOSTAT_FAN_MODE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatHeatingSetpoint.h b/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatHeatingSetpoint.h
new file mode 100644
index 000000000..6021935d7
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatHeatingSetpoint.h
@@ -0,0 +1,66 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_THERMOSTAT_HEATING_SETPOINT_
+#define _IOT_CAPS_HELPER_THERMOSTAT_HEATING_SETPOINT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_THERMOSTATHEATINGSETPOINT_HEATINGSETPOINT_UNIT_F,
+    CAP_ENUM_THERMOSTATHEATINGSETPOINT_HEATINGSETPOINT_UNIT_C,
+    CAP_ENUM_THERMOSTATHEATINGSETPOINT_HEATINGSETPOINT_UNIT_MAX
+};
+
+static const struct iot_caps_thermostatHeatingSetpoint {
+    const char *id;
+    const struct thermostatHeatingSetpoint_attr_heatingSetpoint {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_THERMOSTATHEATINGSETPOINT_HEATINGSETPOINT_UNIT_MAX];
+        const char *unit_F;
+        const char *unit_C;
+        const double min;
+        const double max;
+    } attr_heatingSetpoint;
+    const struct thermostatHeatingSetpoint_cmd_setHeatingSetpoint { const char* name; } cmd_setHeatingSetpoint;
+} caps_helper_thermostatHeatingSetpoint = {
+    .id = "thermostatHeatingSetpoint",
+    .attr_heatingSetpoint = {
+        .name = "heatingSetpoint",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED | ATTR_SET_UNIT_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"F", "C"},
+        .unit_F = "F",
+        .unit_C = "C",
+        .min = -460,
+        .max = 10000,
+    },
+    .cmd_setHeatingSetpoint = { .name = "setHeatingSetpoint" }, // arguments: setpoint(number) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_THERMOSTAT_HEATING_SETPOINT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatMode.h b/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatMode.h
new file mode 100644
index 000000000..eac1b9838
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatMode.h
@@ -0,0 +1,264 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_THERMOSTAT_MODE_
+#define _IOT_CAPS_HELPER_THERMOSTAT_MODE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_ASLEEP,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_AUTO,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_AUTOWITHECO,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_AUTOWITHRESET,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_AUTOCHANGEOVER,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_AUTOCHANGEOVERACTIVE,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_AUTOCOOL,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_AUTOHEAT,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_AUXHEATONLY,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_AUXILIARYEMERGENCYHEAT,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_AWAY,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_COOL,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_CUSTOM,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_DAYOFF,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_DRYAIR,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_ECO,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_EMERGENCY_HEAT,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_EMERGENCYHEAT,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_EMERGENCYHEATACTIVE,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_ENERGYSAVECOOL,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_ENERGYSAVEHEAT,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_FANONLY,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_FROSTGUARD,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_FURNACE,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_HEAT,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_HEATINGOFF,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_HOME,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_IN,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_MANUAL,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_MOISTAIR,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_OFF,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_OUT,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_RESUME,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_RUSH_HOUR,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_RUSHHOUR,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_SCHEDULE,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_SOUTHERNAWAY,
+    CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_MAX
+};
+
+#define CAP_ENUM_THERMOSTATMODE_SUPPORTEDTHERMOSTATMODES_VALUE_MAX 37
+static const struct iot_caps_thermostatMode {
+    const char *id;
+    const struct thermostatMode_attr_thermostatMode {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_THERMOSTATMODE_THERMOSTATMODE_VALUE_MAX];
+        const char *value_asleep;
+        const char *value_auto;
+        const char *value_autowitheco;
+        const char *value_autowithreset;
+        const char *value_autochangeover;
+        const char *value_autochangeoveractive;
+        const char *value_autocool;
+        const char *value_autoheat;
+        const char *value_auxheatonly;
+        const char *value_auxiliaryemergencyheat;
+        const char *value_away;
+        const char *value_cool;
+        const char *value_custom;
+        const char *value_dayoff;
+        const char *value_dryair;
+        const char *value_eco;
+        const char *value_emergency_heat;
+        const char *value_emergencyheat;
+        const char *value_emergencyheatactive;
+        const char *value_energysavecool;
+        const char *value_energysaveheat;
+        const char *value_fanonly;
+        const char *value_frostguard;
+        const char *value_furnace;
+        const char *value_heat;
+        const char *value_heatingoff;
+        const char *value_home;
+        const char *value_in;
+        const char *value_manual;
+        const char *value_moistair;
+        const char *value_off;
+        const char *value_out;
+        const char *value_resume;
+        const char *value_rush_hour;
+        const char *value_rushhour;
+        const char *value_schedule;
+        const char *value_southernaway;
+    } attr_thermostatMode;
+    const struct thermostatMode_attr_supportedThermostatModes {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_THERMOSTATMODE_SUPPORTEDTHERMOSTATMODES_VALUE_MAX];
+        const char *value_asleep;
+        const char *value_auto;
+        const char *value_autowitheco;
+        const char *value_autowithreset;
+        const char *value_autochangeover;
+        const char *value_autochangeoveractive;
+        const char *value_autocool;
+        const char *value_autoheat;
+        const char *value_auxheatonly;
+        const char *value_auxiliaryemergencyheat;
+        const char *value_away;
+        const char *value_cool;
+        const char *value_custom;
+        const char *value_dayoff;
+        const char *value_dryair;
+        const char *value_eco;
+        const char *value_emergency_heat;
+        const char *value_emergencyheat;
+        const char *value_emergencyheatactive;
+        const char *value_energysavecool;
+        const char *value_energysaveheat;
+        const char *value_fanonly;
+        const char *value_frostguard;
+        const char *value_furnace;
+        const char *value_heat;
+        const char *value_heatingoff;
+        const char *value_home;
+        const char *value_in;
+        const char *value_manual;
+        const char *value_moistair;
+        const char *value_off;
+        const char *value_out;
+        const char *value_resume;
+        const char *value_rush_hour;
+        const char *value_rushhour;
+        const char *value_schedule;
+        const char *value_southernaway;
+    } attr_supportedThermostatModes;
+    const struct thermostatMode_cmd_heat { const char* name; } cmd_heat;
+    const struct thermostatMode_cmd_emergencyHeat { const char* name; } cmd_emergencyHeat;
+    const struct thermostatMode_cmd_auto { const char* name; } cmd_auto;
+    const struct thermostatMode_cmd_cool { const char* name; } cmd_cool;
+    const struct thermostatMode_cmd_off { const char* name; } cmd_off;
+    const struct thermostatMode_cmd_setThermostatMode { const char* name; } cmd_setThermostatMode;
+} caps_helper_thermostatMode = {
+    .id = "thermostatMode",
+    .attr_thermostatMode = {
+        .name = "thermostatMode",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"asleep", "auto", "autowitheco", "autowithreset", "autochangeover", "autochangeoveractive", "autocool", "autoheat", "auxheatonly", "auxiliaryemergencyheat", "away", "cool", "custom", "dayoff", "dryair", "eco", "emergency heat", "emergencyheat", "emergencyheatactive", "energysavecool", "energysaveheat", "fanonly", "frostguard", "furnace", "heat", "heatingoff", "home", "in", "manual", "moistair", "off", "out", "resume", "rush hour", "rushhour", "schedule", "southernaway"},
+        .value_asleep = "asleep",
+        .value_auto = "auto",
+        .value_autowitheco = "autowitheco",
+        .value_autowithreset = "autowithreset",
+        .value_autochangeover = "autochangeover",
+        .value_autochangeoveractive = "autochangeoveractive",
+        .value_autocool = "autocool",
+        .value_autoheat = "autoheat",
+        .value_auxheatonly = "auxheatonly",
+        .value_auxiliaryemergencyheat = "auxiliaryemergencyheat",
+        .value_away = "away",
+        .value_cool = "cool",
+        .value_custom = "custom",
+        .value_dayoff = "dayoff",
+        .value_dryair = "dryair",
+        .value_eco = "eco",
+        .value_emergency_heat = "emergency heat",
+        .value_emergencyheat = "emergencyheat",
+        .value_emergencyheatactive = "emergencyheatactive",
+        .value_energysavecool = "energysavecool",
+        .value_energysaveheat = "energysaveheat",
+        .value_fanonly = "fanonly",
+        .value_frostguard = "frostguard",
+        .value_furnace = "furnace",
+        .value_heat = "heat",
+        .value_heatingoff = "heatingoff",
+        .value_home = "home",
+        .value_in = "in",
+        .value_manual = "manual",
+        .value_moistair = "moistair",
+        .value_off = "off",
+        .value_out = "out",
+        .value_resume = "resume",
+        .value_rush_hour = "rush hour",
+        .value_rushhour = "rushhour",
+        .value_schedule = "schedule",
+        .value_southernaway = "southernaway",
+    },
+    .attr_supportedThermostatModes = {
+        .name = "supportedThermostatModes",
+        .property = ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"asleep", "auto", "autowitheco", "autowithreset", "autochangeover", "autochangeoveractive", "autocool", "autoheat", "auxheatonly", "auxiliaryemergencyheat", "away", "cool", "custom", "dayoff", "dryair", "eco", "emergency heat", "emergencyheat", "emergencyheatactive", "energysavecool", "energysaveheat", "fanonly", "frostguard", "furnace", "heat", "heatingoff", "home", "in", "manual", "moistair", "off", "out", "resume", "rush hour", "rushhour", "schedule", "southernaway"},
+        .value_asleep = "asleep",
+        .value_auto = "auto",
+        .value_autowitheco = "autowitheco",
+        .value_autowithreset = "autowithreset",
+        .value_autochangeover = "autochangeover",
+        .value_autochangeoveractive = "autochangeoveractive",
+        .value_autocool = "autocool",
+        .value_autoheat = "autoheat",
+        .value_auxheatonly = "auxheatonly",
+        .value_auxiliaryemergencyheat = "auxiliaryemergencyheat",
+        .value_away = "away",
+        .value_cool = "cool",
+        .value_custom = "custom",
+        .value_dayoff = "dayoff",
+        .value_dryair = "dryair",
+        .value_eco = "eco",
+        .value_emergency_heat = "emergency heat",
+        .value_emergencyheat = "emergencyheat",
+        .value_emergencyheatactive = "emergencyheatactive",
+        .value_energysavecool = "energysavecool",
+        .value_energysaveheat = "energysaveheat",
+        .value_fanonly = "fanonly",
+        .value_frostguard = "frostguard",
+        .value_furnace = "furnace",
+        .value_heat = "heat",
+        .value_heatingoff = "heatingoff",
+        .value_home = "home",
+        .value_in = "in",
+        .value_manual = "manual",
+        .value_moistair = "moistair",
+        .value_off = "off",
+        .value_out = "out",
+        .value_resume = "resume",
+        .value_rush_hour = "rush hour",
+        .value_rushhour = "rushhour",
+        .value_schedule = "schedule",
+        .value_southernaway = "southernaway",
+    },
+    .cmd_heat = { .name = "heat" },
+    .cmd_emergencyHeat = { .name = "emergencyHeat" },
+    .cmd_auto = { .name = "auto" },
+    .cmd_cool = { .name = "cool" },
+    .cmd_off = { .name = "off" },
+    .cmd_setThermostatMode = { .name = "setThermostatMode" }, // arguments: mode(string) 
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_THERMOSTAT_MODE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatOperatingState.h b/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatOperatingState.h
new file mode 100644
index 000000000..a6fbaf55c
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatOperatingState.h
@@ -0,0 +1,75 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_THERMOSTAT_OPERATING_STATE_
+#define _IOT_CAPS_HELPER_THERMOSTAT_OPERATING_STATE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_THERMOSTATOPERATINGSTATE_THERMOSTATOPERATINGSTATE_VALUE_COOLING,
+    CAP_ENUM_THERMOSTATOPERATINGSTATE_THERMOSTATOPERATINGSTATE_VALUE_FAN_ONLY,
+    CAP_ENUM_THERMOSTATOPERATINGSTATE_THERMOSTATOPERATINGSTATE_VALUE_HEATING,
+    CAP_ENUM_THERMOSTATOPERATINGSTATE_THERMOSTATOPERATINGSTATE_VALUE_IDLE,
+    CAP_ENUM_THERMOSTATOPERATINGSTATE_THERMOSTATOPERATINGSTATE_VALUE_PENDING_COOL,
+    CAP_ENUM_THERMOSTATOPERATINGSTATE_THERMOSTATOPERATINGSTATE_VALUE_PENDING_HEAT,
+    CAP_ENUM_THERMOSTATOPERATINGSTATE_THERMOSTATOPERATINGSTATE_VALUE_VENT_ECONOMIZER,
+    CAP_ENUM_THERMOSTATOPERATINGSTATE_THERMOSTATOPERATINGSTATE_VALUE_MAX
+};
+
+static const struct iot_caps_thermostatOperatingState {
+    const char *id;
+    const struct thermostatOperatingState_attr_thermostatOperatingState {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_THERMOSTATOPERATINGSTATE_THERMOSTATOPERATINGSTATE_VALUE_MAX];
+        const char *value_cooling;
+        const char *value_fan_only;
+        const char *value_heating;
+        const char *value_idle;
+        const char *value_pending_cool;
+        const char *value_pending_heat;
+        const char *value_vent_economizer;
+    } attr_thermostatOperatingState;
+} caps_helper_thermostatOperatingState = {
+    .id = "thermostatOperatingState",
+    .attr_thermostatOperatingState = {
+        .name = "thermostatOperatingState",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"cooling", "fan only", "heating", "idle", "pending cool", "pending heat", "vent economizer"},
+        .value_cooling = "cooling",
+        .value_fan_only = "fan only",
+        .value_heating = "heating",
+        .value_idle = "idle",
+        .value_pending_cool = "pending cool",
+        .value_pending_heat = "pending heat",
+        .value_vent_economizer = "vent economizer",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_THERMOSTAT_OPERATING_STATE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatSetpoint.h b/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatSetpoint.h
new file mode 100644
index 000000000..9f61d3e02
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_thermostatSetpoint.h
@@ -0,0 +1,64 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_THERMOSTAT_SETPOINT_
+#define _IOT_CAPS_HELPER_THERMOSTAT_SETPOINT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_THERMOSTATSETPOINT_THERMOSTATSETPOINT_UNIT_F,
+    CAP_ENUM_THERMOSTATSETPOINT_THERMOSTATSETPOINT_UNIT_C,
+    CAP_ENUM_THERMOSTATSETPOINT_THERMOSTATSETPOINT_UNIT_MAX
+};
+
+static const struct iot_caps_thermostatSetpoint {
+    const char *id;
+    const struct thermostatSetpoint_attr_thermostatSetpoint {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_THERMOSTATSETPOINT_THERMOSTATSETPOINT_UNIT_MAX];
+        const char *unit_F;
+        const char *unit_C;
+        const double min;
+        const double max;
+    } attr_thermostatSetpoint;
+} caps_helper_thermostatSetpoint = {
+    .id = "thermostatSetpoint",
+    .attr_thermostatSetpoint = {
+        .name = "thermostatSetpoint",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED | ATTR_SET_UNIT_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"F", "C"},
+        .unit_F = "F",
+        .unit_C = "C",
+        .min = -460,
+        .max = 10000,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_THERMOSTAT_SETPOINT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_threeAxis.h b/examples/Smart_Switch/st/caps/iot_caps_helper_threeAxis.h
new file mode 100644
index 000000000..7aacab430
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_threeAxis.h
@@ -0,0 +1,61 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_THREE_AXIS_
+#define _IOT_CAPS_HELPER_THREE_AXIS_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_THREEAXIS_THREEAXIS_UNIT_MG,
+    CAP_ENUM_THREEAXIS_THREEAXIS_UNIT_MAX
+};
+
+static const struct iot_caps_threeAxis {
+    const char *id;
+    const struct threeAxis_attr_threeAxis {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_THREEAXIS_THREEAXIS_UNIT_MAX];
+        const char *unit_mG;
+        const int min;
+        const int max;
+    } attr_threeAxis;
+} caps_helper_threeAxis = {
+    .id = "threeAxis",
+    .attr_threeAxis = {
+        .name = "threeAxis",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED | ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_INTEGER,
+        .units = {"mG"},
+        .unit_mG = "mG",
+        .min = -10000,
+        .max = 10000,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_THREE_AXIS_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_timedSession.h b/examples/Smart_Switch/st/caps/iot_caps_helper_timedSession.h
new file mode 100644
index 000000000..2c7af79de
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_timedSession.h
@@ -0,0 +1,86 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2021 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_TIMED_SESSION_
+#define _IOT_CAPS_HELPER_TIMED_SESSION_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_TIMEDSESSION_SESSIONSTATUS_VALUE_CANCELED,
+    CAP_ENUM_TIMEDSESSION_SESSIONSTATUS_VALUE_PAUSED,
+    CAP_ENUM_TIMEDSESSION_SESSIONSTATUS_VALUE_RUNNING,
+    CAP_ENUM_TIMEDSESSION_SESSIONSTATUS_VALUE_STOPPED,
+    CAP_ENUM_TIMEDSESSION_SESSIONSTATUS_VALUE_MAX
+};
+
+static const struct iot_caps_timedSession {
+    const char *id;
+    const struct timedSession_attr_completionTime {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+    } attr_completionTime;
+    const struct timedSession_attr_sessionStatus {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_TIMEDSESSION_SESSIONSTATUS_VALUE_MAX];
+        const char *value_canceled;
+        const char *value_paused;
+        const char *value_running;
+        const char *value_stopped;
+    } attr_sessionStatus;
+    const struct timedSession_cmd_cancel { const char* name; } cmd_cancel;
+    const struct timedSession_cmd_start { const char* name; } cmd_start;
+    const struct timedSession_cmd_setCompletionTime { const char* name; } cmd_setCompletionTime;
+    const struct timedSession_cmd_pause { const char* name; } cmd_pause;
+    const struct timedSession_cmd_stop { const char* name; } cmd_stop;
+} caps_helper_timedSession = {
+    .id = "timedSession",
+    .attr_completionTime = {
+        .name = "completionTime",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+    },
+    .attr_sessionStatus = {
+        .name = "sessionStatus",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"canceled", "paused", "running", "stopped"},
+        .value_canceled = "canceled",
+        .value_paused = "paused",
+        .value_running = "running",
+        .value_stopped = "stopped",
+    },
+    .cmd_cancel = { .name = "cancel" },
+    .cmd_start = { .name = "start" },
+    .cmd_setCompletionTime = { .name = "setCompletionTime" }, // arguments: completionTime(string) 
+    .cmd_pause = { .name = "pause" },
+    .cmd_stop = { .name = "stop" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_TIMED_SESSION_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_tone.h b/examples/Smart_Switch/st/caps/iot_caps_helper_tone.h
new file mode 100644
index 000000000..98fc3ed7e
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_tone.h
@@ -0,0 +1,40 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_TONE_
+#define _IOT_CAPS_HELPER_TONE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static const struct iot_caps_tone {
+    const char *id;
+    const struct tone_cmd_beep { const char* name; } cmd_beep;
+} caps_helper_tone = {
+    .id = "tone",
+    .cmd_beep = { .name = "beep" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_TONE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_tvocHealthConcern.h b/examples/Smart_Switch/st/caps/iot_caps_helper_tvocHealthConcern.h
new file mode 100644
index 000000000..3a03bf766
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_tvocHealthConcern.h
@@ -0,0 +1,72 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_TVOC_HEALTH_CONCERN_
+#define _IOT_CAPS_HELPER_TVOC_HEALTH_CONCERN_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_TVOCHEALTHCONCERN_VALUE_GOOD,
+    CAP_ENUM_TVOCHEALTHCONCERN_VALUE_MODERATE,
+    CAP_ENUM_TVOCHEALTHCONCERN_VALUE_SLIGHTLY_UNHEALTHY,
+    CAP_ENUM_TVOCHEALTHCONCERN_VALUE_UNHEALTHY,
+    CAP_ENUM_TVOCHEALTHCONCERN_VALUE_VERY_UNHEALTHY,
+    CAP_ENUM_TVOCHEALTHCONCERN_VALUE_HAZARDOUS,
+	CAP_ENUM_TVOCHEALTHCONCERN_VALUE_MAX,
+};
+
+static const struct iot_caps_tvocHealthConcern {
+    const char *id;
+    const struct tvocHealthConcern_attr_tvocHealthConcern {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_TVOCHEALTHCONCERN_VALUE_MAX];
+        const char *value_good;
+        const char *value_moderate;
+        const char *value_slightly_unhealthy;
+        const char *value_unhealthy;
+        const char *value_very_unhealthy;
+        const char *value_hazardous;
+    } attr_tvocHealthConcern;
+} caps_helper_tvocHealthConcern = {
+    .id = "tvocHealthConcern",
+    .attr_tvocHealthConcern = {
+        .name = "tvocHealthConcern",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"good", "moderate", "slightlyUnhealthy", "unhealthy", "veryUnhealthy", "hazardous"},
+        .value_good = "good",
+        .value_moderate = "moderate",
+        .value_slightly_unhealthy = "slightlyUnhealthy",
+        .value_unhealthy = "unhealthy",
+        .value_very_unhealthy = "veryUnhealthy",
+        .value_hazardous = "hazardous",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HELPER_TVOC_HEALTH_CONCERN_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_tvocMeasurement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_tvocMeasurement.h
new file mode 100644
index 000000000..446d0a581
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_tvocMeasurement.h
@@ -0,0 +1,61 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_TVOC_MEASUREMENT_
+#define _IOT_CAPS_HELPER_TVOC_MEASUREMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_TVOCMEASUREMENT_TVOCLEVEL_UNIT_PPM,
+    CAP_ENUM_TVOCMEASUREMENT_TVOCLEVEL_UNIT_MAX
+};
+
+static const struct iot_caps_tvocMeasurement {
+    const char *id;
+    const struct tvocMeasurement_attr_tvocLevel {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_TVOCMEASUREMENT_TVOCLEVEL_UNIT_MAX];
+        const char *unit_ppm;
+        const double min;
+        const double max;
+    } attr_tvocLevel;
+} caps_helper_tvocMeasurement = {
+    .id = "tvocMeasurement",
+    .attr_tvocLevel = {
+        .name = "tvocLevel",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED | ATTR_SET_UNIT_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"ppm"},
+        .unit_ppm = "ppm",
+        .min = 0,
+        .max = 1000000,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_TVOC_MEASUREMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_ultravioletIndex.h b/examples/Smart_Switch/st/caps/iot_caps_helper_ultravioletIndex.h
new file mode 100644
index 000000000..4b56aa2d6
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_ultravioletIndex.h
@@ -0,0 +1,52 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_ULTRAVIOLET_INDEX_
+#define _IOT_CAPS_HELPER_ULTRAVIOLET_INDEX_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static const struct iot_caps_ultravioletIndex {
+    const char *id;
+    const struct ultravioletIndex_attr_ultravioletIndex {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const double min;
+        const double max;
+    } attr_ultravioletIndex;
+} caps_helper_ultravioletIndex = {
+    .id = "ultravioletIndex",
+    .attr_ultravioletIndex = {
+        .name = "ultravioletIndex",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_MAX | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .min = 0,
+        .max = 255,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_ULTRAVIOLET_INDEX_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_valve.h b/examples/Smart_Switch/st/caps/iot_caps_helper_valve.h
new file mode 100644
index 000000000..09d071a36
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_valve.h
@@ -0,0 +1,64 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_VALVE_
+#define _IOT_CAPS_HELPER_VALVE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_VALVE_VALVE_VALUE_CLOSED,
+    CAP_ENUM_VALVE_VALVE_VALUE_OPEN,
+    CAP_ENUM_VALVE_VALVE_VALUE_MAX
+};
+
+static const struct iot_caps_valve {
+    const char *id;
+    const struct valve_attr_valve {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_VALVE_VALVE_VALUE_MAX];
+        const char *value_closed;
+        const char *value_open;
+    } attr_valve;
+    const struct valve_cmd_close { const char* name; } cmd_close;
+    const struct valve_cmd_open { const char* name; } cmd_open;
+} caps_helper_valve = {
+    .id = "valve",
+    .attr_valve = {
+        .name = "valve",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"closed", "open"},
+        .value_closed = "closed",
+        .value_open = "open",
+    },
+    .cmd_close = { .name = "close" },
+    .cmd_open = { .name = "open" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_VALVE_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_veryFineDustHealthConcern.h b/examples/Smart_Switch/st/caps/iot_caps_helper_veryFineDustHealthConcern.h
new file mode 100755
index 000000000..c9d7a67d2
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_veryFineDustHealthConcern.h
@@ -0,0 +1,72 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2022 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_VERY_FINE_DUST_HEALTH_CONCERN_
+#define _IOT_CAPS_HELPER_VERY_FINE_DUST_HEALTH_CONCERN_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_VERYFINEDUSTHEALTHCONCERN_VERYFINEDUSTHEALTHCONCERN_VALUE_GOOD,
+    CAP_ENUM_VERYFINEDUSTHEALTHCONCERN_VERYFINEDUSTHEALTHCONCERN_VALUE_MODERATE,
+    CAP_ENUM_VERYFINEDUSTHEALTHCONCERN_VERYFINEDUSTHEALTHCONCERN_VALUE_SLIGHTLYUNHEALTHY,
+    CAP_ENUM_VERYFINEDUSTHEALTHCONCERN_VERYFINEDUSTHEALTHCONCERN_VALUE_UNHEALTHY,
+    CAP_ENUM_VERYFINEDUSTHEALTHCONCERN_VERYFINEDUSTHEALTHCONCERN_VALUE_VERYUNHEALTHY,
+    CAP_ENUM_VERYFINEDUSTHEALTHCONCERN_VERYFINEDUSTHEALTHCONCERN_VALUE_HAZARDOUS,
+    CAP_ENUM_VERYFINEDUSTHEALTHCONCERN_VERYFINEDUSTHEALTHCONCERN_VALUE_MAX
+};
+
+static const struct iot_caps_veryFineDustHealthConcern {
+    const char *id;
+    const struct veryFineDustHealthConcern_attr_veryFineDustHealthConcern {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_VERYFINEDUSTHEALTHCONCERN_VERYFINEDUSTHEALTHCONCERN_VALUE_MAX];
+        const char *value_good;
+        const char *value_moderate;
+        const char *value_slightlyUnhealthy;
+        const char *value_unhealthy;
+        const char *value_veryUnhealthy;
+        const char *value_hazardous;
+    } attr_veryFineDustHealthConcern;
+} caps_helper_veryFineDustHealthConcern = {
+    .id = "veryFineDustHealthConcern",
+    .attr_veryFineDustHealthConcern = {
+        .name = "veryFineDustHealthConcern",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"good", "moderate", "slightlyUnhealthy", "unhealthy", "veryUnhealthy", "hazardous"},
+        .value_good = "good",
+        .value_moderate = "moderate",
+        .value_slightlyUnhealthy = "slightlyUnhealthy",
+        .value_unhealthy = "unhealthy",
+        .value_veryUnhealthy = "veryUnhealthy",
+        .value_hazardous = "hazardous",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_VERY_FINE_DUST_HEALTH_CONCERN_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_veryFineDustSensor.h b/examples/Smart_Switch/st/caps/iot_caps_helper_veryFineDustSensor.h
new file mode 100644
index 000000000..32dba555c
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_veryFineDustSensor.h
@@ -0,0 +1,59 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_VERY_FINE_DUST_SENSOR_
+#define _IOT_CAPS_HELPER_VERY_FINE_DUST_SENSOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_VERYFINEDUSTSENSOR_VERYFINEDUSTLEVEL_UNIT_UG_PER_M3,
+    CAP_ENUM_VERYFINEDUSTSENSOR_VERYFINEDUSTLEVEL_UNIT_MAX
+};
+
+static const struct iot_caps_veryFineDustSensor {
+    const char *id;
+    const struct veryFineDustSensor_attr_veryFineDustLevel {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_VERYFINEDUSTSENSOR_VERYFINEDUSTLEVEL_UNIT_MAX];
+        const char *unit_ug_per_m3;
+        const int min;
+    } attr_veryFineDustLevel;
+} caps_helper_veryFineDustSensor = {
+    .id = "veryFineDustSensor",
+    .attr_veryFineDustLevel = {
+        .name = "veryFineDustLevel",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_INTEGER,
+        .units = {"μg/m^3"},
+        .unit_ug_per_m3 = "μg/m^3",
+        .min = 0,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_VERY_FINE_DUST_SENSOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_voltageMeasurement.h b/examples/Smart_Switch/st/caps/iot_caps_helper_voltageMeasurement.h
new file mode 100644
index 000000000..5c1c2b4f1
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_voltageMeasurement.h
@@ -0,0 +1,59 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_VOLTAGE_MEASUREMENT_
+#define _IOT_CAPS_HELPER_VOLTAGE_MEASUREMENT_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_VOLTAGEMEASUREMENT_VOLTAGE_UNIT_V,
+    CAP_ENUM_VOLTAGEMEASUREMENT_VOLTAGE_UNIT_MAX
+};
+
+static const struct iot_caps_voltageMeasurement {
+    const char *id;
+    const struct voltageMeasurement_attr_voltage {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *units[CAP_ENUM_VOLTAGEMEASUREMENT_VOLTAGE_UNIT_MAX];
+        const char *unit_V;
+        const double min;
+    } attr_voltage;
+} caps_helper_voltageMeasurement = {
+    .id = "voltageMeasurement",
+    .attr_voltage = {
+        .name = "voltage",
+        .property = ATTR_SET_VALUE_MIN | ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_NUMBER,
+        .units = {"V"},
+        .unit_V = "V",
+        .min = 0,
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_VOLTAGE_MEASUREMENT_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_waterSensor.h b/examples/Smart_Switch/st/caps/iot_caps_helper_waterSensor.h
new file mode 100644
index 000000000..7d4c635f2
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_waterSensor.h
@@ -0,0 +1,60 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_WATER_SENSOR_
+#define _IOT_CAPS_HELPER_WATER_SENSOR_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_WATERSENSOR_WATER_VALUE_DRY,
+    CAP_ENUM_WATERSENSOR_WATER_VALUE_WET,
+    CAP_ENUM_WATERSENSOR_WATER_VALUE_MAX
+};
+
+static const struct iot_caps_waterSensor {
+    const char *id;
+    const struct waterSensor_attr_water {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_WATERSENSOR_WATER_VALUE_MAX];
+        const char *value_dry;
+        const char *value_wet;
+    } attr_water;
+} caps_helper_waterSensor = {
+    .id = "waterSensor",
+    .attr_water = {
+        .name = "water",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"dry", "wet"},
+        .value_dry = "dry",
+        .value_wet = "wet",
+    },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_WATER_SENSOR_ */
diff --git a/examples/Smart_Switch/st/caps/iot_caps_helper_windowShade.h b/examples/Smart_Switch/st/caps/iot_caps_helper_windowShade.h
new file mode 100644
index 000000000..62ccfe61c
--- /dev/null
+++ b/examples/Smart_Switch/st/caps/iot_caps_helper_windowShade.h
@@ -0,0 +1,97 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#ifndef _IOT_CAPS_HELPER_WINDOW_SHADE_
+#define _IOT_CAPS_HELPER_WINDOW_SHADE_
+
+#include "iot_caps_helper.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+enum {
+    CAP_ENUM_WINDOWSHADE_WINDOWSHADE_VALUE_CLOSED,
+    CAP_ENUM_WINDOWSHADE_WINDOWSHADE_VALUE_CLOSING,
+    CAP_ENUM_WINDOWSHADE_WINDOWSHADE_VALUE_OPEN,
+    CAP_ENUM_WINDOWSHADE_WINDOWSHADE_VALUE_OPENING,
+    CAP_ENUM_WINDOWSHADE_WINDOWSHADE_VALUE_PARTIALLY_OPEN,
+    CAP_ENUM_WINDOWSHADE_WINDOWSHADE_VALUE_UNKNOWN,
+    CAP_ENUM_WINDOWSHADE_WINDOWSHADE_VALUE_MAX
+};
+
+#define CAP_ENUM_WINDOWSHADE_SUPPORTEDWINDOWSHADECOMMANDS_VALUE_MAX 3
+static const struct iot_caps_windowShade {
+    const char *id;
+    const struct windowShade_attr_windowShade {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_WINDOWSHADE_WINDOWSHADE_VALUE_MAX];
+        const char *value_closed;
+        const char *value_closing;
+        const char *value_open;
+        const char *value_opening;
+        const char *value_partially_open;
+        const char *value_unknown;
+    } attr_windowShade;
+    const struct windowShade_attr_supportedWindowShadeCommands {
+        const char *name;
+        const unsigned char property;
+        const unsigned char valueType;
+        const char *values[CAP_ENUM_WINDOWSHADE_SUPPORTEDWINDOWSHADECOMMANDS_VALUE_MAX];
+        const char *value_open;
+        const char *value_close;
+        const char *value_pause;
+    } attr_supportedWindowShadeCommands;
+    const struct windowShade_cmd_close { const char* name; } cmd_close;
+    const struct windowShade_cmd_pause { const char* name; } cmd_pause;
+    const struct windowShade_cmd_open { const char* name; } cmd_open;
+} caps_helper_windowShade = {
+    .id = "windowShade",
+    .attr_windowShade = {
+        .name = "windowShade",
+        .property = ATTR_SET_VALUE_REQUIRED,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"closed", "closing", "open", "opening", "partially open", "unknown"},
+        .value_closed = "closed",
+        .value_closing = "closing",
+        .value_open = "open",
+        .value_opening = "opening",
+        .value_partially_open = "partially open",
+        .value_unknown = "unknown",
+    },
+    .attr_supportedWindowShadeCommands = {
+        .name = "supportedWindowShadeCommands",
+        .property = ATTR_SET_VALUE_ARRAY,
+        .valueType = VALUE_TYPE_STRING,
+        .values = {"open", "close", "pause"},
+        .value_open = "open",
+        .value_close = "close",
+        .value_pause = "pause",
+    },
+    .cmd_close = { .name = "close" },
+    .cmd_pause = { .name = "pause" },
+    .cmd_open = { .name = "open" },
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IOT_CAPS_HERLPER_WINDOW_SHADE_ */
diff --git a/examples/Smart_Switch/st/caps_switch.c b/examples/Smart_Switch/st/caps_switch.c
new file mode 100644
index 000000000..213c71569
--- /dev/null
+++ b/examples/Smart_Switch/st/caps_switch.c
@@ -0,0 +1,158 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include "st_dev.h"
+#include "caps_switch.h"
+
+static int caps_switch_attr_switch_str2idx(const char *value)
+{
+    int index;
+
+    for (index = 0; index < CAP_ENUM_SWITCH_SWITCH_VALUE_MAX; index++) {
+        if (!strcmp(value, caps_helper_switch.attr_switch.values[index])) {
+            return index;
+        }
+    }
+    return -1;
+}
+
+static const char *caps_switch_get_switch_value(caps_switch_data_t *caps_data)
+{
+    if (!caps_data) {
+        printf("caps_data is NULL\n");
+        return NULL;
+    }
+    return caps_data->switch_value;
+}
+
+static void caps_switch_set_switch_value(caps_switch_data_t *caps_data, const char *value)
+{
+    if (!caps_data) {
+        printf("caps_data is NULL\n");
+        return;
+    }
+    if (caps_data->switch_value) {
+        free(caps_data->switch_value);
+    }
+    caps_data->switch_value = strdup(value);
+}
+
+static void caps_switch_attr_switch_send(caps_switch_data_t *caps_data)
+{
+    int sequence_no = -1;
+
+    if (!caps_data || !caps_data->handle) {
+        printf("fail to get handle\n");
+        return;
+    }
+    if (!caps_data->switch_value) {
+        printf("value is NULL\n");
+        return;
+    }
+
+    ST_CAP_SEND_ATTR_STRING(caps_data->handle,
+            (char *)caps_helper_switch.attr_switch.name,
+            caps_data->switch_value,
+            NULL,
+            NULL,
+            sequence_no);
+
+    if (sequence_no < 0)
+        printf("fail to send switch value\n");
+    else
+        printf("Sequence number return : %d\n", sequence_no);
+
+}
+
+
+static void caps_switch_cmd_on_cb(IOT_CAP_HANDLE *handle, iot_cap_cmd_data_t *cmd_data, void *usr_data)
+{
+    caps_switch_data_t *caps_data = (caps_switch_data_t *)usr_data;
+    const char* value = caps_helper_switch.attr_switch.values[CAP_ENUM_SWITCH_SWITCH_VALUE_ON];
+
+    printf("called [%s] func with num_args:%u\n", __func__, cmd_data->num_args);
+
+    caps_switch_set_switch_value(caps_data, value);
+    if (caps_data && caps_data->cmd_on_usr_cb)
+        caps_data->cmd_on_usr_cb(caps_data);
+    caps_switch_attr_switch_send(caps_data);
+}
+
+static void caps_switch_cmd_off_cb(IOT_CAP_HANDLE *handle, iot_cap_cmd_data_t *cmd_data, void *usr_data)
+{
+    caps_switch_data_t *caps_data = (caps_switch_data_t *)usr_data;
+    const char* value = caps_helper_switch.attr_switch.values[CAP_ENUM_SWITCH_SWITCH_VALUE_OFF];
+
+    printf("called [%s] func with num_args:%u\n", __func__, cmd_data->num_args);
+
+    caps_switch_set_switch_value(caps_data, value);
+    if (caps_data && caps_data->cmd_off_usr_cb)
+        caps_data->cmd_off_usr_cb(caps_data);
+    caps_switch_attr_switch_send(caps_data);
+}
+
+static void caps_switch_init_cb(IOT_CAP_HANDLE *handle, void *usr_data)
+{
+    caps_switch_data_t *caps_data = usr_data;
+    if (caps_data && caps_data->init_usr_cb)
+        caps_data->init_usr_cb(caps_data);
+    caps_switch_attr_switch_send(caps_data);
+}
+
+caps_switch_data_t *caps_switch_initialize(IOT_CTX *ctx, const char *component, void *init_usr_cb, void *usr_data)
+{
+    caps_switch_data_t *caps_data = NULL;
+    int err;
+
+    caps_data = malloc(sizeof(caps_switch_data_t));
+    if (!caps_data) {
+        printf("fail to malloc for caps_switch_data\n");
+        return NULL;
+    }
+
+    memset(caps_data, 0, sizeof(caps_switch_data_t));
+
+    caps_data->init_usr_cb = init_usr_cb;
+    caps_data->usr_data = usr_data;
+
+    caps_data->get_switch_value = caps_switch_get_switch_value;
+    caps_data->set_switch_value = caps_switch_set_switch_value;
+    caps_data->attr_switch_str2idx = caps_switch_attr_switch_str2idx;
+    caps_data->attr_switch_send = caps_switch_attr_switch_send;
+    if (ctx) {
+        caps_data->handle = st_cap_handle_init(ctx, component, caps_helper_switch.id, caps_switch_init_cb, caps_data);
+    }
+    if (caps_data->handle) {
+        err = st_cap_cmd_set_cb(caps_data->handle, caps_helper_switch.cmd_on.name, caps_switch_cmd_on_cb, caps_data);
+        if (err) {
+            printf("fail to set cmd_cb for on of switch\n");
+    }
+        err = st_cap_cmd_set_cb(caps_data->handle, caps_helper_switch.cmd_off.name, caps_switch_cmd_off_cb, caps_data);
+        if (err) {
+            printf("fail to set cmd_cb for off of switch\n");
+    }
+    } else {
+        printf("fail to init switch handle\n");
+    }
+
+    return caps_data;
+}
diff --git a/examples/Smart_Switch/st/caps_switch.h b/examples/Smart_Switch/st/caps_switch.h
new file mode 100644
index 000000000..118a3a81f
--- /dev/null
+++ b/examples/Smart_Switch/st/caps_switch.h
@@ -0,0 +1,47 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+#include "caps/iot_caps_helper_switch.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef struct caps_switch_data {
+    IOT_CAP_HANDLE* handle;
+    void *usr_data;
+    void *cmd_data;
+
+    char *switch_value;
+
+    const char *(*get_switch_value)(struct caps_switch_data *caps_data);
+    void (*set_switch_value)(struct caps_switch_data *caps_data, const char *value);
+    int (*attr_switch_str2idx)(const char *value);
+    void (*attr_switch_send)(struct caps_switch_data *caps_data);
+
+    void (*init_usr_cb)(struct caps_switch_data *caps_data);
+
+    void (*cmd_on_usr_cb)(struct caps_switch_data *caps_data);
+    void (*cmd_off_usr_cb)(struct caps_switch_data *caps_data);
+} caps_switch_data_t;
+
+caps_switch_data_t *caps_switch_initialize(IOT_CTX *ctx, const char *component, void *init_usr_cb, void *usr_data);
+#ifdef __cplusplus
+}
+#endif
+
diff --git a/examples/Smart_Switch/st/component.mk b/examples/Smart_Switch/st/component.mk
new file mode 100644
index 000000000..0b9d7585e
--- /dev/null
+++ b/examples/Smart_Switch/st/component.mk
@@ -0,0 +1,5 @@
+#
+# "main" pseudo-component makefile.
+#
+# (Uses default behaviour of compiling all source files in directory, adding 'include' to include path.)
+
diff --git a/examples/Smart_Switch/st/device_control.c b/examples/Smart_Switch/st/device_control.c
new file mode 100644
index 000000000..8e70a5e23
--- /dev/null
+++ b/examples/Smart_Switch/st/device_control.c
@@ -0,0 +1,165 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+#include "device_control.h"
+
+//#include "FreeRTOS.h"
+//#include "queue.h"
+//#include "task.h"
+
+// gpio_t gpio_ctrl_noti;
+// gpio_t gpio_ctrl_zero;
+// gpio_t gpio_ctrl_button;
+// gpio_t gpio_ctrl_main_led;
+
+void change_switch_state(int switch_state)
+{
+    if (switch_state == SWITCH_OFF) {
+        leds_on(LEDS_RED);
+    } else {
+        leds_off(LEDS_RED);
+    }
+}
+
+int get_button_event(int* button_event_type, int* button_event_count)
+{
+	static uint32_t button_count = 0;
+	static uint32_t button_last_state = BUTTON_GPIO_RELEASED;
+	static TimeOut_t button_timeout;
+	static TickType_t long_press_tick = pdMS_TO_TICKS(BUTTON_LONG_THRESHOLD_MS);
+	static TickType_t button_delay_tick = pdMS_TO_TICKS(BUTTON_DELAY_MS);
+
+	uint32_t gpio_level = 0;
+
+	// self add 
+	button_hal_button_t *btn;
+	btn = button_hal_get_by_id(BUTTON_ID);
+	gpio_level = gpio_hal_arch_read_pin(BTN_PORT(btn), btn->pin);
+
+	if (button_last_state != gpio_level) {
+		/* wait debounce time to ignore small ripple of currunt */
+		vTaskDelay( pdMS_TO_TICKS(BUTTON_DEBOUNCE_TIME_MS) );
+		gpio_level = gpio_hal_arch_read_pin(BTN_PORT(btn), btn->pin);
+		if (button_last_state != gpio_level) {
+			printf("Button event, val: %ld, tick: %lu\n", gpio_level, (uint32_t)xTaskGetTickCount());
+			button_last_state = gpio_level;
+			if (gpio_level == BUTTON_GPIO_PRESSED) {
+				button_count++;
+			}
+			vTaskSetTimeOutState(&button_timeout);
+			button_delay_tick = pdMS_TO_TICKS(BUTTON_DELAY_MS);
+			long_press_tick = pdMS_TO_TICKS(BUTTON_LONG_THRESHOLD_MS);
+		}
+	} else if (button_count > 0) {
+		if ((gpio_level == BUTTON_GPIO_PRESSED)
+				&& (xTaskCheckForTimeOut(&button_timeout, &long_press_tick ) != pdFALSE)) {
+			*button_event_type = BUTTON_LONG_PRESS;
+			*button_event_count = 1;
+			button_count = 0;
+			return true;
+		} else if ((gpio_level == BUTTON_GPIO_RELEASED)
+				&& (xTaskCheckForTimeOut(&button_timeout, &button_delay_tick ) != pdFALSE)) {
+			*button_event_type = BUTTON_SHORT_PRESS;
+			*button_event_count = button_count;
+			button_count = 0;
+			return true;
+		}
+	}
+
+	return false;
+}
+
+void led_blink(int switch_state, int delay, int count)
+{
+	for (int i = 0; i < count; i++) {
+		vTaskDelay(delay / portTICK_PERIOD_MS);
+        change_switch_state(1 - switch_state);
+		vTaskDelay(delay / portTICK_PERIOD_MS);
+        change_switch_state(switch_state);
+	}
+}
+
+void change_led_mode(int noti_led_mode)
+{
+    static TimeOut_t led_timeout;
+    static TickType_t led_tick = -1;
+    static int last_led_mode = -1;
+    static int led_state = SWITCH_OFF;
+
+    if (last_led_mode != noti_led_mode) {
+        last_led_mode = noti_led_mode;
+        vTaskSetTimeOutState(&led_timeout);
+        led_tick = 0;
+    }
+
+    switch (noti_led_mode)
+    {
+        case LED_ANIMATION_MODE_IDLE:
+            break;
+        case LED_ANIMATION_MODE_SLOW:
+            if (xTaskCheckForTimeOut(&led_timeout, &led_tick ) != pdFALSE) {
+                led_state = 1 - led_state;
+                change_switch_state(led_state);
+                vTaskSetTimeOutState(&led_timeout);
+                if (led_state == SWITCH_ON) {
+                    led_tick = pdMS_TO_TICKS(200);
+                } else {
+                    led_tick = pdMS_TO_TICKS(800);
+                }
+            }
+            break;
+        case LED_ANIMATION_MODE_FAST:
+            if (xTaskCheckForTimeOut(&led_timeout, &led_tick ) != pdFALSE) {
+                led_state = 1 - led_state;
+                change_switch_state(led_state);
+                vTaskSetTimeOutState(&led_timeout);
+                led_tick = pdMS_TO_TICKS(100);
+            }
+            break;
+        default:
+            break;
+    }
+}
+
+void iot_gpio_init(void)
+{
+	// //0 init
+	// gpio_init(&gpio_ctrl_zero, GPIO_OUTPUT_MAINLED_0);
+	// gpio_mode(&gpio_ctrl_zero, PullDown);
+	// gpio_dir(&gpio_ctrl_zero, PIN_OUTPUT);
+
+	// //notify led init
+	// gpio_init(&gpio_ctrl_noti, GPIO_OUTPUT_NOTIFICATION_LED);
+	// gpio_mode(&gpio_ctrl_noti, PullNone);
+	// gpio_dir(&gpio_ctrl_noti, PIN_OUTPUT);
+	// gpio_write(&gpio_ctrl_noti, 1);
+
+	// //main led init
+	// gpio_init(&gpio_ctrl_main_led, GPIO_OUTPUT_MAINLED);
+	// gpio_mode(&gpio_ctrl_main_led, PullNone);
+	// gpio_dir(&gpio_ctrl_main_led, PIN_OUTPUT);
+
+	// //button init
+	// gpio_init(&gpio_ctrl_button, GPIO_INPUT_BUTTON);
+	// gpio_mode(&gpio_ctrl_button, PullUp);
+	// gpio_dir(&gpio_ctrl_button, PIN_INPUT);
+	
+	// gpio_write(&gpio_ctrl_main_led, 1);
+	leds_on(LEDS_RED);
+	// gpio_write(&gpio_ctrl_zero, 0);
+	leds_off(LEDS_BLUE);
+}
diff --git a/examples/Smart_Switch/st/device_control.h b/examples/Smart_Switch/st/device_control.h
new file mode 100644
index 000000000..e300e65d3
--- /dev/null
+++ b/examples/Smart_Switch/st/device_control.h
@@ -0,0 +1,70 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+#include <stdbool.h>
+#include <string.h>
+#include "st_dev.h"
+// #include "PinNames.h"
+// #include <gpio_api.h>
+// #include "gpio_irq_api.h"
+// #include "gpio_irq_ex_api.h"
+#include "dev/leds.h"
+#include "dev/button-hal.h"
+#include "dev/gpio-hal.h"
+
+// #define GPIO_OUTPUT_MAINLED				PC_2
+// #define GPIO_OUTPUT_MAINLED_0			PC_5
+// #define GPIO_OUTPUT_NOTIFICATION_LED	PC_4
+// #define GPIO_INPUT_BUTTON				PC_1
+#define BUTTON_ID 0
+
+enum switch_onoff_state {
+    SWITCH_OFF = 0,
+    SWITCH_ON = 1,
+};
+
+enum main_led_gpio_state {
+	MAINLED_GPIO_ON = 1,
+	MAINLED_GPIO_OFF = 0,
+};
+
+enum led_animation_mode_list {
+	LED_ANIMATION_MODE_IDLE = 0,
+	LED_ANIMATION_MODE_FAST,
+	LED_ANIMATION_MODE_SLOW,
+};
+
+enum button_gpio_state {
+	BUTTON_GPIO_RELEASED = 1,
+	BUTTON_GPIO_PRESSED = 0,
+};
+
+#define BUTTON_DEBOUNCE_TIME_MS 20
+#define BUTTON_LONG_THRESHOLD_MS 5000
+#define BUTTON_DELAY_MS 300
+
+enum button_event_type {
+	BUTTON_LONG_PRESS = 0,
+	BUTTON_SHORT_PRESS = 1,
+};
+
+void change_switch_state(int switch_state);
+void button_isr_handler(void *arg);
+int get_button_event(int* button_event_type, int* button_event_count);
+void led_blink(int switch_state, int delay, int count);
+void change_led_mode(int noti_led_mode);
+void iot_gpio_init(void);
diff --git a/examples/Smart_Switch/st/device_info.json b/examples/Smart_Switch/st/device_info.json
new file mode 100644
index 000000000..5d9b000ca
--- /dev/null
+++ b/examples/Smart_Switch/st/device_info.json
@@ -0,0 +1,8 @@
+{
+	"deviceInfo": {
+		"firmwareVersion": "firmwareVersion_here",
+		"privateKey": "privateKey_here",
+		"publicKey": "publicKey_here",
+		"serialNumber": "serialNumber_here"
+	}
+}
diff --git a/examples/Smart_Switch/st/mqtt_head.h b/examples/Smart_Switch/st/mqtt_head.h
new file mode 100644
index 000000000..a418339ac
--- /dev/null
+++ b/examples/Smart_Switch/st/mqtt_head.h
@@ -0,0 +1,5 @@
+#include <stdint.h>
+void app_main(void);
+
+void st_pub_handler(const char *topic, uint16_t topic_len, const uint8_t *data,
+               uint16_t len);
\ No newline at end of file
diff --git a/examples/Smart_Switch/st/onboarding_config.json b/examples/Smart_Switch/st/onboarding_config.json
new file mode 100644
index 000000000..c881e4f6c
--- /dev/null
+++ b/examples/Smart_Switch/st/onboarding_config.json
@@ -0,0 +1,16 @@
+{
+  "onboardingConfig": {
+    "deviceOnboardingId": "NAME",
+    "mnId": "MNID",
+    "setupId": "999",
+    "vid": "VID",
+    "deviceTypeId": "TYPE",
+    "ownershipValidationTypes": [
+      "JUSTWORKS",
+      "BUTTON",
+      "PIN",
+      "QR"
+    ],
+    "identityType": "ED25519_or_CERTIFICATE"
+  }
+}
diff --git a/examples/Smart_Switch/st/st_dev.c b/examples/Smart_Switch/st/st_dev.c
new file mode 100644
index 000000000..e06cdbca5
--- /dev/null
+++ b/examples/Smart_Switch/st/st_dev.c
@@ -0,0 +1,323 @@
+#include "mqtt_head.h"
+#include "st_dev.h"
+
+st_sub_t subscriptions[NUMOFSUBS];
+char topics[NUMOFSUBS][TOPIC_MAXLEN];
+char *device_name = "switch1";
+
+////////////////////
+// Helper
+
+char *strdup(const char *src) {
+  size_t len = strlen(src) + 1;  // +1 for the null terminator
+  char *dst = (char *)malloc(len);
+  if (dst != NULL) {
+    memcpy(dst, src, len);
+  }
+  return dst;
+}
+
+////////////////////
+// SmartThings SDK
+
+IOT_CAP_HANDLE *st_cap_handle_init(IOT_CTX *iot_ctx, const char *component,
+                                   const char *capability,
+                                   st_cap_init_cb init_cb,
+                                   void *init_usr_data) {
+  struct iot_cap_handle *handle = NULL;
+  struct iot_context *ctx = (struct iot_context *)iot_ctx;
+
+  if (!ctx || !capability) {
+    return NULL;
+  }
+
+  handle = malloc(sizeof(struct iot_cap_handle));
+  if (!handle) {
+    printf("failed to malloc for iot_cap_handle");
+    return NULL;
+  }
+
+  memset(handle, 0, sizeof(struct iot_cap_handle));
+
+  if (component) {
+    handle->component = strdup(component);
+  } else {
+    handle->component = strdup("main");
+  }
+  if (!handle->component) {
+    IOT_ERROR("failed to malloc for component");
+    iot_os_free(handle);
+    return NULL;
+  }
+
+  handle->capability = strdup(capability);
+  if (!handle->capability) {
+    IOT_ERROR("failed to malloc for capability");
+    free((void *)handle->component);
+    free(handle);
+    return NULL;
+  }
+
+  handle->cmd_list = NULL;
+
+  if (init_cb) handle->init_cb = init_cb;
+
+  if (init_usr_data) handle->init_usr_data = init_usr_data;
+
+  handle->ctx = ctx;
+  return (IOT_CAP_HANDLE *)handle;
+}
+
+void st_pub_handler(const char *topic, uint16_t topic_len, const uint8_t *data,
+                    uint16_t len) {
+  // test output
+  printf("### got publication for topic '%s' ###\n", topic);
+  for (size_t i = 0; i < len; i++) {
+    printf("%c", data[i]);
+  }
+  puts("");
+  // test end
+  unsigned i = 0;
+  for (; (i < NUMOFSUBS) && ((subscriptions[i].topic_len != topic_len) ||
+                             strcmp(topic, subscriptions[i].topic));
+       i++) {
+  }
+
+  if (i == NUMOFSUBS) {
+    puts("error: no subscriptions match the topic id");
+    return;
+  }
+
+  struct iot_cap_cmd *cap_cmd = (struct iot_cap_cmd *)subscriptions[i].arg;
+  iot_cap_cmd_data_t *cap_data = malloc(sizeof(iot_cap_cmd_data_t));
+  cap_data->num_args = 0;
+  // NOW JUST SELF MADE
+  if (data[0] > '9') {
+    cap_data->cmd_data[0].str_num = 1;
+    cap_data->cmd_data[0].string = (char *)data;
+  } else {
+    cap_data->cmd_data[0].str_num = 0;
+    cap_data->cmd_data[0].integer = atoi((char *)data);
+  }
+  if (cap_cmd->cmd_cb == NULL) {
+    printf("ERROR: %s Command Callback is None\n", topics[i]);
+    return;
+  }
+  cap_cmd->cmd_cb((void *)cap_cmd->handle, cap_data, cap_cmd->usr_data);
+  free(cap_data);
+}
+
+int st_cap_cmd_set_cb(IOT_CAP_HANDLE *cap_handle, const char *cmd_type,
+                      st_cap_cmd_cb cmd_cb, void *usr_data) {
+  iot_cap_cmd *cap_cmd = NULL;
+  iot_cap_handle *cap_handle_ = (iot_cap_handle *)cap_handle;
+
+  // find empty subscription slot
+  unsigned i = 0;
+  for (; (i < NUMOFSUBS) && (subscriptions[i].topic_len != 0); i++) {
+  }
+  if (i == NUMOFSUBS) {
+    puts("error: no memory to store new subscriptions");
+    return 1;
+  }
+  // light1/main/switch/on
+  snprintf(topics[i], sizeof(topics[i]), "%s/%s/%s/%s", device_name,
+           cap_handle_->component, cap_handle_->capability, cmd_type);
+  subscriptions[i].topic = topics[i];
+  if (st_sub(topics[i]) != 0) {
+    printf("error: unable to subscribe to %s\n", topics[i]);
+    return 1;
+  }
+
+  cap_cmd = malloc(sizeof(iot_cap_cmd));
+  cap_cmd->cmd_cb = cmd_cb;
+  cap_cmd->usr_data = usr_data;
+  cap_cmd->handle = cap_handle_;
+  subscriptions[i].arg = cap_cmd;
+
+  printf("Now subscribed to %s\n", topics[i]);
+  return 0;
+}
+
+int st_cap_send_attr_string(IOT_CAP_HANDLE *cap_handle, const char *attribute,
+                            char *value, const char *unit, const char *data) {
+  iot_cap_handle *cap_handle_ = (iot_cap_handle *)cap_handle;
+  // contiki mqtt sn
+  char topic[20];
+
+  // light1/main/switch/switch/
+  snprintf(topic, sizeof(topic), "%s/%s/%s/%s", device_name,
+           cap_handle_->component, cap_handle_->capability, attribute);
+
+  /* publish data */
+  st_pub(topic, value);
+  printf("Published %s on topic %s\n", value, topic);
+  return 0;
+}
+
+char *itoa(int num, char *str, int radix) { /*索引表*/
+  char index[] = "0123456789ABCDEF";
+  unsigned unum; /*中间变量*/
+  int i = 0, j, k;
+  /*确定unum的值*/
+  if (radix == 10 && num < 0) /*十进制负数*/
+  {
+    unum = (unsigned)-num;
+    str[i++] = '-';
+  } else
+    unum = (unsigned)num; /*其他情况*/
+  /*转换*/
+  do {
+    str[i++] = index[unum % (unsigned)radix];
+    unum /= radix;
+  } while (unum);
+  str[i] = '\0';
+  /*逆序*/
+  if (str[0] == '-')
+    k = 1; /*十进制负数*/
+  else
+    k = 0;
+
+  for (j = k; j <= (i - 1) / 2; j++) {
+    char temp;
+    temp = str[j];
+    str[j] = str[i - 1 + k - j];
+    str[i - 1 + k - j] = temp;
+  }
+  return str;
+}
+
+int st_cap_send_attr_number(IOT_CAP_HANDLE *cap_handle, const char *attribute,
+                            int value, const char *unit, const char *data) {
+  iot_cap_handle *cap_handle_ = (iot_cap_handle *)cap_handle;
+  // contiki mqtt
+  char topic[10];
+
+  // switch1/main/colorTemperature/colorTemperature/unit
+  snprintf(topic, sizeof(topic), "%s/%s/%s/%s/%s", device_name,
+           cap_handle_->component, cap_handle_->capability, attribute, unit);
+
+  // unsigned flags = 0;
+  char packet[8];
+  itoa(value, packet, 10);
+
+  st_pub(topic, packet);
+
+  printf("Published %s on topic %s\n", packet, topic);
+
+  return 0;
+}
+
+IOT_CTX *st_conn_init(void) {
+  void *ctx = NULL;
+
+  //   if (!onboarding_config || !device_info) {
+  //     IOT_ERROR("invalid parameters\n");
+  //     return NULL;
+  //   }
+
+  ctx = iot_os_malloc(sizeof(struct iot_context));
+  if (!ctx) {
+    IOT_ERROR("failed to malloc for iot_context\n");
+    return NULL;
+  }
+
+  /* Initialize all values */
+  memset(ctx, 0, sizeof(struct iot_context));
+
+  // printf
+  //   printf("[%d] %s\n", onboarding_config_len, onboarding_config);
+  //   printf("[%d] %s\n", device_info_len, device_info);
+
+  // self init
+  for (size_t i = 0; i < NUMOFSUBS; i++) {
+    subscriptions[i].topic = NULL;
+    subscriptions[i].topic_len = 0;
+    subscriptions[i].arg = NULL;
+  }
+  // self init end
+  return ctx;
+}
+
+void st_conn_cleanup(IOT_CTX *iot_ctx, bool clean) {
+  struct iot_context *ctx = (struct iot_context *)iot_ctx;
+  if (clean) free(ctx);
+  watchdog_reboot();
+}
+
+int st_conn_set_noti_cb(IOT_CTX *iot_ctx, st_cap_noti_cb noti_cb,
+                        void *noti_usr_data) {
+  struct iot_context *ctx = (struct iot_context *)iot_ctx;
+
+  if (!ctx || !noti_cb) {
+    IOT_ERROR("There is no ctx or cb !!!");
+    return IOT_ERROR_INVALID_ARGS;
+  }
+
+  ctx->noti_cb = noti_cb;
+
+  if (noti_usr_data) ctx->noti_usr_data = noti_usr_data;
+
+  return IOT_ERROR_NONE;
+}
+
+/**
+ * @brief	st-iot-core server connection function
+ * @details	This function tries to connect server
+ * This function can't be used in callback functions such as init_cb, noti_cb,
+ * cmd_cb, status_cb
+ * @param[in]	iot_ctx		iot_context handle generated by st_conn_init()
+ * @param[in]	status_cb	user callback function to receive status of
+ * st-iot-core
+ * @param[in]	maps		status of st-iot-core interested to receive
+ * through status_cb
+ * @param[in]	usr_data	user data(a pointer) to use in status_cb
+ * @param[in]	pin_num		if PIN ownership validation type used, valid 8
+ * digit pin should be set. otherwise set null.
+ * @return 		return `(0)` if it works successfully, non-zero for
+ * error case.
+ */
+int st_conn_start(IOT_CTX *iot_ctx, st_status_cb status_cb, iot_status_t maps,
+                  char *usr_data, iot_pin_t *pin) {
+  iot_error_t iot_err = 0;
+  // struct iot_context *ctx = (struct iot_context *)iot_ctx;
+  // fix the unused-parameter
+  if (iot_ctx == NULL) {
+    printf("ERROR: iot_ctx is NULL\n");
+    iot_err = -1;
+    goto end_st_conn_start;
+  }
+  if (pin == NULL) {
+    printf("ERROR: pin is NULL\n");
+    iot_err = -1;
+    goto end_st_conn_start;
+  }
+  if (status_cb != NULL) {
+    status_cb(maps, 0, usr_data);
+  }
+end_st_conn_start:
+  return iot_err;
+}
+
+void st_conn_ownership_confirm(IOT_CTX *iot_ctx, bool confirm) { return; }
+
+void delay(int ms) { clock_delay_usec(ms * 1000); }
+
+////////////////////
+// FreeRTOS
+
+void vTaskDelay(uint32_t ms) { delay(ms); }
+
+TickType_t xTaskGetTickCount(void) { return RTIMER_NOW(); }
+
+void vTaskSetTimeOutState(TimeOut_t *timeout) {
+  *timeout = xTaskGetTickCount();
+}
+
+bool xTaskCheckForTimeOut(TimeOut_t *timeout, TickType_t *tick) {
+  TickType_t now = xTaskGetTickCount();
+  if (*timeout + *tick >= now) return true;
+  return false;
+}
+
+void vTaskDelete(void *task) { return; }
diff --git a/examples/Smart_Switch/st/st_dev.h b/examples/Smart_Switch/st/st_dev.h
new file mode 100644
index 000000000..9cb2da432
--- /dev/null
+++ b/examples/Smart_Switch/st/st_dev.h
@@ -0,0 +1,360 @@
+#include <stdint.h>
+#include <stdio.h>
+#include <string.h>
+#include <stdbool.h>
+#include "../mqtt-client.h"
+#include "os/lib/heapmem.h"
+
+#ifndef EMCUTE_ID
+#define EMCUTE_ID ("gertrud")
+#endif
+#define EMCUTE_PRIO (THREAD_PRIORITY_MAIN - 1)
+
+#define NUMOFSUBS (16U)
+#define TOPIC_MAXLEN (64U)
+
+typedef int iot_error_t;
+typedef int iot_stat_lv_t;
+typedef unsigned int TickType_t;
+typedef unsigned int TimeOut_t;
+#define free heapmem_free
+#define iot_os_free free
+#define malloc heapmem_alloc
+#define iot_os_malloc malloc
+#define IOT_ERROR_NONE 0
+#define IOT_ERROR_INVALID_ARGS -2
+#define IOT_ERROR(iot_msg) printf("ERROR: %s\n", iot_msg)
+#define MAX_CAP_ARG (5)
+extern char *device_name;
+
+/**
+ * @brief Contains a enumeration values for types of iot_status.
+ */
+typedef enum iot_status {
+  IOT_STATUS_IDLE = (1 << 0), /**< @brief For idle status, not connected.
+                                 supports IOT_STAT_LV_STAY */
+  IOT_STATUS_PROVISIONING =
+      (1 << 1), /**< @brief For provisioning status. do onboarding process.
+                   supports IOT_STAT_LV_START/CONN/DONE/FAIL */
+  IOT_STATUS_NEED_INTERACT =
+      (1 << 2), /**< @brief For user interation status. need to interact with
+                   user. only supports IOT_STAT_LV_STAY/FAIL */
+  IOT_STATUS_CONNECTING =
+      (1 << 3), /**< @brief For server connecting status. do connecting server.
+                   supports IOT_STAT_LV_START/DONE/FAIL */
+
+  IOT_STATUS_ALL = (IOT_STATUS_IDLE | IOT_STATUS_PROVISIONING |
+                    IOT_STATUS_NEED_INTERACT | IOT_STATUS_CONNECTING),
+} iot_status_t;
+
+/**
+ * @brief Contains a enumeration values for types of notification.
+ */
+typedef enum iot_noti_type {
+  IOT_NOTI_TYPE_UNKNOWN = -1, /**< @brief For undefined type. */
+
+  IOT_NOTI_TYPE_DEV_DELETED,        /**< @brief For device deleted event. */
+  IOT_NOTI_TYPE_RATE_LIMIT,         /**< @brief For rate limit event. */
+  IOT_NOTI_TYPE_QUOTA_REACHED,      /**< @brief For data quota reached event. */
+  IOT_NOTI_TYPE_SEND_FAILED,        /**< @brief For send failed event. */
+  IOT_NOTI_TYPE_COMMANDS,           /**< @brief For commands */
+  IOT_NOTI_TYPE_PREFERENCE_UPDATED, /**< @brief For preference update */
+} iot_noti_type_t;
+
+typedef void *IOT_CTX;
+typedef void *IOT_CAP_HANDLE;
+typedef void *IOT_EVENT;
+
+char *strdup(const char *src);
+
+typedef struct {
+  int type;
+  int remainingTime;
+  int sequenceNumber;
+} iot_noti_data_t;
+
+/**
+ * @brief Contains a various type of data which can be int, double, string and
+ * string array.
+ */
+typedef struct {
+  /**
+   * @brief Data type to notify valid data.
+   *
+   * @note Even though there are 4 different type of data
+   * (integer, number, string, strings) in this structure,
+   * only one type of data is used.
+   */
+  // iot_cap_val_type_t type; /**< @brief Type of capability's data. */
+
+  uint8_t str_num; /**< @brief Number of stings. Only used for sting array. */
+  int integer;     /**< @brief Integer. */
+
+  union {
+    double number;     /**< @brief Float number. */
+    char *string;      /**< @brief NULL-terminated string. */
+    char **strings;    /**< @brief Array of NULL-terminated strings. */
+    char *json_object; /**< @brief Json object payload strings */
+    bool boolean;      /**< @brief boolean */
+  };
+} iot_cap_val_t;
+
+typedef struct iot_pin_t {
+  unsigned int port_num;
+  unsigned char port_char[8]; /**< @brief actual pin values */
+} iot_pin_t;
+
+/**
+ * @brief Contains data for "command" payload.
+ */
+typedef struct {
+  /**
+   * @brief Number of arguments.
+   *
+   * @note Usally 1, but if commands type is 'json object',
+   * it could be more than 1. (See colorControl capability.)
+   */
+  uint8_t num_args;
+
+  /**
+   * @brief Name of each argument.
+   *
+   * @note This is used only if there is more than one argument.
+   */
+  char *args_str[MAX_CAP_ARG];
+
+  iot_cap_val_t cmd_data[MAX_CAP_ARG]; /**< @brief Value of each arguments. */
+
+  int total_commands_num; /**< @brief Total number of commands in a bunch of
+                             commands */
+  int order_of_command; /**< @brief Order of this command in a bunch of commands
+                         */
+
+  char *command_id; /**< @brief commandId */
+} iot_cap_cmd_data_t;
+
+struct iot_cap_handle;
+typedef void (*st_cap_init_cb)(IOT_CAP_HANDLE *cap_handle, void *init_usr_data);
+typedef void (*st_cap_cmd_cb)(IOT_CAP_HANDLE *cap_handle,
+                              iot_cap_cmd_data_t *cmd_data, void *usr_data);
+typedef void (*st_cap_noti_cb)(iot_noti_data_t *noti_data, void *noti_usr_data);
+typedef void (*st_status_cb)(iot_status_t iot_status, iot_stat_lv_t stat_lv,
+                             void *usr_data);
+/**
+ * @brief Contains data for capability handle.
+ */
+typedef struct iot_cap_handle {
+  /**
+   * @brief NULL-terminated string, which is name of `capability`.
+   *
+   * Use capability id for this variable. e.g. "switchLevel"
+   *
+   */
+  const char *capability;
+
+  /**
+   * @brief NULL-terminated string, which is name of `component`.
+   */
+  const char *component;
+
+  struct iot_cap_cmd_set_list *cmd_list; /**< @brief List of command data. */
+
+  st_cap_init_cb
+      init_cb; /**< @brief User callback function for init device state. */
+  void *init_usr_data; /**< @brief User data for init_cb. */
+
+  struct iot_context *ctx; /**< @brief ctx */
+} iot_cap_handle;
+
+// self-made st cap cmd to save for on_pub
+typedef struct iot_cap_cmd {
+  st_cap_cmd_cb cmd_cb;
+  iot_cap_handle *handle;
+  void *usr_data;
+} iot_cap_cmd;
+
+/**
+ * @brief Contains "iot core's main context" data
+ */
+typedef struct iot_context {
+  // iot_util_queue_t *cmd_queue;			/**< @brief iot core's
+  // internal command queue */ iot_util_queue_t *easysetup_req_queue;	/**<
+  // @brief request queue for easy-setup process */ iot_util_queue_t
+  // *easysetup_resp_queue;	/**< @brief response queue for easy-setup
+  // process */ bool es_res_created;				/**< @brief to
+  // check easy-setup resources are created or not */ bool es_http_ready;
+  // /**< @brief to check easy-setup-httpd is initialized or not */ bool
+  // es_ble_ready;				/**< @brief to check
+  // easy-setup-ble is initialized or not */
+
+  // iot_state_t curr_state;			/**< @brief reflect current
+  // iot_state */ iot_os_timer state_timer;		/**< @brief state
+  // checking timer for each iot_state */
+
+  // iot_os_eventgroup *usr_events;		/**< @brief User level handling
+  // events */ iot_os_eventgroup *iot_events;		/**< @brief Internal
+  // handling events */
+
+  // iot_cap_handle_list_t *cap_handle_list;		/**< @brief allocated
+  // capability handle lists */
+
+  // st_mqtt_client evt_mqttcli;			/**< @brief SmartThings
+  // MQTT Client for event & commands */ gg_connection_request_status
+  // sign_in_connection_request_status;	/**< @brief Sign-in connection request
+  // status */ st_mqtt_client reg_mqttcli;			/**< @brief
+  // SmartThings MQTT Client for registration */ unsigned int
+  // mqtt_connect_critical_reject_count;		/**< @brief MQTT connect
+  // critical reject count */ gg_connection_request_status
+  // sign_up_connection_request_status;	/**< @brief Sign-up connection request
+  // status */
+  char *mqtt_event_topic; /**< @brief mqtt topic for event publish */
+                          // char *mqtt_health_topic;				/**< @brief mqtt topic
+                          // for health publish */
+
+  // struct iot_device_prov_data prov_data;	/**< @brief allocated device
+  // provisioning data */ struct iot_devconf_prov_data devconf;	/**< @brief
+  // allocated device configuration data */ struct iot_device_info device_info;
+  // /**< @brief allocated device information data */
+
+  // iot_security_context_t *easysetup_security_context;	/**< @brief
+  // security context ref. for easy-setup process */
+
+  // struct iot_registered_data iot_reg_data;	/**< @brief allocated
+  // registration data from server */ void *es_httpd_handle;
+  // /**< @brief httpd handler for easy-setup process */
+
+  // uint16_t scan_num;						/**< @brief
+  // number of wifi ap scan result */ iot_wifi_scan_result_t *scan_result;
+  // /**< @brief actual data lists of each wifi ap scan result */ char
+  // *lookup_id;						/**< @brief
+  // device's lookup id for server & mobile side notification */
+
+  st_cap_noti_cb noti_cb; /**< @brief notification handling
+// callback for each capability */
+  void *noti_usr_data;    /**<
+// @brief notification handling callback data for user */
+
+  // st_status_cb status_cb;		/**< @brief iot core status handling
+  // callback for user */ iot_status_t status_maps;	/**< @brief iot status
+  // callback maps to check it call or not */ unsigned int reported_stat;
+  // /**< @brief iot status callback checking flag to check it reported or not
+  // */ void *status_usr_data;		/**< @brief iot core status handling
+  // callback data for user */
+
+  // int curr_otm_feature;	/**< @brief current device's supported
+  // onboarding process validation type */ iot_pin_t *pin;
+  // /**< @brief current device's PIN values for PIN type otm */
+
+  // iot_os_thread main_thread; /**< @brief iot main task thread */
+  // iot_os_mutex st_conn_lock; /**< @brief User level control API lock */
+  // iot_os_mutex iot_cmd_lock; /**< @brief iot-core's command handling lock*/
+
+  // bool add_justworks; 	/**< @brief to skip user-confirm using JUSTWORKS
+  // bit */
+
+  // int event_sequence_num;	/**< @brief Last event's sequence number */
+
+  // bool rate_limit; 	/**< @brief whether rate limit occurs */
+  // iot_os_timer rate_limit_timeout;	/**< @brief timeout for rate limit
+  // penalty */
+
+  // unsigned int mqtt_connection_success_count; /**< @brief MQTT connection
+  // success count */ unsigned int mqtt_connection_try_count; /**< @brief MQTT
+  // connection try count */ bool usr_delete_req;	/**< @brief whether
+  // self-device-card-deleting requested from usr */
+
+  // struct iot_st_ecode last_st_ecode;	/**< @brief last happended device error
+  // code to send SmartThings App */
+
+  // bool is_wifi_station;		/**< @brief indicator if wifi is station
+  // mode or not */
+
+  // unsigned int connection_retry_count; 	/**< @brief MQTT server
+  // connection retry count */ iot_os_timer next_connection_retry_timer;
+  // /**< @brief timer for next connection retry count */
+} iot_context;
+
+IOT_CAP_HANDLE *st_cap_handle_init(IOT_CTX *iot_ctx, const char *component,
+                                   const char *capability,
+                                   st_cap_init_cb init_cb, void *init_usr_data);
+
+int st_cap_cmd_set_cb(IOT_CAP_HANDLE *cap_handle, const char *cmd_type,
+                      st_cap_cmd_cb cmd_cb, void *usr_data);
+
+int st_cap_send_attr_string(IOT_CAP_HANDLE *cap_handle, const char *attribute,
+                            char *value, const char *unit, const char *data);
+
+char *itoa(int num, char *str, int radix);
+
+int st_cap_send_attr_number(IOT_CAP_HANDLE *cap_handle, const char *attribute,
+                            int value, const char *unit, const char *data);
+
+#define ST_CAP_SEND_ATTR_STRING(cap_handle, attribute, value_string, unit, \
+                                data, output_seq_num)                      \
+  output_seq_num = st_cap_send_attr_string(cap_handle, attribute,          \
+                                           value_string, unit, data);
+
+#define ST_CAP_SEND_ATTR_NUMBER(cap_handle, attribute, value_number, unit, \
+                                data, output_seq_num)                      \
+  output_seq_num = st_cap_send_attr_number(cap_handle, attribute,          \
+                                           value_number, unit, data);
+
+IOT_CTX *st_conn_init(void);
+
+void st_conn_cleanup(IOT_CTX *iot_ctx, bool clean);
+
+int st_conn_set_noti_cb(IOT_CTX *iot_ctx, st_cap_noti_cb noti_cb,
+                        void *noti_usr_data);
+
+/**
+ * @brief	st-iot-core server connection function
+ * @details	This function tries to connect server
+ * This function can't be used in callback functions such as init_cb, noti_cb,
+ * cmd_cb, status_cb
+ * @param[in]	iot_ctx		iot_context handle generated by st_conn_init()
+ * @param[in]	status_cb	user callback function to receive status of
+ * st-iot-core
+ * @param[in]	maps		status of st-iot-core interested to receive
+ * through status_cb
+ * @param[in]	usr_data	user data(a pointer) to use in status_cb
+ * @param[in]	pin_num		if PIN ownership validation type used, valid 8
+ * digit pin should be set. otherwise set null.
+ * @return 		return `(0)` if it works successfully, non-zero for
+ * error case.
+ */
+int st_conn_start(IOT_CTX *iot_ctx, st_status_cb status_cb, iot_status_t maps,
+                  char *usr_data, iot_pin_t *pin);
+
+void st_conn_ownership_confirm(IOT_CTX *iot_ctx, bool confirm);
+
+////////////////////
+// device_control
+
+#include "clock.h"
+
+#define portTICK_PERIOD_MS 10
+#define pdFALSE false
+#define pdMS_TO_TICKS(ms) ms
+
+void delay(int ms);
+
+/// FreeRTOS Port
+
+void vTaskDelete(void *);
+
+void vTaskDelay(uint32_t ms);
+
+TickType_t xTaskGetTickCount(void);
+
+void vTaskSetTimeOutState(TimeOut_t *timeout);
+
+bool xTaskCheckForTimeOut(TimeOut_t *timeout, TickType_t *tick);
+
+/// self add
+
+typedef struct {
+  char *topic;
+  uint16_t topic_len;
+  void *arg;  // used for callback function and other struct
+} st_sub_t;
+
diff --git a/examples/Smart_Switch/st/switch_main.c b/examples/Smart_Switch/st/switch_main.c
new file mode 100644
index 000000000..e912cbcc5
--- /dev/null
+++ b/examples/Smart_Switch/st/switch_main.c
@@ -0,0 +1,272 @@
+/* ***************************************************************************
+ *
+ * Copyright 2019 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+//for implementing main features of IoT device
+#include <stdbool.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "device_control.h"
+
+// #include "FreeRTOS.h"
+// #include "task.h"
+//#include "iot_uart_cli.h"
+//#include "iot_cli_cmd.h"
+
+#include "caps_switch.h"
+#include "mqtt_head.h"
+
+// onboarding_config_start is null-terminated string
+// extern const uint8_t onboarding_config_start[]	asm("_binary_onboarding_config_json_start");
+// extern const uint8_t onboarding_config_end[]	asm("_binary_onboarding_config_json_end");
+
+// // device_info_start is null-terminated string
+// extern const uint8_t device_info_start[]	asm("_binary_device_info_json_start");
+// extern const uint8_t device_info_end[]		asm("_binary_device_info_json_end");
+
+static iot_status_t g_iot_status = IOT_STATUS_IDLE;
+static iot_stat_lv_t g_iot_stat_lv;
+
+IOT_CTX* ctx = NULL;
+
+//#define SET_PIN_NUMBER_CONFRIM
+
+static int noti_led_mode = LED_ANIMATION_MODE_IDLE;
+
+static caps_switch_data_t *cap_switch_data;
+
+static int get_switch_state(void)
+{
+	const char* switch_value = cap_switch_data->get_switch_value(cap_switch_data);
+	int switch_state = SWITCH_OFF;
+
+	if (!switch_value) {
+		return -1;
+	}
+
+    if (!strcmp(switch_value, caps_helper_switch.attr_switch.value_on)) {
+		switch_state = SWITCH_ON;
+    } else if (!strcmp(switch_value, caps_helper_switch.attr_switch.value_off)) {
+		switch_state = SWITCH_OFF;
+	}
+	return switch_state;
+}
+
+static void cap_switch_cmd_cb(struct caps_switch_data *caps_data)
+{
+	int switch_state = get_switch_state();
+	change_switch_state(switch_state);
+}
+
+static void capability_init()
+{
+    cap_switch_data = caps_switch_initialize(ctx, "main", NULL, NULL);
+    if (cap_switch_data) {
+        const char *switch_init_value = caps_helper_switch.attr_switch.value_on;
+
+        cap_switch_data->cmd_on_usr_cb = cap_switch_cmd_cb;
+        cap_switch_data->cmd_off_usr_cb = cap_switch_cmd_cb;
+
+        cap_switch_data->set_switch_value(cap_switch_data, switch_init_value);
+	}
+}
+
+static void iot_status_cb(iot_status_t status,
+		iot_stat_lv_t stat_lv, void *usr_data)
+{
+	g_iot_status = status;
+	g_iot_stat_lv = stat_lv;
+
+	printf("status: %d, stat: %d\n", g_iot_status, g_iot_stat_lv);
+
+	switch(status)
+	{
+		case IOT_STATUS_NEED_INTERACT:
+			noti_led_mode = LED_ANIMATION_MODE_FAST;
+			break;
+		case IOT_STATUS_IDLE:
+		case IOT_STATUS_CONNECTING:
+			noti_led_mode = LED_ANIMATION_MODE_IDLE;
+            change_switch_state(get_switch_state());
+			break;
+		default:
+			break;
+	}
+}
+
+#if defined(SET_PIN_NUMBER_CONFRIM)
+void* pin_num_memcpy(void *dest, const void *src, unsigned int count)
+{
+    unsigned int i;
+    for (i = 0; i < count; i++)
+        *((char*)dest + i) = *((char*)src + i);
+    return dest;
+}
+#endif
+
+static void connection_start(void)
+{
+    iot_pin_t *pin_num = NULL;
+    int err;
+
+#if defined(SET_PIN_NUMBER_CONFRIM)
+    pin_num = (iot_pin_t *) malloc(sizeof(iot_pin_t));
+    if(!pin_num)
+        printf("failed to malloc for iot_pin_t\n");
+
+    // to decide the pin confirmation number(ex. "12345678"). It will use for easysetup.
+    //    pin confirmation number must be 8 digit number.
+    pin_num_memcpy(pin_num, "12345678", sizeof(iot_pin_t));
+#endif
+
+    // process on-boarding procedure. There is nothing more to do on the app side than call the API.
+    err = st_conn_start(ctx, (st_status_cb)&iot_status_cb, IOT_STATUS_ALL, NULL, pin_num);
+    if (err) {
+        printf("fail to start connection. err:%d\n", err);
+    }
+    if (pin_num) {
+        free(pin_num);
+    }
+}
+
+static void connection_start_task(void *arg)
+{
+    connection_start();
+    vTaskDelete(NULL);
+}
+
+static void iot_noti_cb(iot_noti_data_t *noti_data, void *noti_usr_data)
+{
+	printf("Notification message received\n");
+
+	if (noti_data->type == IOT_NOTI_TYPE_DEV_DELETED) {
+		printf("[device deleted]\n");
+	} else if (noti_data->type == IOT_NOTI_TYPE_RATE_LIMIT) {
+		printf("[rate limit] Remaining time:%d, sequence number:%d\n",
+			noti_data->remainingTime, noti_data->sequenceNumber);
+	}
+}
+
+static void button_event(IOT_CAP_HANDLE *handle, int type, int count)
+{
+    if (type == BUTTON_SHORT_PRESS) {
+        printf("Button short press, count: %d\n", count);
+        switch(count) {
+            case 1:
+                if (g_iot_status == IOT_STATUS_NEED_INTERACT) {
+                    st_conn_ownership_confirm(ctx, true);
+                    noti_led_mode = LED_ANIMATION_MODE_IDLE;
+                    change_switch_state(get_switch_state());
+                } else {
+                    if (get_switch_state() == SWITCH_ON) {
+                        change_switch_state(SWITCH_OFF);
+                        cap_switch_data->set_switch_value(cap_switch_data, caps_helper_switch.attr_switch.value_off);
+                        cap_switch_data->attr_switch_send(cap_switch_data);
+                    } else {
+                        change_switch_state(SWITCH_ON);
+                        cap_switch_data->set_switch_value(cap_switch_data, caps_helper_switch.attr_switch.value_on);
+                        cap_switch_data->attr_switch_send(cap_switch_data);
+                    }
+                }
+                break;
+            case 5:
+                /* clean-up provisioning & registered data with reboot option*/
+                st_conn_cleanup(ctx, true);
+
+                break;
+            default:
+                led_blink(get_switch_state(), 100, count);
+                break;
+        }
+    } else if (type == BUTTON_LONG_PRESS) {
+        printf("Button long press, iot_status: %d\n", g_iot_status);
+        led_blink(get_switch_state(), 100, 3);
+        st_conn_cleanup(ctx, false);
+        // xTaskCreate(connection_start_task, "connection_task", 2048, NULL, 10, NULL);
+    }
+}
+
+static void app_main_task(void *arg)
+{
+	IOT_CAP_HANDLE *handle = (IOT_CAP_HANDLE *)arg;
+
+	int button_event_type;
+	int button_event_count;
+
+	for (;;) {
+		if (get_button_event(&button_event_type, &button_event_count)) {
+			button_event(handle, button_event_type, button_event_count);
+		}
+		if (noti_led_mode != LED_ANIMATION_MODE_IDLE) {
+            change_led_mode(noti_led_mode);
+		}
+
+		vTaskDelay(10 / portTICK_PERIOD_MS);
+	}
+}
+
+void app_main(void)
+{
+    /**
+      SmartThings Device SDK(STDK) aims to make it easier to develop IoT devices by providing
+      additional st_iot_core layer to the existing chip vendor SW Architecture.
+
+      That is, you can simply develop a basic application
+      by just calling the APIs provided by st_iot_core layer like below.
+
+      // create a iot context
+      1. st_conn_init();
+
+      // create a handle to process capability
+      2. st_cap_handle_init(); (called in function 'capability_init')
+
+      // register a callback function to process capability command when it comes from the SmartThings Server.
+      3. st_cap_cmd_set_cb(); (called in function 'capability_init')
+
+      // process on-boarding procedure. There is nothing more to do on the app side than call the API.
+      4. st_conn_start(); (called in function 'connection_start')
+     */
+
+	// unsigned char *onboarding_config = (unsigned char *) onboarding_config_start;
+	// unsigned int onboarding_config_len = onboarding_config_end - onboarding_config_start;
+	// unsigned char *device_info = (unsigned char *) device_info_start;
+	// unsigned int device_info_len = device_info_end - device_info_start;
+
+	int iot_err;
+
+	// create a iot context
+	// ctx = st_conn_init(onboarding_config, onboarding_config_len, device_info, device_info_len);
+    ctx = st_conn_init();
+	if (ctx != NULL) {
+		iot_err = st_conn_set_noti_cb(ctx, iot_noti_cb, NULL);
+		if (iot_err)
+			printf("fail to set notification callback function\n");
+	} else {
+		printf("fail to create the iot_context\n");
+	}
+
+    // create a handle to process capability and initialize capability info
+    capability_init();
+
+    iot_gpio_init();
+//    register_iot_cli_cmd();
+//    uart_cli_main();
+    // xTaskCreate(app_main_task, "app_main_task", 4096, NULL, 10, NULL);
+
+    // connect to server
+    connection_start();
+}
diff --git a/examples/Smart_Switch/usr_config.mk b/examples/Smart_Switch/usr_config.mk
new file mode 100644
index 000000000..1854cd400
--- /dev/null
+++ b/examples/Smart_Switch/usr_config.mk
@@ -0,0 +1,13 @@
+########################################
+# user Config
+########################################
+
+CONFIG_STDK_IOT_CORE_SECURITY_BACKEND_SOFTWARE=y
+CONFIG_STDK_IOT_CORE_SECURITY_BACKEND_HARDWARE=
+CONFIG_STDK_IOT_CORE_EASYSETUP_HTTP_USE_SOCKET_API=y
+CONFIG_STDK_IOT_CORE_EASYSETUP_DISCOVERY_SSID=y
+
+CONFIG_STDK_IOT_CORE_LOG_LEVEL_WARN=y
+CONFIG_STDK_IOT_CORE_LOG_LEVEL_ERROR=y
+CONFIG_STDK_IOT_CORE_LOG_LEVEL_INFO=y
+CONFIG_STDK_IOT_CORE_LOG_LEVEL_DEBUG=n
-- 
2.45.2

